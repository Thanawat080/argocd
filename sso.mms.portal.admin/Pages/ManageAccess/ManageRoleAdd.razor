@page "/mahospitalrolesadddata"
@using sso.mms.portal.admin.Services;
@using sso.mms.helper.Data;
@using sso.mms.portal.admin.ViewModels;
@using sso.mms.helper.Utility;
@using AntDesign
@inject NavigationManager Navigation;
@inject ManageMentMenuService ManageMentMenuService;
@inject SweetAlertService Swal;

<style>
        :root {
        --mdc-theme-primary: #334396;
    }

    .form-control, .form-select {
        display: block;
        width: 100%;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: var(--bs-body-color);
        background-color: var(--bs-body-bg);
        background-clip: padding-box;
        border: var(--bs-border-width) solid #9e9e9e;
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        border-radius: var(--bs-border-radius-sm);
        transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
        height: 3rem;
    }

    @@media only screen and (min-width: 1000px) {
        .pm-xl {
            position: fixed;
            width: 100%;
            z-index: 1000;
        }
    }

    @@media only screen and (max-width: 1000px) {
        .position-class {
            position: relative
        }
    }

    @@media (min-width: 576px) {
        .modal-dialog {
            max-width: 800px;
            margin: 1.75rem auto;
        }
    }

    .mdc-table th {
        font-size: 1.143rem;
        color: #334396;
        border: 2px solid rgb(255 255 255);
        padding: 5px 5px 5px 5px;
        background: #FFCC41;
        font-family: 'Noto Sans Thai';
        font-style: normal;
        font-weight: 700;
        font-size: 18px;
        line-height: 27px;
        letter-spacing: 0.2px;
        color: #334396;
    }

    .mdc-table, .mdc-table--striped {
        width: 100%;
        max-width: 100%;
        background-color: transparent;
        border-collapse: collapse;
        border-spacing: 0;
        display: inline-block;
        overflow-x: auto;
        margin: 8px 0 32px;
        border: 0px solid rgba(0,0,0,.1);
        font-family: 'Noto Sans Thai';
        font-style: normal;
        font-weight: 500;
        font-size: 16px;
        align-items: center;
        color: #1A141F;
        border-radius: 10px;
    }

        .mdc-table td {
            border: 2px solid white;
            padding: 12px 12px 12px 24px;
        }

    tr.mdc-table-footer-row, tr.mdc-table-row {
        height: 48px;
        background: #a8a2ad17;
    }

    .mdc-table--striped tr:nth-of-type(odd) {
        background: #00000012;
    }

    .mdc-select__dropdown-icon {
        margin-left: 1px;
        margin-right: 1px;
        display: inline-flex;
        position: relative;
        align-self: center;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
        pointer-events: none;
    }

    .mdc-select .mdc-select__anchor {
        height: 56px;
        display: flex;
        align-content: center;
        align-items: center;
    }

    .mat-paginator .mat-paginator-container .mat-paginator-page-size {
        display: flex;
        margin-right: 8px;
        align-items: center
    }

    .mat-paginator .mat-paginator-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        min-height: 56px;
        padding: 0 8px;
        flex-wrap: wrap-reverse;
    }

    .mdc-paginator-container {
        display: flex;
        justify-content: space-between;
        min-height: 56px;
        padding: 0 8px;
        flex-wrap: wrap-reverse;
        width: 100%;
        align-items: center;
    }

    .mdc-select:not(.mdc-select--disabled) .mdc-select__anchor {
        background-color: #ffffff;
        width: 80px;
        height: 30px;
        border-radius: 10px;
        border: 0px solid #D4D2D5;
    }

    .mdc-paginator-page-size {
        line-height: 0px;
        display: flex;
        align-items: center;
    }

    .mdc-table td {
        border: 2px solid white;
        padding: 1px;
    }

    .mat-elevation-z5 {
        box-shadow: 0px 3px 0px -1px rgb(0 0 0 / 0%), 0px 5px 0px 0px rgb(0 0 0 / 0%), 0px 1px 0px 0px rgb(0 0 0 / 0%);
    }

    .swal2-container.swal2-center > .swal2-popup {
        grid-column: 2;
        grid-row: 2;
        align-self: center;
        justify-self: center;
        border-radius: 16px;
    }

    .swal2-title {
        position: relative;
        max-width: 100%;
        margin: 0;
        padding: 0.8em 1em 0;
        color: inherit;
        font-size: 1.875em;
        font-weight: 600;
        text-align: center;
        text-transform: none;
        word-wrap: break-word;
        color: #334396;
        font-family: Noto Sans Thai;
    }

    .swal2-styled.swal2-confirm {
        border: 0;
        color: #fff;
        font-size: 1em;
        border-radius: 4px;
        background: #334396;
        width: 150px;
    }

</style>

<div class="container">
    <div class="MA-headder">
        <div class="MA-title p-3">
            จัดการบทบาท
        </div>
    </div>
    <form @onsubmit=goMsubdetail>
        <div class="MA-body">
            <div class="container">
                <div class="py-4">
                    <div class="row d-flex justify-content-between align-content-center">
                        <div class="w-100">
                            <label class="form-label">ชื่อบทบาท<p style="color:#FF0000">*</p></label>
                            <input type="text" id="firstName" class="form-control form-control-lg" @bind-value=@rolegrouplist.Name
                                   oninvalid="this.setCustomValidity('โปรดกรอกข้อมูล !')" required />
                        </div>
                        <div class="row radio-class mt-2">
                            <div class="col-1 w-25 d-flex align-items-center"><div class="form-label">สถานะการใช้งาน<p style="color:#FF0000">*</p></div></div>
                            <div class="col-3 d-flex align-items-center">
                                <div class="form-check w-50 check-d-flex">
                                    <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1" @onchange="@(() => rolegrouplist.IsStatus = 1)" checked="@status1">
                                    <label class="form-check-label radio-txt pt-1" for="flexRadioDefault1">
                                        &nbsp; ใช่
                                    </label>
                                </div>
                                <div class="form-check w-50 check-d-flex">
                                    <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2" @onchange="@(() => rolegrouplist.IsStatus = 0)" checked="@status2">
                                    <label class="form-check-label radio-txt pt-1" for="flexRadioDefault2">
                                        &nbsp; ไม่ใช่
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="w-100">
                            <label class="form-label">รหัสบทบาท<p style="color:#FF0000">*</p></label>
                            <input type="text" class="form-control form-control-lg" @bind-value=@rolegrouplist.RoleCode required />
                        </div>
                        <div class="w-100">
                            <label class="form-label">คำอธิบายบทบาท</label>
                            <input type="text" class="form-control form-control-lg" @bind-value=@rolegrouplist.RoleDesc/>
                        </div>
                        <div class="w-100">
                            <label class="form-label">เลือกเมนูหลัก<p style="color:#FF0000">*</p></label>
                            <select class="form-select form-control-lg" aria-label="Default select example" @onchange=@changeAppcode required>
                                <option selected value="0" disabled >เลือก</option>
                                @if (menulist1 != null)
                                {
                                    @foreach (var cnt in menulist1)
                                    {

                                        <option value="@cnt.AppCode">@cnt.Name</option>
                                    }
                                }


                            </select>
                        </div>
                        <div class="w-100">
                            <label class="form-label">เลือกเมนูย่อย<p style="color:#FF0000">*</p></label>
                            <select class="form-select form-control-lg" aria-label="Default select example" @onchange=@addRoleMenu required>
                                <option selected value="0" disabled >เลือก</option>
                                @if (listRoleMenu != null)
                                {
                                    @foreach (var cnt in listRoleMenu)
                                    {
                                        <option value="@cnt.Id">@cnt.MenuName</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                </div>


                <MatTable ShowPaging="false" 
                    Items="@listRoleMenuForSave" 
                    LoadInitialData="true" Striped="true" 
                    RequestApiOnlyOnce="true" 
                    AllowSelection="true" 
                    RowClass="tester"
                    PageSize="@pageSize"
                          CurrentPage="@pageIndex"
                          DebounceMilliseconds="150" class="mat-elevation-z5">
                    <MatTableHeader>
                        <th class="text-center" style="border-radius:10px 0 0 0;width:150px;"></th>
                        <th class="text-center" style="width:150px;"></th>
                        <th class="text-center" style="width:800px">ชื่อบทบาท</th>
                        <th class="text-center" style="width:130px;">APPCODE</th>
                        <th class="text-center" style="width:130px;">ดู</th>
                        <th class="text-center" style="width:130px;">สร้าง</th>
                        <th class="text-center" style="width:130px;">แก้ไข</th>
                        <th class="text-center" style="width:130px;">ลบ</th>
                        <th class="text-center" style="width:130px;">พิมพ์</th>
                        <th class="text-center" style="width:130px;">ยกเลิก</th>
                        <th class="text-center" style="width:130px;">อนุมัติ</th>
                        <th class="text-center" style="border-radius:0 10px 0 0;width:130px;">ทั้งหมด</th>

                    </MatTableHeader>

                    <MatTableRow>
                        @if (listRoleMenuForSave.Count() != 0)
                        {
                            <td class="text-center">
                                <img src="helper_shared/icon_sso/delete.png" style="width:32px;height:32px;" data-bs-placement="bottom" title="ลบ" @onclick="@(() => DeleterolegrouplistT(context.Id, listRoleMenuForSave.IndexOf(context)))" />
                            </td>
                            <td class="text-center" style="max-width:150px; ">@String.Format("{0:d}", listRoleMenuForSave.IndexOf(context) + 1)</td>
                            <td class="text-center" style="width:800px; ">@context.Name</td>
                            <td class="text-center" style="width:130px; ">@context.AppCode</td>
                            <td class="text-center" style="width:130px; ">
                                <input class="form-check-input" type="checkbox" id="inlineCheckbox1" value="option1" @bind=@context.IsRoleRead @onclick="@(() => SelectAllOne(context.Id, context.IsRoleAll, context.IsRoleRead, listRoleMenuForSave.IndexOf(context) ))">
                            </td>
                            <td class="text-center" style="width:130px;  ">
                                <input class="form-check-input" type="checkbox" id="inlineCheckbox2" value="option2" @bind=@context.IsRoleCreate @onclick="@(() => SelectAllOne(context.Id, context.IsRoleAll, context.IsRoleCreate, listRoleMenuForSave.IndexOf(context) ))">
                            </td>
                            <td class="text-center" style="width:130px;  ">
                                <input class="form-check-input" type="checkbox" id="inlineCheckbox3" value="option3" @bind=@context.IsRoleUpdate @onclick="@(() => SelectAllOne(context.Id, context.IsRoleAll, context.IsRoleUpdate, listRoleMenuForSave.IndexOf(context) ))">
                            </td>
                            <td class="text-center" style="width:130px;  ">
                                <input class="form-check-input" type="checkbox" id="inlineCheckbox4" value="option4" @bind=@context.IsRoleDelete @onclick="@(() => SelectAllOne(context.Id, context.IsRoleAll, context.IsRoleDelete, listRoleMenuForSave.IndexOf(context) ))">
                            </td>
                            <td class="text-center" style="width:130px;  ">
                                <input class="form-check-input" type="checkbox" id="inlineCheckbox5" value="option5" @bind=@context.IsRolePrint @onclick="@(() => SelectAllOne(context.Id, context.IsRoleAll, context.IsRolePrint, listRoleMenuForSave.IndexOf(context) ))">
                            </td>
                            <td class="text-center" style="width:130px;  ">
                                <input class="form-check-input" type="checkbox" id="inlineCheckbox6" value="option6" @bind=@context.IsRoleCancel @onclick="@(() => SelectAllOne(context.Id, context.IsRoleAll, context.IsRoleCancel, listRoleMenuForSave.IndexOf(context) ))">
                            </td>
                            <td class="text-center" style="width:130px;  ">
                                <input class="form-check-input" type="checkbox" id="inlineCheckbox7" value="option7" @bind=@context.IsRoleApprove @onclick="@(() => SelectAllOne(context.Id, context.IsRoleAll, context.IsRoleApprove, listRoleMenuForSave.IndexOf(context) ))">
                            </td>
                            <td class="text-center" style="width:130px;  ">
                                <input class="form-check-input" type="checkbox" id="inlineCheckbox8" value="option8" @bind=@context.IsRoleAll @onclick="@(() => SelectAll(context.Id, context.IsRoleAll, listRoleMenuForSave.IndexOf(context)))">
                            </td>
                        }
                    </MatTableRow>

                </MatTable>

                <AntDesign.Pagination
                        ShowSizeChanger
                                 OnShowSizeChange="OnShowSizeChange"
                                 OnChange="OnPage"
                                 DefaultCurrent="3"
                                 PageSize=@pageSize
                                       Total="@listRoleMenuForSave.Count()" />
                <div class="d-flex justify-content-end align-content-center pt-4 pb-4">
                    <button class="btn btn-primary btn-save" type="submit">
                        <div class="txt-btn-save">
                            <i class="fa-regular fa-floppy-disk"></i>&nbsp; บันทึก
                        </div>
                    </button>
                </div>
            </div>
        </div>
    </form>
</div>

@if (DialogIsOpen)
{
    <ModalSaveChange OnClose="@OnDialogClose" title="ยืนยันการบันทึกข้อมูลใช่หรือไม่" description="">
    </ModalSaveChange>
}

@if (isloading == true)
{
    <style>body { overflow: hidden; }</style><LoadingPage></LoadingPage>
}


@code {
    public bool isloading = false;

    private bool DialogIsOpen = false;
    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? shortToken { get; set; } = "";

    [Parameter]
    public EventCallback<int> Callback { get; set; }

    [Parameter]
    public string MRole { get; set; }
    [Parameter]
    public int MId { get; set; }

    public bool status1 { get; set; } = false;
    public bool status2 { get; set; } = true;
    List<RoleAppM> menulist1 = new List<RoleAppM>();
    RoleGroupM rolegrouplist = new RoleGroupM();

    public string lastChooseMenu ; 
    List<RoleMenuM> listRoleMenu = new List<RoleMenuM>();
    List<int> listIdFordelete = new List<int>();

    List<ManageMentMenuModel.ViewModelForSaveGroupList> listRoleMenuForSave = new List<ManageMentMenuModel.ViewModelForSaveGroupList>();


    int pageSize = 5;
    int pageIndex = 0;

    void OnPage(PaginationEventArgs e)
    {

        Console.WriteLine(e);
        pageSize = e.PageSize;
        pageIndex = e.Page;
    }


    private void OnShowSizeChange(PaginationEventArgs args)
    {
        var (current, pageSize) = args;
        Console.WriteLine($"{current}, {pageSize}");
    }


    protected override async Task OnInitializedAsync()
    {
        isloading = true;
        if (MId != 0)
        {
            rolegrouplist = await ManageMentMenuService.getRoleGroupById(MId);
            listRoleMenuForSave = await ManageMentMenuService.getRoleGroupListByRoleGroupMId(rolegrouplist.Id);
            if (rolegrouplist.IsStatus == 1)
            {
                status1 = true;
            }
            else
            {
                status2 = true;
            }

            var lastitem = listRoleMenuForSave.Last();
            if (lastitem.AppCode == "PORTAL-SSO")
            {
                lastChooseMenu = "PORTAL-SSO";
            }
            else
            {
                lastChooseMenu = "PORTAL-HOS";
            }
            listRoleMenu = await ManageMentMenuService.GetManageMentmenuEdit(lastitem.AppCode);
            foreach (var item in listRoleMenuForSave)
            {

                item.update = true;
                if (item.IsRoleCancel == true && item.IsRoleCreate == true && item.IsRoleUpdate == true && item.IsRoleDelete == true && item.IsRolePrint == true &&
                    item.IsRoleApprove == true && item.IsRoleRead == true)
                {
                    item.IsRoleAll = true;
                }
                else
                {
                    item.IsRoleAll = false;
                }
            }
        }
        menulist1 = await ManageMentMenuService.GetManageMentmenu();
        isloading = false;
        StateHasChanged();
    }
    public async void changeAppcode(ChangeEventArgs e)
    {
        listRoleMenu = null;
        Console.WriteLine(e.Value.ToString());
        listRoleMenu = await ManageMentMenuService.GetManageMentmenuEdit(e.Value.ToString());
        StateHasChanged();
    }
    public async void SelectAllOne(int id, bool? clickall, bool? ititem, int index)
    {
        if (id != 0)

        {

            if ((bool)clickall)
            {
                listRoleMenuForSave.Where(x => x.Id == id).FirstOrDefault().IsRoleAll = false;
            }
            else
            {
                var count = 0;
                var resx = listRoleMenuForSave.Where(x => x.Id == id).FirstOrDefault();
                if (resx.IsRoleUpdate == true)
                {
                    count += 1;
                }
                if (resx.IsRoleCreate == true)
                {
                    count += 1;
                }
                if (resx.IsRoleRead == true)
                {
                    count += 1;
                }
                if (resx.IsRoleDelete == true)
                {
                    count += 1;
                }
                if (resx.IsRolePrint == true)
                {
                    count += 1;
                }
                if (resx.IsRoleApprove == true)
                {
                    count += 1;
                }
                if (resx.IsRoleCancel == true)
                {
                    count += 1;
                }
                if (ititem == true)
                {
                    count -= 1;
                }
                if (count == 6)
                {
                    listRoleMenuForSave.Where(x => x.Id == id).FirstOrDefault().IsRoleAll = true;
                }
            }


        }else
        {
            if ((bool)clickall)
            {
                listRoleMenuForSave.Skip(index).FirstOrDefault().IsRoleAll = false;
            }
            else
            {
                var count = 0;
                var resx = listRoleMenuForSave.Skip(index).FirstOrDefault();
                if (resx.IsRoleUpdate == true)
                {
                    count += 1;
                }
                if (resx.IsRoleCreate == true)
                {
                    count += 1;
                }
                if (resx.IsRoleRead == true)
                {
                    count += 1;
                }
                if (resx.IsRoleDelete == true)
                {
                    count += 1;
                }
                if (resx.IsRolePrint == true)
                {
                    count += 1;
                }
                if (resx.IsRoleApprove == true)
                {
                    count += 1;
                }
                if (resx.IsRoleCancel == true)
                {
                    count += 1;
                }
                if (ititem == true)
                {
                    count -= 1;
                }
                if (count == 6)
                {
                    listRoleMenuForSave.Skip(index).FirstOrDefault().IsRoleAll = true;
                }
            }
        
        }

        StateHasChanged();

    }

    public async void SelectAll(int id, bool? clickall, int index)
    {
        if (id != 0)

        {
            if ((bool)clickall)
            {
                listRoleMenuForSave.Where(x => x.Id == id).FirstOrDefault().IsRoleUpdate = false;
                listRoleMenuForSave.Where(x => x.Id == id).FirstOrDefault().IsRoleCreate = false;
                listRoleMenuForSave.Where(x => x.Id == id).FirstOrDefault().IsRoleRead = false;
                listRoleMenuForSave.Where(x => x.Id == id).FirstOrDefault().IsRoleDelete = false;
                listRoleMenuForSave.Where(x => x.Id == id).FirstOrDefault().IsRolePrint = false;
                listRoleMenuForSave.Where(x => x.Id == id).FirstOrDefault().IsRoleApprove = false;
                listRoleMenuForSave.Where(x => x.Id == id).FirstOrDefault().IsRoleCancel = false;
            }
            else
            {
                listRoleMenuForSave.Where(x => x.Id == id).FirstOrDefault().IsRoleUpdate = true;
                listRoleMenuForSave.Where(x => x.Id == id).FirstOrDefault().IsRoleCreate = true;
                listRoleMenuForSave.Where(x => x.Id == id).FirstOrDefault().IsRoleRead = true;
                listRoleMenuForSave.Where(x => x.Id == id).FirstOrDefault().IsRoleDelete = true;
                listRoleMenuForSave.Where(x => x.Id == id).FirstOrDefault().IsRolePrint = true;
                listRoleMenuForSave.Where(x => x.Id == id).FirstOrDefault().IsRoleApprove = true;
                listRoleMenuForSave.Where(x => x.Id == id).FirstOrDefault().IsRoleCancel = true;

            }
        }
        else

        {
            if ((bool)clickall)
            {
                listRoleMenuForSave.Skip(index).FirstOrDefault().IsRoleUpdate = false;
                listRoleMenuForSave.Skip(index).FirstOrDefault().IsRoleCreate = false;
                listRoleMenuForSave.Skip(index).FirstOrDefault().IsRoleRead = false;
                listRoleMenuForSave.Skip(index).FirstOrDefault().IsRoleDelete = false;
                listRoleMenuForSave.Skip(index).FirstOrDefault().IsRolePrint = false;
                listRoleMenuForSave.Skip(index).FirstOrDefault().IsRoleApprove = false;
                listRoleMenuForSave.Skip(index).FirstOrDefault().IsRoleCancel = false;
            }
            else
            {
                listRoleMenuForSave.Skip(index).FirstOrDefault().IsRoleUpdate = true;
                listRoleMenuForSave.Skip(index).FirstOrDefault().IsRoleCreate = true;
                listRoleMenuForSave.Skip(index).FirstOrDefault().IsRoleRead = true;
                listRoleMenuForSave.Skip(index).FirstOrDefault().IsRoleDelete = true;
                listRoleMenuForSave.Skip(index).FirstOrDefault().IsRolePrint = true;
                listRoleMenuForSave.Skip(index).FirstOrDefault().IsRoleApprove = true;
                listRoleMenuForSave.Skip(index).FirstOrDefault().IsRoleCancel = true;

            }
        }

        StateHasChanged();
    }

    public async void addRoleMenu(ChangeEventArgs e)
    {
        Console.WriteLine(e.Value.ToString());
        if (MId != 0 && e.Value.ToString() == "0")
        {
            return;
        }
        if (e.Value.ToString() == "0")
        {
            listRoleMenuForSave = new List<ManageMentMenuModel.ViewModelForSaveGroupList>();
        }
        else
        {
            var res = listRoleMenu.Where(x => x.Id == Int32.Parse(e.Value.ToString())).FirstOrDefault();

            ManageMentMenuModel.ViewModelForSaveGroupList resmodel = new ManageMentMenuModel.ViewModelForSaveGroupList();
            resmodel.IsRoleDelete = false;
            resmodel.IsRoleCreate = false;
            resmodel.IsRoleRead = false;
            resmodel.IsRoleCancel = false;
            resmodel.IsRoleApprove = false;
            resmodel.IsRoleUpdate = false;
            resmodel.IsRolePrint = false;
            resmodel.IsRoleAll = false;
            resmodel.AppCode = res.AppCode;
            resmodel.RoleMenuMId = Int32.Parse(e.Value.ToString());
            resmodel.Name = res.MenuName;

            var checkdup = listRoleMenuForSave.Where(x => x.RoleMenuMId == Int32.Parse(e.Value.ToString())).FirstOrDefault();
            if (checkdup == null)

            {
                listRoleMenuForSave.Add(resmodel);
            }
            else
            {
                Console.WriteLine(checkdup);
            }
        }
    }

    private async Task OnDialogClose(bool isOk)
    {
        if (isOk)
        {
            isloading = true;
            rolegrouplist.UserGroup = MRole;
            rolegrouplist.CreateBy = "MMs-Admin";
            rolegrouplist.UpdateBy = "MMs-Admin";
            if (listRoleMenu.Count == 0 || listRoleMenu == null)
            {
                isloading = false;
                StateHasChanged();
                await Swal.FireAsync(
                    "กรูณากรอกข้อมูลให้ครบ",
                    null,
                    SweetAlertIcon.Warning
                    );
                await this.Callback.InvokeAsync(0);
            }
            if (MId != 0)
            {
                var res = await ManageMentMenuService.editAddRole(listRoleMenuForSave, rolegrouplist, listIdFordelete);
                if (res == "success")
                {
                    isloading = false;
                    StateHasChanged();
                    await Swal.FireAsync(
                        "บันทึกสำเร็จ",
                        null,
                        SweetAlertIcon.Success
                        );

                    await this.Callback.InvokeAsync(0);
                }
                else
                {
                    isloading = false;
                    StateHasChanged();
                    await Swal.FireAsync(
                        "บันทึกไม่สำเร็จ",
                        null,
                        SweetAlertIcon.Error
                        );
                    await this.Callback.InvokeAsync(0);
                }
            }
            else
            {
                isloading = true;
                var res = await ManageMentMenuService.saveAddRole(listRoleMenuForSave, rolegrouplist);
                if (res == "success")
                {
                    isloading = false;
                    StateHasChanged();
                    await Swal.FireAsync(
                        "บันทึกสำเร็จ",
                        null,
                        SweetAlertIcon.Success
                        );
                    await this.Callback.InvokeAsync(0);
                }
                else
                {
                    if (res == "duplicaterolecode")
                    {
                        isloading = false;
                        StateHasChanged();
                        await Swal.FireAsync(
                            "RoleCode ซ้ำ",
                            null,
                            SweetAlertIcon.Error
                            );
                    }
                    else
                    {
                        isloading = false;
                        StateHasChanged();
                        await Swal.FireAsync(
                            "บันทึกไม่สำเร็จ",
                            null,
                            SweetAlertIcon.Error
                            );
                        await this.Callback.InvokeAsync(0);
                    }
                }
            }
        }

        DialogIsOpen = false;
    }

    public async void goMsubdetail()
    {
        DialogIsOpen = true;
        StateHasChanged();
    }

    public async void DeleterolegrouplistT(int id, int index)
    {
        listRoleMenuForSave.RemoveAt(index);
        if (id != 0)
        {
            listIdFordelete.Add(id);
        }
        //await ManageMentMenuService.delteRoleGroupListT(id);
        //listRoleMenuForSave = await ManageMentMenuService.getRoleGroupListByRoleGroupMId(rolegrouplist.Id);
        StateHasChanged();
    }
}
