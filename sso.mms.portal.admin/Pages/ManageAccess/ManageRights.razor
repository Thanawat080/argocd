@page "/maright"
@using sso.mms.portal.admin.ViewModels;
@using sso.mms.portal.admin.Services;
@using sso.mms.helper.Utility;
@using sso.mms.helper.Data;
@using sso.mms.helper.Configs;
@using Blazored.LocalStorage;
@using sso.mms.login.Services;
@using sso.mms.helper.PortalModel;
@using sso.mms.portal.admin.Shared.RoleListTable;
@using AntDesign;
@inject ILocalStorageService localStorage
@inject UserRoleService userRoleService
@inject ManageMentMenuService ManageMentMenuService
@inject SweetAlertService Swal
@inject KeyCloakService keyCloakService

<style>
    :root {
        --mdc-theme-primary: #334396;
    }

    .form-control, .form-select {
        display: block;
        width: 100%;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: var(--bs-body-color);
        background-color: var(--bs-body-bg);
        background-clip: padding-box;
        border: var(--bs-border-width) solid #9e9e9e;
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        border-radius: var(--bs-border-radius-sm);
        transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
        height: 3rem;
    }

    @@media only screen and (min-width: 1000px) {
        .pm-xl {
            position: fixed;
            width: 100%;
            z-index: 1000;
        }
    }

    @@media only screen and (max-width: 1000px) {
        .position-class {
            position: relative
        }
    }

    @@media (min-width: 576px) {
        .modal-dialog {
            max-width: 800px;
            margin: 1.75rem auto;
        }
    }

    .mdc-table th {
        font-size: 1.143rem;
        color: #334396;
        border: 2px solid rgb(255 255 255);
        padding: 12px 12px 12px 24px;
        background: #FFCC41;
        font-family: 'Noto Sans Thai';
        font-style: normal;
        font-weight: 700;
        font-size: 18px;
        line-height: 27px;
        letter-spacing: 0.2px;
        color: #334396;
    }

    .mdc-table, .mdc-table--striped {
        width: 100%;
        max-width: 100%;
        background-color: transparent;
        border-collapse: collapse;
        border-spacing: 0;
        display: inline-block;
        overflow-x: auto;
        margin: 8px 0 32px;
        border: 0px solid rgba(0,0,0,.1);
        font-family: 'Noto Sans Thai';
        font-style: normal;
        font-weight: 500;
        font-size: 16px;
        align-items: center;
        color: #1A141F;
        border-radius: 10px;
    }

        .mdc-table td {
            border: 2px solid white;
            padding: 12px 12px 12px 24px;
        }

    tr.mdc-table-footer-row, tr.mdc-table-row {
        height: 48px;
        background: #a8a2ad17;
    }

    .mdc-table--striped tr:nth-of-type(odd) {
        background: #00000012;
    }

    .mdc-select__dropdown-icon {
        margin-left: 1px;
        margin-right: 1px;
        display: inline-flex;
        position: relative;
        align-self: center;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
        pointer-events: none;
    }

    .mdc-select .mdc-select__anchor {
        height: 56px;
        display: flex;
        align-content: center;
        align-items: center;
    }

    .mat-paginator .mat-paginator-container .mat-paginator-page-size {
        display: flex;
        margin-right: 8px;
        align-items: center
    }

    .mat-paginator .mat-paginator-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        min-height: 56px;
        padding: 0 8px;
        flex-wrap: wrap-reverse;
    }

    .mdc-paginator-container {
        display: flex;
        justify-content: space-between;
        min-height: 56px;
        padding: 0 8px;
        flex-wrap: wrap-reverse;
        width: 100%;
        align-items: center;
    }

    .mdc-select:not(.mdc-select--disabled) .mdc-select__anchor {
        background-color: #ffffff;
        width: 80px;
        height: 30px;
        border-radius: 10px;
        border: 0px solid #D4D2D5;
    }

    .mdc-paginator-page-size {
        line-height: 0px;
        display: flex;
        align-items: center;
    }

    .mat-elevation-z5 {
        box-shadow: 0px 3px 0px -1px rgb(0 0 0 / 0%), 0px 5px 0px 0px rgb(0 0 0 / 0%), 0px 1px 0px 0px rgb(0 0 0 / 0%);
    }

    .btn-otp {
        background: #334396;
    }

    .form-check-input:checked {
        background-color: #334396;
        border-color: #334396;
        width: 30px;
        height: 30px;
    }

    .form-check-input:focus {
        border-color: #334396;
        outline: 0;
        box-shadow: 0 0 0 0.25rem #3343968a;
    }

    .form-check-input[type=checkbox] {
        border-radius: 0.25em;
        width: 30px;
        height: 30px;
    }

    .modal-content {
        position: relative;
        display: flex;
        flex-direction: column;
        width: 100%;
        pointer-events: auto;
        background-color: #F5F3F7;
        background-clip: padding-box;
        border: 1px solid rgba(0,0,0,.2);
        outline: 0;
        border-radius: 16px;
    }

    .modal-header {
        display: flex;
        flex-shrink: 0;
        align-items: center;
        justify-content: space-between;
        padding: 1rem 1rem;
        border-bottom: 0px solid #dee2e6;
        border-top-left-radius: calc(0.3rem - 1px);
        border-top-right-radius: calc(0.3rem - 1px);
    }

    .modal-footer {
        display: flex;
        flex-wrap: wrap;
        flex-shrink: 0;
        align-items: center;
        justify-content: flex-end;
        padding: 0.75rem;
        border-top: 0px solid #dee2e6;
        border-bottom-right-radius: calc(0.3rem - 1px);
        border-bottom-left-radius: calc(0.3rem - 1px);
    }

    .swal2-container.swal2-center > .swal2-popup {
        grid-column: 2;
        grid-row: 2;
        align-self: center;
        justify-self: center;
        border-radius: 16px;
    }

    .swal2-title {
        position: relative;
        max-width: 100%;
        margin: 0;
        padding: 0.8em 1em 0;
        color: inherit;
        font-size: 1.875em;
        font-weight: 600;
        text-align: center;
        text-transform: none;
        word-wrap: break-word;
        color: #334396;
        font-family: Noto Sans Thai;
    }

    .swal2-styled.swal2-confirm {
        border: 0;
        color: #fff;
        font-size: 1em;
        border-radius: 4px;
        background: #334396;
        width: 150px;
    }

    .ant-table-thead > tr > th {
        background-color: #FFCC41;
    }

</style>

<div>
    <div class="MA-headder">
        <div class="MA-title p-3">
            จัดการสิทธิ์
        </div>
    </div>
    <div class="MA-body">
        <div class="container">
            <div class="py-4">
                <div class="row d-flex justify-content-end align-content-center">
                    <div class="col-sm-12 col-md-6 col-lg-4 col-xl-4">
                        <div class="input-group">
                            <input type="search" class="form-control" style="height: 48px;" placeholder="ข้อมูลที่ต้องการค้นหา" aria-label="Search" aria-describedby="search-addon" @bind-value=@text />
                            <button type="button" class="btn btn-outline-primary serch-bg" style="height: 48px;width:48px;" @onclick=@search><i class="fa-solid fa-magnifying-glass"></i></button>
                        </div>
                    </div>
                </div>
            </div>

            @if (MRole == "hospital")
            {
                <MatTable ShowPaging="false" 
                    Items="@hosUserListAndRole" 
                    LoadInitialData="true"
                    Striped="true" 
                    RequestApiOnlyOnce="true" 
                    AllowSelection="true" 
                    RowClass="tester"
                    DebounceMilliseconds="150" 
                    class="mat-elevation-z5"
                    PageSize="@pageSizeHos"
                    CurrentPage="@currentPageHos">
                    <MatTableHeader>
                        <th class="text-center" style="border-radius:10px 0 0 0;width:150px;">ลำดับ</th>
                        <th class="text-center" style="width:450px">ชื่อ-สกุล</th>
                        <th class="text-center" style="width:450px">ชื่อผู้ใช้</th>
                        <th class="text-center" style="width:450px">สถานพยาบาล</th>
                        <th class="text-center" style="width:500px;border-radius:0 10px 0 0 ;">บทบาท</th>

                    </MatTableHeader>
                    <MatTableRow>
                        <td class="text-center" style="width:150px">@String.Format("{0:d}", hosUserListAndRole.IndexOf(context) + 1)</td>
                        <td style="width:450px">@context.User.FirstName @context.User.LastName</td>
                        <td style="width:450px">@context.User.UserName</td>
                        <td style="width:450px">@showHospital(context.User.HospitalMId)</td>
                        <td class="text-center" style="width:500px">
                            <div class="d-flex justify-content-center">
                                <div class="inputDisplay">
                                    <input type="text" class="form-control" placeholder="เลือกบทบาท" @bind="@context.RoleSelectedString" readonly />
                                </div>&nbsp;
                                <div>
                                    @if (permit.isRoleUpdate == true && permit.isRoleUpdate != null)
                                    {
                                        <button class="btn btn-outline-primary serch-bg" type="button" data-bs-toggle="modal" data-bs-target="#roleModal_{@context.User.Id}">
                                            <i class="fas fa-edit" data-bs-placement="bottom" title="แก้ไข"></i>
                                        </button>
                                    }

                                </div>
                            </div>
                            <div class="modal fade" id="roleModal_{@context.User.Id}" tabindex="-1" aria-labelledby="roleModalLabel" aria-hidden="true">
                                <div class="modal-dialog modal-dialog-centered">
                                    <div class="modal-content" style="min-height:1000px !important">


                                        <RoleListHospitalTable RoleInHosUser="@roleInHosUser"
                                                               HosUserListAndRole="@context" 
                                                               ListHosUserListAndRole="hosUserListAndRole"
                                                               RenderRoleService="@RenderRoleService"
                                                               Isloading="@LoadPage" />

                                        @* <div class="modal-body py-4">
                                            <div class="row">
                                                @foreach (var item in roleInHosUser)
                                                {
                                                    <div class="col col-6">
                                                        <div class="d-flex justify-content-start align-content-center align-items-center">
                                                            <div class="form-check py-2">
                                                                <input class="form-check-input" type="checkbox" checked="@IscheckedRole(@item, @context.RoleListView)"
                                                                       value="" id="flexCheckDefault"
                                                                @onchange="@(e => ToggleRoleSelectionHos(@item, context.RoleList, hosUserListAndRole, context.User.UserName))" />
                                                                <label class="px-2 form-check-label" style="line-height:40px" for="flexCheckDefault">
                                                                    @item.Name
                                                                </label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div> 
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" style="border-radius: 4px;border: 2px solid #334396;background: #FFF;color: #334396;" data-bs-dismiss="modal" @onclick="@OnInitializedAsync">
                                                ย้อนกลับ
                                            </button>
                                            <button type="button" class="btn btn-primary btn-otp px-4" data-bs-dismiss="modal" @onclick="@(e => InsertAndGetRoleHosUser(context.User, context.RoleList))">บันทึก</button>
                                        </div> *@
                                    </div>
                                </div>
                            </div>
                        </td>
                    </MatTableRow>
                </MatTable>
                <AntDesign.Pagination ShowSizeChanger
                                       OnShowSizeChange="@OnShowSizeChangeHos"
                                       OnChange="@OnPageHos"
                                       DefaultCurrent="3"
                                       PageSize=@pageSizeHos
                                       Class="pb-5"
                                       Total="@hosUserListAndRole.Count()" />
            }
            else if (MRole == "sso")
            {
                <MatTable 
                    ShowPaging="false" 
                    Items="@ssoUserListAndRole" 
                    LoadInitialData="true" 
                    Striped="true" 
                    RequestApiOnlyOnce="true" 
                    AllowSelection="true"
                          PageSize=@pageSizeSso
                    RowClass="tester"
                          DebounceMilliseconds="150" class="mat-elevation-z5" @bind-CurrentPage="@currentPageSso">
                    <MatTableHeader>
                        <th class="text-center" style="border-radius:10px 0 0 0;width:150px;">ลำดับ</th>
                        <th class="text-center" style="width:450px">ชื่อ-สกุล</th>
                        <th class="text-center" style="width:450px">ชื่อผู้ใช้</th>
                        <th class="text-center" style="width:750px;border-radius:0 10px 0 0 ;">บทบาท</th>

                    </MatTableHeader>
                    <MatTableRow>
                        <td class="text-center" style="width:150px">@String.Format("{0:d}", ssoUserListAndRole.IndexOf(context) + 1)</td>
                        <td style="width:450px">@context.User.FirstName @context.User.LastName</td>
                        <td style="width:450px">@context.User.UserName</td>
                        <td class="text-center" style="width:750px">
                            <div class="d-flex justify-content-center">
                                <div class="inputDisplay">
                                    <input type="text" class="form-control" placeholder="เลือกบทบาท" @bind="@context.RoleSelectedString" readonly />
                                </div>&nbsp;
                                <div>
                                    @if (permit.isRoleUpdate == true && permit.isRoleUpdate != null)
                                    {
                                        <button class="btn btn-outline-primary serch-bg" type="button" data-bs-toggle="modal" data-bs-target="#roleModal_@context.User.Id">
                                            <i class="fas fa-edit" data-bs-placement="bottom" title="แก้ไข"></i>
                                        </button>
                                    }

                                </div>
                            </div>
                            <div class="modal fade" id="roleModal_@context.User.Id" tabindex="-1" aria-labelledby="roleModalLabel" aria-hidden="true">
                                <div class="modal-dialog modal-dialog-centered">
                                    <div class="modal-content" style="min-height:1000px !important">

                                        <RoleListSSOTable RoleInSsoUser="@roleInSsoUser"
                                                          SsoUserListAndRole="@context"
                                                          ListSsoUserListAndRole="ssoUserListAndRole"
                                                          RenderRoleService="@RenderRoleService"
                                                          Isloading="@LoadPage" />
                                        @* <div class="modal-header text-start" style="margin: 20px">
                                            <h4 class="modal-title">เลือกบทบาท</h4>

                                            <button class="btn" type="button" data-bs-dismiss="modal" aria-label="Close" @onclick="@OnInitializedAsync">
                                                <i class="fa-regular fa-circle-xmark fa-2xl " style="color:#334396"></i>
                                            </button>
                                        </div>
                                        <div class="modal-body py-4">
                                            <div class="row">
                                                @foreach (var item in roleInSsoUser)
                                                {
                                                    <div class="col col-6">
                                                        <div class="d-flex justify-content-start align-content-center align-items-center">
                                                            <div class="form-check py-2">
                                                                <input class="form-check-input" type="checkbox" checked="@IscheckedRole(@item, @context.RoleListView)" value="" id="flexCheckDefault" @onchange="@(e => ToggleRoleSelectionSso(@item, context.RoleList, ssoUserListAndRole, context.User.UserName))" />
                                                                <label class="px-2 form-check-label" style="line-height:40px" for="flexCheckDefault">
                                                                    @item.Name
                                                                </label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" style="border-radius: 4px;border: 2px solid #334396;background: #FFF;color: #334396;" data-bs-dismiss="modal" @onclick="@OnInitializedAsync">
                                                ย้อนกลับ
                                            </button>
                                            <button type="button" class="btn btn-primary btn-otp px-4" data-bs-dismiss="modal" @onclick="@(e => InsertAndGetRoleSsoUser(context.User, context.RoleList))">บันทึก</button>
                                        </div> *@
                                    </div>
                                </div>
                            </div>
                        </td>
                    </MatTableRow>
                </MatTable>
                <AntDesign.Pagination ShowSizeChanger
                                       OnShowSizeChange="@OnShowSizeChangeSso"
                                       OnChange="@OnPageSso"
                                       DefaultCurrent="3"
                                       PageSize=@pageSizeSso
                                       Class="pb-5"
                                       Total="@ssoUserListAndRole.Count()" />
            }
            else if (MRole == "audit")
            {
                <MatTable 
                    ShowPaging="false" 
                    Items="@auditUserListAndRole" 
                    LoadInitialData="true" 
                    Striped="true" 
                    RequestApiOnlyOnce="true" 
                    AllowSelection="true" 
                    RowClass="tester"
                    DebounceMilliseconds="150" 
                    class="mat-elevation-z5"
                    PageSize="@pageSizeAudit"
                    CurrentPage="@currentPageAudit">
                    <MatTableHeader>
                        <th class="text-center" style="border-radius:10px 0 0 0;width:150px;">ลำดับ</th>
                        <th class="text-center" style="width:450px">ชื่อ-สกุล</th>
                        <th class="text-center" style="width:450px">ชื่อผู้ใช้</th>
                        <th class="text-center" style="width:750px;border-radius:0 10px 0 0 ;">บทบาท</th>
                    </MatTableHeader>
                    <MatTableRow>
                        <td class="text-center" style="width:150px">@String.Format("{0:d}", auditUserListAndRole.IndexOf(context) + 1)</td>
                        <td style="width:450px">@context.User.FirstName @context.User.LastName</td>
                        <td style="width:450px">@context.User.UserName</td>
                        <td class="text-center" style="width:750px">
                            <div class="d-flex justify-content-center">
                                <div class="inputDisplay">
                                    <input type="text" class="form-control" placeholder="เลือกบทบาท" @bind="@context.RoleSelectedString" readonly />
                                </div>&nbsp;
                                <div>
                                    @if (permit.isRoleUpdate == true && permit.isRoleUpdate != null)
                                    {
                                        <button class="btn btn-outline-primary serch-bg" type="button" data-bs-toggle="modal" data-bs-target="#roleModal_@context.User.Id">
                                            <i class="fas fa-edit" data-bs-placement="bottom" title="แก้ไข"></i>
                                        </button>
                                    }

                                </div>
                            </div>

                            <div class="modal fade" id="roleModal_@context.User.Id" tabindex="-1" aria-labelledby="roleModalLabel" aria-hidden="true">
                                <div class="modal-dialog modal-dialog-centered">
                                    <div class="modal-content" style="min-height:1000px !important">

                                        <RoleListAuditorTable 
                                            RoleInAuditUser="@roleInAuditUser" 
                                            AuditUserListAndRole="@context" 
                                            ListAuditUserListAndRole="@auditUserListAndRole"
                                            RenderRoleService="@RenderRoleService"
                                            Isloading="@LoadPage" 
                                            
                                            />
                                       @*  <div class="modal-header text-start" style="margin: 20px">
                                            <h4 class="modal-title">เลือกบทบาท</h4>
                                            <button class="btn" type="button" data-bs-dismiss="modal" aria-label="Close" @onclick="@OnInitializedAsync">
                                                <i class="fa-regular fa-circle-xmark fa-2xl " style="color:#334396"></i>
                                            </button>
                                        </div>

                                        <div class="modal-body py-4">
                                            <div class="row">
                                                @foreach (var item in roleInAuditUser)
                                                {
                                                    <div class="col col-6">
                                                        <div class="d-flex justify-content-start align-content-center align-items-center">
                                                            <div class="form-check py-2">
                                                                <input class="form-check-input" type="checkbox" checked="@IscheckedRole(@item, @context.RoleListView)" value="" id="flexCheckDefault" @onchange="@(e => ToggleRoleSelectionAudit(@item, context.RoleList, auditUserListAndRole, context.User.UserName))" />
                                                                <label class="px-2 form-check-label" style="line-height:40px" for="flexCheckDefault">
                                                                    @item.Name
                                                                </label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>

                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" style="border-radius: 4px;border: 2px solid #334396;background: #FFF;color: #334396;" data-bs-dismiss="modal" @onclick="@OnInitializedAsync">
                                                ย้อนกลับ
                                            </button>
                                            <button type="button" class="btn btn-primary btn-otp px-4" data-bs-dismiss="modal" @onclick="@(e => InsertAndGetRoleAuditUser(context.User, context.RoleList))">บันทึก</button>
                                        </div> *@
                                    </div>
                                </div>
                            </div>
                        </td>
                    </MatTableRow>
                </MatTable>
                <AntDesign.Pagination ShowSizeChanger
                                       OnShowSizeChange="@OnShowSizeChangeAudit"
                                       OnChange="@OnPageAudit"
                                       DefaultCurrent="3"
                                       PageSize=@pageSizeAudit
                                       Class="pb-5"
                                       Total="@auditUserListAndRole.Count()" />
            }
        </div>
    </div>
</div>

@if (isloading == true)
{
    <style>
        body {
            overflow: hidden;
        }</style>

    <LoadingPage></LoadingPage>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? shortToken { get; set; } = "";

    [Parameter]
    public EventCallback<int> Callback { get; set; }
    [Parameter]
    public string MRole { get; set; }

    List<SsoUserM>? ssoUserList = new List<SsoUserM>();
    List<HospitalUserM>? hosUserList = new List<HospitalUserM>();
    List<AuditorUserM>? auditUserList = new List<AuditorUserM>();

    List<SsoUserM>? ssoUserListSearch = new List<SsoUserM>();
    List<HospitalUserM>? hosUserListSearch = new List<HospitalUserM>();
    List<AuditorUserM>? auditUserListSearch = new List<AuditorUserM>();

    List<SsoUserRole>? ssoUserListAndRole = new List<SsoUserRole>();
    List<HosUserRole>? hosUserListAndRole = new List<HosUserRole>();
    List<AuditUserRole>? auditUserListAndRole = new List<AuditUserRole>();

    private List<string> selectedRoles = new List<string>();

    List<RoleMenuM> roleMenuList = new List<RoleMenuM>();


    List<RoleGroupM> roleInSsoUser = new List<RoleGroupM>();
    List<RoleGroupM> roleInHosUser = new List<RoleGroupM>();
    List<RoleGroupM> roleInAuditUser = new List<RoleGroupM>();
    List<HospitalM> responseHos = new List<HospitalM>();

    public bool isloading = false;

    public string? text { get; set; } = "";

    public UserRole userRole;
    public MenuPerMit permit = new MenuPerMit();

    public int currentPageSso = 1;
    public int currentPageHos = 1;
    public int currentPageAudit = 1;
    int pageSizeSso = 5;
    int pageSizeHos = 5;
    int pageSizeAudit = 5;
    public string contextModalId { get; set; }

    void OnPageSso(PaginationEventArgs e)
    {

        Console.WriteLine(e);
        pageSizeSso = e.PageSize;
        currentPageSso = e.Page;
    }

    private void OnShowSizeChangeSso(PaginationEventArgs args)
    {
        var (current, pageSize) = args;
        Console.WriteLine($"{current}, {pageSize}");
    }

    void OnPageHos(PaginationEventArgs e)
    {

        Console.WriteLine(e);
        pageSizeHos = e.PageSize;
        currentPageHos = e.Page;
    }


    private void OnShowSizeChangeHos(PaginationEventArgs args)
    {
        var (current, pageSize) = args;
        Console.WriteLine($"{current}, {pageSize}");
    }

    void OnPageAudit(PaginationEventArgs e)
    {

        Console.WriteLine(e);
        pageSizeAudit = e.PageSize;
        currentPageAudit = e.Page;
    }


    private void OnShowSizeChangeAudit(PaginationEventArgs args)
    {
        var (current, pageSize) = args;
        Console.WriteLine($"{current}, {pageSize}");
    }

    public string GetModalContextById(string modalContextById)
    {
        contextModalId = modalContextById.Replace("#", "");
        StateHasChanged();
        return modalContextById;
    }

    protected override async Task OnInitializedAsync()
    {
        await RenderRoleService();
    }

    public void LoadPage(bool isLoad)
    {
        isloading = isLoad;
    }

    public async Task RenderRoleService(string? searchText)
    {
        isloading = true;
        if (MRole == "sso")
        {
            roleInSsoUser = await ManageMentMenuService.GetRoleGroupByType("SSO");
            ssoUserList = await ManageMentMenuService.GetUserSso(searchText is not null ? searchText : null);
            if (ssoUserList is not null)
            {
                //if(searchText is not null)
                //{
                //    ssoUserList = ssoUserList.Where(q => q.UserName.ToLower().Contains(searchText.ToLower()) ||
                //                    q.FirstName.ToLower().Contains(searchText.ToLower()) || 
                //                    q.LastName.ToLower().Contains(searchText.ToLower())).ToList();
                //}
                ssoUserList = ssoUserList.OrderBy(obj => obj.Id).ToList();
            }
            ssoUserListAndRole = new List<SsoUserRole>();
            foreach (var ssoUser in ssoUserList)
            {
                var res = await ManageMentMenuService.getRoleUserMapping(ssoUser.UserName);
                var resView = await ManageMentMenuService.getRoleUserMappingView(ssoUser.UserName);
                List<string> tmp = new List<string>();
                foreach (var item in resView)
                {
                    tmp.Add(item.Name);
                }
                ssoUserListAndRole.Add(new SsoUserRole()
                    {
                        User = ssoUser,
                        RoleList = res,
                        RoleListView = resView,
                        RoleSelectedString = string.Join(", ", tmp)
                    });
            }

        }
        else if (MRole == "hospital")
        {
            responseHos = await keyCloakService.GetHospital();
            roleInHosUser = await ManageMentMenuService.GetRoleGroupByType("HOS");
            hosUserList = await ManageMentMenuService.GetUserHos();
            if (hosUserList is not null)
            {
                if (searchText is not null)
                {
                    hosUserList = hosUserList.Where(q => q.UserName.ToLower().Contains(searchText.ToLower()) ||
                                    q.FirstName.ToLower().Contains(searchText.ToLower()) ||
                                    q.LastName.ToLower().Contains(searchText.ToLower())).ToList();
                }
                hosUserList = hosUserList.OrderBy(obj => obj.Id).ToList();
            }
            hosUserListAndRole = new List<HosUserRole>();
            foreach (var hosUser in hosUserList)
            {
                var res = await ManageMentMenuService.getRoleUserMapping(hosUser.UserName);
                var resView = await ManageMentMenuService.getRoleUserMappingView(hosUser.UserName);
                List<string> tmp = new List<string>();
                foreach (var item in resView)
                {
                    tmp.Add(item.Name);
                }
                hosUserListAndRole.Add(new HosUserRole()
                    {
                        User = hosUser,
                        RoleList = res,
                        RoleListView = resView,
                        RoleSelectedString = string.Join(", ", tmp)
                    });
            }
        }
        else if (MRole == "audit")
        {
            roleInAuditUser = await ManageMentMenuService.GetRoleGroupByType("AUDIT");
            auditUserList = await ManageMentMenuService.GetUserAudit();
            if (auditUserList is not null)
            {
                if (searchText is not null)
                {
                    auditUserList = auditUserList.Where(q => q.UserName.ToLower().Contains(searchText.ToLower()) ||
                                    q.FirstName.ToLower().Contains(searchText.ToLower()) ||
                                    q.LastName.ToLower().Contains(searchText.ToLower())).ToList();
                }
                auditUserList = auditUserList.OrderBy(obj => obj.Id).ToList();
            }
            auditUserListAndRole = new List<AuditUserRole>();
            foreach (var auditUser in auditUserList)
            {
                var res = await ManageMentMenuService.getRoleUserMapping(auditUser.UserName);
                var resView = await ManageMentMenuService.getRoleUserMappingView(auditUser.UserName);
                List<string> tmp = new List<string>();
                foreach (var item in resView)
                {
                    tmp.Add(item.Name);
                }
                auditUserListAndRole.Add(new AuditUserRole()
                    {
                        User = auditUser,
                        RoleList = res,
                        RoleListView = resView,
                        RoleSelectedString = string.Join(", ", tmp)
                    });
            }
        }
        userRole = await localStorage.GetItemAsync<UserRole>("userRole");
        if (userRole != null && userRole.role != null)
        {
            try
            {
                permit = await userRoleService.GetUserAuth(userRole, "PSMSS002", "PORTAL-SSO");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
        isloading = false;
        StateHasChanged();

    }

    public async Task RenderRoleService()
    {
        await RenderRoleService(null);
    }

    public async void goMsubdetail(int id)
    {
        await this.Callback.InvokeAsync(id);
    }


    // private void ToggleRoleSelectionHos(RoleGroupM roleGroupM, List<RoleUserMapping> roleList, List<HosUserRole> hosUserListAndRole, string userName)
    // {
    //     bool insert = false;
    //     bool delete = false;

    //     foreach (var item in hosUserListAndRole)
    //     {
    //         if (item.User.UserName == userName)
    //         {
    //             foreach (var roleItem in item.RoleList)
    //             {
    //                 //delete
    //                 if (roleItem.RoleGroupId == roleGroupM.Id)
    //                 {
    //                     delete = true;
    //                     break;
    //                 }
    //             }
    //             insert = true;
    //         }
    //     }

    //     if (delete == true)
    //     {
    //         roleList.Remove(roleList.Find(x => x.RoleGroupId == roleGroupM.Id));
    //     }
    //     else if (insert == true)
    //     {
    //         roleList.Add(new RoleUserMapping()
    //             {
    //                 RoleGroupId = roleGroupM.Id,
    //                 UserName = userName,
    //                 UserType = "HOS"
    //             });
    //     }
    // }

    // private void ToggleRoleSelectionSso(RoleGroupM roleGroupM, List<RoleUserMapping> roleList, List<SsoUserRole> ssoUserListAndRole, string userName)
    // {
    //     bool insert = false;
    //     bool delete = false;
    //     foreach (var item in ssoUserListAndRole)
    //     {
    //         if (item.User.UserName == userName)
    //         {
    //             foreach (var roleItem in item.RoleList)
    //             {
    //                 //delete
    //                 if (roleItem.RoleGroupId == roleGroupM.Id)
    //                 {
    //                     delete = true;
    //                     break;
    //                 }
    //             }
    //             insert = true;
    //         }

    //     }

    //     if (delete == true)
    //     {
    //         roleList.Remove(roleList.Find(x => x.RoleGroupId == roleGroupM.Id));
    //     }
    //     else if (insert == true)
    //     {
    //         roleList.Add(new RoleUserMapping()
    //             {
    //                 RoleGroupId = roleGroupM.Id,
    //                 UserName = userName,
    //                 UserType = "SSO"
    //             });
    //     }
    // }

    // private void ToggleRoleSelectionAudit(RoleGroupM roleGroupM, List<RoleUserMapping> roleList, List<AuditUserRole> auditUserListAndRole, string userName)
    // {
    //     bool insert = false;
    //     bool delete = false;
    //     foreach (var item in auditUserListAndRole)
    //     {
    //         if (item.User.UserName == userName)
    //         {
    //             foreach (var roleItem in item.RoleList)
    //             {
    //                 //delete
    //                 if (roleItem.RoleGroupId == roleGroupM.Id)
    //                 {
    //                     delete = true;
    //                     break;
    //                 }
    //             }
    //             insert = true;
    //         }
    //     }

    //     if (delete == true)
    //     {
    //         roleList.Remove(roleList.Find(x => x.RoleGroupId == roleGroupM.Id));
    //     }
    //     else if (insert == true)
    //     {
    //         roleList.Add(new RoleUserMapping()
    //             {
    //                 RoleGroupId = roleGroupM.Id,
    //                 UserName = userName,
    //                 UserType = "AUDIT"
    //             });
    //     }
    // }

    // private async void InsertAndGetRoleSsoUser(SsoUserM data, List<RoleUserMapping> itemList)
    // {

    //     try
    //     {
    //         isloading = true;
    //         await ManageMentMenuService.deleteRoleUserMapping(data.UserName);
    //         foreach (var item in itemList)
    //         {
    //             ManageMentMenuModel.ViewModelRoleGroup roleInsert = new ManageMentMenuModel.ViewModelRoleGroup();
    //             roleInsert.RoleGroupId = item.RoleGroupId;
    //             roleInsert.UserName = data.UserName;
    //             roleInsert.UserType = "SSO";
    //             roleInsert.CreateBy = "MMS-USER";
    //             roleInsert.UpdateBy = "MMS-USER";
    //             await ManageMentMenuService.saveRoleUserMapping(roleInsert);
    //         }
    //         ssoUserListAndRole = new List<SsoUserRole>();
    //         await OnInitializedAsync();
    //         isloading = false;
    //         StateHasChanged();
    //         await Swal.FireAsync(
    //                 "บันทึกสำเร็จ",
    //                 null,
    //                 SweetAlertIcon.Success
    //                 );
    //     }
    //     catch (Exception ex)
    //     {
    //         isloading = false;
    //         await Swal.FireAsync(
    //                 "บันทึกไม่สำเร็จ",
    //                 null,
    //                 SweetAlertIcon.Error
    //                 );
    //         throw;
    //     }


    // }

    // private async void InsertAndGetRoleHosUser(HospitalUserM data, List<RoleUserMapping> itemList)
    // {
    //     try
    //     {
    //         isloading = true;
    //         await ManageMentMenuService.deleteRoleUserMapping(data.UserName);
    //         foreach (var item in itemList)
    //         {
    //             ManageMentMenuModel.ViewModelRoleGroup roleInsert = new ManageMentMenuModel.ViewModelRoleGroup();
    //             roleInsert.RoleGroupId = item.RoleGroupId;
    //             roleInsert.UserName = data.UserName;
    //             roleInsert.UserType = "HOS";
    //             roleInsert.CreateBy = "MMS-USER";
    //             roleInsert.UpdateBy = "MMS-USER";
    //             await ManageMentMenuService.saveRoleUserMapping(roleInsert);
    //         }
    //         hosUserListAndRole = new List<HosUserRole>();
    //         await OnInitializedAsync();
    //         isloading = false;
    //         StateHasChanged();
    //         await Swal.FireAsync(
    //                 "บันทึกสำเร็จ",
    //                 null,
    //                 SweetAlertIcon.Success
    //                 );
    //     }
    //     catch (Exception ex)
    //     {
    //         isloading = false;
    //         StateHasChanged();
    //         await Swal.FireAsync(
    //                 "บันทึกไม่สำเร็จ",
    //                 null,
    //                 SweetAlertIcon.Error
    //                 );
    //         throw;
    //     }
    // }

    // private async void InsertAndGetRoleAuditUser(AuditorUserM data, List<RoleUserMapping> itemList)
    // {

    //     try
    //     {
    //         isloading = true;
    //         await ManageMentMenuService.deleteRoleUserMapping(data.UserName);
    //         foreach (var item in itemList)
    //         {
    //             ManageMentMenuModel.ViewModelRoleGroup roleInsert = new ManageMentMenuModel.ViewModelRoleGroup();
    //             roleInsert.RoleGroupId = item.RoleGroupId;
    //             roleInsert.UserName = data.UserName;
    //             roleInsert.UserType = "AUDIT";
    //             roleInsert.CreateBy = "MMS-USER";
    //             roleInsert.UpdateBy = "MMS-USER";
    //             await ManageMentMenuService.saveRoleUserMapping(roleInsert);
    //         }
    //         auditUserListAndRole = new List<AuditUserRole>();
    //         await OnInitializedAsync();
    //         isloading = false;
    //         StateHasChanged();
    //         await Swal.FireAsync(
    //                 "บันทึกสำเร็จ",
    //                 null,
    //                 SweetAlertIcon.Success
    //                 );
    //     }
    //     catch (Exception ex)
    //     {
    //         isloading = false;
    //         StateHasChanged();
    //         await Swal.FireAsync(
    //                 "บันทึกไม่สำเร็จ",
    //                 null,
    //                 SweetAlertIcon.Error
    //                 );
    //         throw;
    //     }

    // }

    // private bool IscheckedRole(RoleGroupM rgm, List<ManageMentMenuModel.ViewModelForGetRoleUserMappingAndName> roleListView)
    // {
    //     foreach (var roleItem in roleListView)
    //     {
    //         if (roleItem.RoleGroupId == rgm.Id)
    //         {
    //             return true;
    //         }
    //     }
    //     return false;
    // }

    public async void search()
    {
        //await OnInitializedAsync();
        await RenderRoleService(text is null || text == "" ? null : text);
        if (MRole == "sso")
        {
            //ssoUserListSearch = ssoUserList?.Where(
            //    x => x.FirstName.ToLower().Contains(text.ToLower()) ||
            //    x.LastName.ToLower().Contains(text.ToLower())).ToList();
            ssoUserListSearch = ssoUserList.ToList();
            if (ssoUserListSearch.Count == 0)
            {
                ssoUserListSearch = ssoUserList;
                await Swal.FireAsync(
                      "ไม่พบข้อมูล",
                      null,
                      SweetAlertIcon.Warning
             );
            }
            refreshSsoUserList(ssoUserListSearch);
            currentPageSso = 1;
            StateHasChanged();

        }
        else if (MRole == "hospital")
        {
            //hosUserListSearch = hosUserList?.Where(
            //    x => x.FirstName.ToLower().Contains(text.ToLower()) ||
            //    x.LastName.ToLower().Contains(text.ToLower())).ToList();
            if (hosUserListSearch.Count == 0)
            {
                hosUserListSearch = hosUserList;
                await Swal.FireAsync(
                      "ไม่พบข้อมูล",
                      null,
                      SweetAlertIcon.Warning
             );
            }
            refreshHosUserList(hosUserListSearch);
            currentPageHos = 1;
            StateHasChanged();
        }
        else if (MRole == "audit")
        {
            //auditUserListSearch = auditUserList?.Where(
            //    x => x.FirstName.ToLower().Contains(text.ToLower()) ||
            //    x.LastName.ToLower().Contains(text.ToLower())).ToList();
            if (auditUserListSearch.Count == 0)
            {
                auditUserListSearch = auditUserList;
                await Swal.FireAsync(
                      "ไม่พบข้อมูล",
                      null,
                      SweetAlertIcon.Warning
             );
            }
            refreshAuditUserList(auditUserListSearch);
            currentPageAudit = 1;
            StateHasChanged();
        }
        StateHasChanged();
    }

    private async void refreshSsoUserList(List<SsoUserM>? userListSearch)
    {
        isloading = true;
        if (MRole == "sso")
        {
            roleInSsoUser = await ManageMentMenuService.GetRoleGroupByType("SSO");
            ssoUserList = userListSearch;
            if (ssoUserList?.Count == 0)
            {
                ssoUserListAndRole = new List<SsoUserRole>();
            }
            if (ssoUserList is not null)
            {
                ssoUserList = ssoUserList.OrderBy(obj => obj.Id).ToList();
            }
            ssoUserListAndRole = new List<SsoUserRole>();
            foreach (var ssoUser in ssoUserList)
            {
                var res = await ManageMentMenuService.getRoleUserMapping(ssoUser.UserName);
                var resView = await ManageMentMenuService.getRoleUserMappingView(ssoUser.UserName);
                List<string> tmp = new List<string>();
                foreach (var item in resView)
                {
                    tmp.Add(item.Name);
                }
                ssoUserListAndRole.Add(new SsoUserRole()
                    {
                        User = ssoUser,
                        RoleList = res,
                        RoleListView = resView,
                        RoleSelectedString = string.Join(", ", tmp)
                    });
            }
        }
        isloading = false;
        StateHasChanged();
    }

    private string showHospital(int? hopitalId)
    {
        if (responseHos != null)
        {
            var result = responseHos.FirstOrDefault(f => f.Id == hopitalId);
            if (result != null)
            {
                string showResult = result.Code + " " + result.Name;
                return showResult;
            }
            else
            {
                return null;
            }
        }
        return null;
    }

    private async void refreshHosUserList(List<HospitalUserM>? userListSearch)
    {
        isloading = true;
        if (MRole == "hospital")
        {
            roleInHosUser = await ManageMentMenuService.GetRoleGroupByType("HOS");
            hosUserList = userListSearch;
            if (hosUserList?.Count == 0)
            {
                hosUserListAndRole = new List<HosUserRole>();
            }
            if (hosUserList is not null)
            {
                hosUserList = hosUserList.OrderBy(obj => obj.Id).ToList();
            }
            hosUserListAndRole = new List<HosUserRole>();
            foreach (var hosUser in hosUserList)
            {
                var res = await ManageMentMenuService.getRoleUserMapping(hosUser.UserName);
                var resView = await ManageMentMenuService.getRoleUserMappingView(hosUser.UserName);
                List<string> tmp = new List<string>();
                foreach (var item in resView)
                {
                    tmp.Add(item.Name);
                }
                hosUserListAndRole.Add(new HosUserRole()
                    {
                        User = hosUser,
                        RoleList = res,
                        RoleListView = resView,
                        RoleSelectedString = string.Join(", ", tmp)
                    });
            }
        }
        isloading = false;
        StateHasChanged();
    }

    private async void refreshAuditUserList(List<AuditorUserM>? userListSearch)
    {
        isloading = true;
        if (MRole == "audit")
        {
            roleInSsoUser = await ManageMentMenuService.GetRoleGroupByType("AUDIT");
            auditUserList = userListSearch;
            if (auditUserList?.Count == 0)
            {
                auditUserListAndRole = new List<AuditUserRole>();
            }
            if (auditUserList is not null)
            {
                auditUserList = auditUserList.OrderBy(obj => obj.Id).ToList();
            }
            auditUserListAndRole = new List<AuditUserRole>();
            foreach (var auditUser in auditUserList)
            {
                var res = await ManageMentMenuService.getRoleUserMapping(auditUser.UserName);
                var resView = await ManageMentMenuService.getRoleUserMappingView(auditUser.UserName);
                List<string> tmp = new List<string>();
                foreach (var item in resView)
                {
                    tmp.Add(item.Name);
                }
                auditUserListAndRole.Add(new AuditUserRole()
                    {
                        User = auditUser,
                        RoleList = res,
                        RoleListView = resView,
                        RoleSelectedString = string.Join(", ", tmp)
                    });
            }
        }
        isloading = false;
        StateHasChanged();
    }


}

