@page "/notification"
@using sso.mms.helper.Configs;
@using sso.mms.helper.ViewModels;
@using sso.mms.login.Services;
@using sso.mms.login.ViewModels;
@using sso.mms.notification.Services;
@using sso.mms.notification.ViewModel;
@using sso.mms.notification.ViewModel.BoardCast;
@using sso.mms.portal.admin.Pages.Navbar;
@using sso.mms.portal.admin.Pages.Noti;
@using Blazored.LocalStorage;
@using System.IdentityModel.Tokens.Jwt;
@using sso.mms.helper.PortalModel;
@using Newtonsoft.Json;

@inject ReadTokenService readTokenService
@inject NotificationService notificationService;
@inject UserRoleService userRoleService
@inject ILocalStorageService _localstorage;
@using sso.mms.helper.Utility;
<style>
        :root {
        --mdc-theme-primary: #334396;
    }

    .form-control, .form-select {
        display: block;
        width: 100%;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: var(--bs-body-color);
        background-color: var(--bs-body-bg);
        background-clip: padding-box;
        border: var(--bs-border-width) solid #9e9e9e;
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        border-radius: var(--bs-border-radius-sm);
        transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
        height: 3rem;
    }

    @@media only screen and (min-width: 1000px) {
        .pm-xl {
            position: fixed;
            width: 100%;
            z-index: 1000;
        }
    }

    @@media only screen and (max-width: 1000px) {
        .position-class {
            position: relative
        }
    }
    @@media only screen and (max-width: 998px) {
        .card-c-login {
            margin-top:10%;
        }
    }

    @@media (min-width: 600px) {
        .px-body {
            padding-right: 10%;
            padding-left: 10%;
        }
    }
</style>

<NavbarLoginAdmin ShortToken="@shortToken" PageCode="DSP0401" responseNotiM="@responseNotiM"></NavbarLoginAdmin>

<MediaStyle></MediaStyle>

@*<div>short token : @shortToken</div>
<div class="text-break">access token : @responseShortToken?.accessToken</div>
<div class="text-break">refresh token : @responseShortToken?.refreshToken</div>
<div>realm group : @responseShortToken?.realmGroup</div>*@

<div class="bg-noti py-3">
    <div class="px-body mt-4" style="margin-top: 1rem;">
        <div class="row">
            <div class="col-md-12 col-lg-6 col-xl-3 mb-2">
                <div class="col">
                    <NotificationCategories responseNotiM="@responseNotiM"  OnChangeListNotiT="@GetNotificationT" />
                </div>
            </div>
            <div class="col-md-12 col-lg-6 col-xl-3 mb-2">
                <div class="col">
                    <NotificationList responseNotiT="@responseNotiT" OnChangeListNotiT="@GetContentNotiT" />
                </div>
            </div>
            <div class="col-md-12 col-lg-12 col-xl-6 mb-2">
                <NotificationDetail contentNotiT="@contentNotiT" responseNotiM="@responseNotiM" />
            </div>
        </div>
    </div>
</div>
<div>
  <sso.mms.helper.Components.Footer.Footer></sso.mms.helper.Components.Footer.Footer>
</div>
@if(isloading == true)
{
    <style>body { overflow: hidden; }</style><LoadingPage></LoadingPage>
}
@code {
    public bool isloading = false;

    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? shortToken { get; set; } = "";

    private List<NotiM>? responseNotiM = new List<NotiM>();
    private List<NotiT>? responseNotiT = new List<NotiT>();
    private NotiT? contentNotiT = new NotiT();
    private int? updateStatusNotiT = 0;

    private ResponseShortToken responseShortToken { get; set; } = null!;

    public string? env = ConfigureCore.ConfigENV;
    public string? url;

    public UserRole userRole;

    public List<string>? roleCodeList = new List<string>();

    public string orgCode = "1001";
    public string username = "";
    public string userType = "";

    public NotiTApiModel notiTapi = new NotiTApiModel();
    public int notiNo { get; set; }
    protected override async Task OnInitializedAsync()
    {
        isloading = true;

        url = ConfigureCore.redirectNotification;

        responseShortToken = await readTokenService.ReadToken(shortToken!);
        if (responseShortToken != null)
        {
            JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();
            JwtSecurityToken jwt = tokenHandler.ReadJwtToken(responseShortToken.accessToken);
            var token = jwt.Payload.ToList();
            KeyValuePair<string, object> result = token.FirstOrDefault(pair => pair.Key == "preferred_username");
            KeyValuePair<string, object> result_code = token.FirstOrDefault(pair => pair.Key == "SSObranchCode");
            KeyValuePair<string, object> resultRealm = token.FirstOrDefault(pair => pair.Key == "iss");
            userType = resultRealm.Value.ToString().Split('/').Last();
            username = result.Value.ToString();
            if (ConfigureCore.SiteName == "SSO" && userType == "sso-mms-admin")
            {
                orgCode = result_code.Value.ToString(); 
            }

            userRole = await userRoleService.GetRoleByUserName(username);

            await _localstorage.SetItemAsync("userRole", userRole);
            await _localstorage.SetItemAsync("userType", userType);

            if (userRole != null)
            {
                roleCodeList = userRole.role.Select(roleObject => roleObject.roleCode).ToList();
            }
            await _localstorage.SetItemAsync("roleCodeList", roleCodeList);

            notiTapi = new NotiTApiModel
            {
                userType = userType,
                username = username,
                orgCode = orgCode,
                roleCodeList = roleCodeList
            };

        }
        await FetchGetNotificationM();
        
        if (responseNotiM != null)
        {
            await GetNotificationT(responseNotiM.Where(x => x.Sequence == 1).FirstOrDefault().Id);
            StateHasChanged();
        }
        foreach (var clidkId in responseNotiM)
        {
            if (clidkId.Id == 8)
            {
                clidkId.DivClass = "clicked";
            }

        }
        isloading = false;
    }

    private async Task GetNotificationT(int notiMId)
    {
        responseNotiT = await notificationService.GetNotificationTByUser(notiMId, notiTapi);

        StateHasChanged();
    }

    private async Task GetContentNotiT(int notiTId)
    {


        contentNotiT = await notificationService.GetContentNotiT(notiTId);
        if (contentNotiT != null)
        {
            //var isSuccess = await notificationService.UpdateStatusNotiT(notiTId, 0);
            var notiLog = new NotificationLog
            {
                NotiTId = notiTId,
                CreateBy = notiTapi.username,
                UpdateBy = notiTapi.username
            };
            var isSuccess = await notificationService.AddNotificationLog(notiLog);
            if(isSuccess)
            {
                updateStatusNotiT = responseNotiT.FirstOrDefault(item => item.Id == notiTId).NotiMId;
            }
            await FetchGetNotificationM();
            StateHasChanged();
        }
    }

    private async Task FetchGetNotificationM()
    {

        responseNotiM = await notificationService.GetNotiByUser(notiTapi);
       
        foreach(var item in responseNotiM)
        {
            
        }
        if (responseNotiM != null)
        {
            isloading = false;
        }
        StateHasChanged();

        foreach (var item in responseNotiM)
        {
            if (item.Id == updateStatusNotiT)
            {
                item.DivClass = "clicked";
            }
            else
            {
                item.DivClass = "";
            }
        }


    }
}
