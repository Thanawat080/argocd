@page "/opendata"
@using MatBlazor
@using AntDesign
@using sso.mms.helper.Configs;
@using sso.mms.helper.PortalModel;
@using sso.mms.helper.ViewModels;
@using sso.mms.portal.admin.Pages.Navbar
@using sso.mms.helper.Utility
@using sso.mms.helper.Components.Footer
@using sso.mms.portal.admin.Services;
@using Blazored.LocalStorage;
@using sso.mms.login.Services;

@inject NavigationManager NavigationManager
@inject SettingOpendataService settingOpendataService
@inject IJSRuntime JsRuntime
@inject SweetAlertService Swal;
@inject ILocalStorageService localStorage
@inject UserRoleService userRoleService

<style>
        :root {
        --mdc-theme-primary: #334396;
    }

    .form-control, .form-select {
        display: block;
        width: 100%;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: var(--bs-body-color);
        background-color: var(--bs-body-bg);
        background-clip: padding-box;
        border: var(--bs-border-width) solid #9e9e9e;
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        border-radius: var(--bs-border-radius-sm);
        transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
        height: 3rem;
    }

    .swal2-container.swal2-center > .swal2-popup {
        grid-column: 2;
        grid-row: 2;
        align-self: center;
        justify-self: center;
        border-radius: 16px;
    }

    .swal2-title {
        position: relative;
        max-width: 100%;
        margin: 0;
        padding: 0.8em 1em 0;
        color: inherit;
        font-size: 1.875em;
        font-weight: 600;
        text-align: center;
        text-transform: none;
        word-wrap: break-word;
        color: #334396;
        font-family: Noto Sans Thai;
    }

    .swal2-styled.swal2-confirm {
        border: 0;
        color: #fff;
        font-size: 1em;
        border-radius: 4px;
        background: #334396;
        width: 150px;
    }

    @@media only screen and (min-width: 1000px) {
        .pm-xl {
            position: fixed;
            width: 100%;
            z-index: 1000;
        }
    }

    @@media only screen and (max-width: 1000px) {
        .position-class {
            position: relative
        }
    }

    .mdc-table th {
        font-size: 1.143rem;
        color: #334396;
        border: 2px solid rgb(255 255 255);
        padding: 12px 12px 12px 24px;
        background: #FFCC41;
        font-family: 'Noto Sans Thai';
        font-style: normal;
        font-weight: 700;
        font-size: 18px;
        line-height: 27px;
        letter-spacing: 0.2px;
        color: #334396;
    }

    .mdc-table, .mdc-table--striped {
        width: 100%;
        max-width: 100%;
        background-color: transparent;
        border-collapse: collapse;
        border-spacing: 0;
        display: inline-block;
        overflow-x: auto;
        margin: 8px 0 32px;
        border: 0px solid rgba(0,0,0,.1);
        font-family: 'Noto Sans Thai';
        font-style: normal;
        font-weight: 500;
        font-size: 16px;
        align-items: center;
        color: #1A141F;
        border-radius: 10px;
    }

        .mdc-table td {
            border: 2px solid white;
            padding: 12px 12px 12px 24px;
        }

    tr.mdc-table-footer-row, tr.mdc-table-row {
        height: 48px;
        background: #a8a2ad17;
    }

    .mdc-table--striped tr:nth-of-type(odd) {
        background: #00000012;
    }

    .mdc-select__dropdown-icon {
        margin-left: 1px;
        margin-right: 1px;
        display: inline-flex;
        position: relative;
        align-self: center;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
        pointer-events: none;
    }

    .mdc-select .mdc-select__anchor {
        height: 56px;
        display: flex;
        align-content: center;
        align-items: center;
    }

    .mat-paginator .mat-paginator-container .mat-paginator-page-size {
        display: flex;
        margin-right: 8px;
        align-items: center
    }

    .mat-paginator .mat-paginator-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        min-height: 56px;
        padding: 0 8px;
        flex-wrap: wrap-reverse;
    }

    .mdc-paginator-container {
        display: flex;
        justify-content: space-between;
        min-height: 56px;
        padding: 0 8px;
        flex-wrap: wrap-reverse;
        width: 100%;
        align-items: center;
    }

    .mdc-select:not(.mdc-select--disabled) .mdc-select__anchor {
        background-color: #ffffff;
        width: 80px;
        height: 30px;
        border-radius: 10px;
        border: 0px solid #D4D2D5;
    }

    .mdc-paginator-page-size {
        line-height: 0px;
        display: flex;
        align-items: center;
    }

    .mat-elevation-z5 {
        box-shadow: 0px 3px 0px -1px rgb(0 0 0 / 0%), 0px 5px 0px 0px rgb(0 0 0 / 0%), 0px 1px 0px 0px rgb(0 0 0 / 0%);
    }

</style>


    <NavbarLoginAdmin ShortToken=@shortToken PageCode="@codeName"></NavbarLoginAdmin>

<MediaStyle></MediaStyle>

<div class="container ">
    <div class="card-body m-4 px-4">
        <div class="txt-title">
            <p class="txt-title-xl-blue"> ตั้งค่า Open Data </p>
        </div><br />
        <div class="d-flex justify-content-between align-content-center pb-2">
            <div class="col-sm-12 col-md-6 col-lg-6 col-xl-6">
                @if (permit.isRoleCreate == true)
                {
                    <button class="btn btn-primary btn-bg-blue btn-size-add" @onclick="GoToOpenDatasetting">
                        <i class="fa-solid fa-circle-plus"></i>&nbsp; เพิ่ม
                    </button>
                }
            </div>
            <div class="col-sm-12 col-md-6 col-lg-4 col-xl-4">
                <div class="input-group">
                    <input type="search" class="form-control" style="height: 48px;" @bind="@text" placeholder="ข้อมูลที่ต้องการค้นหา" aria-label="Search" aria-describedby="search-addon" />
                    <button type="button" class="btn btn-outline-primary btn-bg-blue" style="height: 48px;width:48px;" @onclick=@Searchdata><i class="fa-solid fa-magnifying-glass"></i></button>
                </div>
            </div>
        </div>
        <MatTable 
            ShowPaging="false" 
            Items="@SystemSettingsearch" 
            LoadInitialData="true" 
            Striped="true" 
            RequestApiOnlyOnce="true" 
            AllowSelection="true" 
            RowClass="tester"
            PageSize="@pageSize"
                  @bind-CurrentPage="@currentPage" DebounceMilliseconds="150" class="mat-elevation-z5">
            <MatTableHeader>
                <th class="text-center" style="border-radius:10px 0 0 0;width:100px;">ลำดับ</th>
                <th class="text-center" style="width:350px">หัวข้อ</th>
                <th class="text-center" style="width:350px">URL</th>
                <th class="text-center" style="width:250px">รูปภาพ</th>
                <th class="text-center" style="width:400px">คำอธิบาย</th>
                <th class="text-center" style="width:290px;border-radius:0 10px 0 0 ;">สถานะ</th>

            </MatTableHeader>
            <MatTableRow>
                <td class="text-center" style="width:100px">@(SystemSettingsearch.IndexOf(context) + 1)</td>
                <td style="max-width:350px">@context.Title</td>
                <td class="text-truncate" style="max-width:350px">@context.Url</td>
                <td style="width:250px"><img style="width: 75%;" src="@context.UploadImagePath" /></td>
                <td class="text-truncate" style="max-width:400px">@context.Detail</td>
                <td class="text-center" style="width:290px">
                    <div class="d-flex justify-content-center align-content-center form-check form-switch">
                        <input disabled="@(permit.isRoleUpdate == false ? true : false)" class="form-check-input" @bind-value="@context.ShowStatus" type="checkbox" id="flexSwitchCheckChecked" checked="@context.ShowStatus" @onclick=@(()=>CheckChangeToggle(context.Id, @context.ShowStatus))><div>
                            @if (context.ShowStatus == true)
                            {
                                <div style="color:#67C23A">&nbsp; &nbsp; ใช้งาน</div>
                            }
                            else
                            {
                                <div style="color:#FF0000">&nbsp; ไม่ใช้งาน</div>
                            }
                        </div>
                    </div>
                </td>

            </MatTableRow>
        </MatTable>

        <AntDesign.Pagination ShowSizeChanger
                               OnShowSizeChange="@OnShowSizeChange"
                               OnChange="@OnPage"
                               DefaultCurrent="3"
                               PageSize=@pageSize
                               Total="@SystemSettingsearch.Count()" />
        <div class="d-flex justify-content-end align-content-end align-items-center py-4 mt-2">
            <button @onclick="GoToMainmenu" class="btn btn-secondary btn-bo-main px-4 p-2">
                <i class="fa-solid fa-circle-chevron-left"></i>&nbsp; ย้อนกลับ
            </button>
            &nbsp;&nbsp;
            @if (permit.isRoleUpdate == true)
            {
                <button class="btn btn-primary btn-sa-main m-1 px-4 p-2" @onclick=SaveEdit>
                    <i class="fa-regular fa-floppy-disk"></i>&nbsp; บันทึก
                </button>
            }

        </div>
    </div>
</div>
@*@if (ListChangeSave != null)
{
    @foreach (var item in ListChangeSave)
    {
        @item.Id  @item.Title @item.ShowStatus
        <br />

    }
}*@
@if (isloading == true)
{
    <style>body { overflow: hidden; }</style><LoadingPage></LoadingPage>
}

<div class="mt-4">
    <sso.mms.helper.Components.Footer.Footer />

</div>
@code {
    public bool isloading = false;

    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? shortToken { get; set; } = "";
    public int currentPage = 1;
    public string? url;
    public string? text;
    public string? prefix = "";
    public bool status;

    [Parameter]
    public EventCallback<int> Callback { get; set; }


    public List<SettingOpendataT> SystemSetting = new List<SettingOpendataT>();
    public List<SettingOpendataT> SystemSettingsearch = new List<SettingOpendataT>();
    public List<SettingOpendataT>? ListChangeSave = new List<SettingOpendataT>();

    public UserRole userRole;
    public MenuPerMit permit = new MenuPerMit();
    public string? codeName = "DSP0901";
    public async void goMsubdetail(int id)
    {
        await this.Callback.InvokeAsync(id);
    }
    public string? env = ConfigureCore.ConfigENV;

    int pageSize = 5;

    void OnPage(PaginationEventArgs e)
    {

        Console.WriteLine(e);
        pageSize = e.PageSize;
        currentPage = e.Page;
    }


    private void OnShowSizeChange(PaginationEventArgs args)
    {
        var (current, pageSize) = args;
        Console.WriteLine($"{current}, {pageSize}");
    }

    protected override async Task OnInitializedAsync()
    {

        prefix = ConfigureCore.redirectsPortalAdmin;

        isloading = true;

        SystemSetting = await settingOpendataService.GetSettingOpendataT();
        SystemSettingsearch = SystemSetting.OrderByDescending(o => o.CreateDate).ToList();
        if (SystemSetting != null)
        {
            isloading = false;
        }
        userRole = await localStorage.GetItemAsync<UserRole>("userRole");
        if (userRole != null && userRole.role != null)
        {
            try
            {
                permit = await userRoleService.GetUserAuth(userRole, "PSMSS007", "PORTAL-SSO");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
        StateHasChanged();
    }
    public void GoToOpenDatasetting()
    {
        NavigationManager.NavigateTo(prefix + "opendatasetting" + $"?token={shortToken}");
    }
    public void GoToMainmenu()
    {
        NavigationManager.NavigateTo(prefix + "mainmenu" + $"?token={shortToken}");
    }
    public void Searchdata()
    {
        SystemSettingsearch = SystemSetting.Where(w => w.Title.ToLower().Contains(text.ToLower())).OrderByDescending(o => o.CreateDate).ToList();
        currentPage = 1;
        StateHasChanged();
    }
    public async void CheckChangeToggle(int id, bool? status)
    {
        SystemSetting.Where(x => x.Id == id).FirstOrDefault().ShowStatus = !status;
        var itemCount = SystemSetting.Where(w => w.ShowStatus == true).Count();
        Console.WriteLine(status);
        if(status == false)
        {
            if (itemCount > 9)
            {
                await Swal.FireAsync(
                       "ไม่สามารถ เปิดการใช้งานได้มากกว่า 9 รายการ",
                       null,
                       SweetAlertIcon.Warning
                       );
                //await JsRuntime.InvokeVoidAsync("alert", "ไม่สามารถ เปิดการใช้งานได้มากกว่า 9 รายการ");
                var item = SystemSetting.FirstOrDefault(f => f.Id == id);
                ListChangeSave.RemoveAll(item => item.Id == id);
                item.ShowStatus = false;
                ListChangeSave.Add(item);
                StateHasChanged();
            }
            else
            {
                ListChangeSave.RemoveAll(item => item.Id == id);
                var itemToAdd = SystemSetting.FirstOrDefault(f => f.Id == id);
                if (itemToAdd != null)
                {
                    ListChangeSave.Add(itemToAdd);
                }
                StateHasChanged();
            }

            StateHasChanged();
        }
        else
        {
            ListChangeSave.RemoveAll(item => item.Id == id);
            var itemToAdd = SystemSetting.FirstOrDefault(f => f.Id == id);
            if (itemToAdd != null)
            {
                ListChangeSave.Add(itemToAdd);
            }
            StateHasChanged();
        }
        StateHasChanged();
        
    }
    public async void SaveEdit()
    {
        if (ListChangeSave.Count != 0)
        {
            isloading = true;
            ResponseModel response = await settingOpendataService.EditDataSetting(ListChangeSave);
            if (response.issucessStatus != true)
            {
                isloading = false;
                StateHasChanged();
                //await JsRuntime.InvokeVoidAsync("alert", "Error " + response.statusMessage);
                await Swal.FireAsync(
                    "บันทึกไม่สำเร็จ" + response.statusMessage,
                    null,
                    SweetAlertIcon.Error
                    );
            }
            else
            {
                isloading = false;
                StateHasChanged();
                await Swal.FireAsync(
                    "บันทึกสำเร็จ",
                    null,
                    SweetAlertIcon.Success
                    );
                //await JsRuntime.InvokeVoidAsync("alert", "บันทึกได้ สำเร็จ !");
                ListChangeSave.Clear();
            }

        }
        else
        {
            await Swal.FireAsync(
                   "ไม่สามารถบันทึกได้ ! \n ไม่ได้มีการแก้ใขข้อมูล",
                   null,
                   SweetAlertIcon.Warning
                   );
            //await JsRuntime.InvokeVoidAsync("alert", "ไม่สามารถบันทึกได้ ! ไม่ได้มีการแก้ใขข้อมูล");
        }
        StateHasChanged();

    }

}
