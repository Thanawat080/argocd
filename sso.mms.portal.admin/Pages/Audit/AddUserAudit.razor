@page "/addaudit"
@using Blazored.LocalStorage;
@using System.Security.Cryptography;
@using sso.mms.helper.Configs;
@using sso.mms.helper.Data;
@using sso.mms.login.Services;
@using sso.mms.login.ViewModels.Email;
@using sso.mms.login.ViewModels.KeyCloak;
@using sso.mms.login.ViewModels;
@using sso.mms.portal.admin.Pages.Navbar
@using sso.mms.helper.Utility
@using sso.mms.helper.Components.Footer
@using sso.mms.helper.ViewModels
@using sso.mms.portal.admin.ViewModels;
@using sso.mms.portal.admin.Services;
@inject AuditSevices auditSevices
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IJSRuntime JSRuntime
@inject KeyCloakService keyCloakService
@inject UserService userService;
@inject SweetAlertService Swal;


<style>
    .ant-picker {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
        color: rgba(0, 0, 0, 0.85);
        font-size: 14px;
        font-variant: tabular-nums;
        line-height: 1.5715;
        list-style: none;
        font-feature-settings: 'tnum';
        padding: 4px 11px 4px;
        position: relative;
        display: inline-flex;
        align-items: center;
        background: #fff;
        border: 1px solid #9e9e9e;
        border-radius: 4px;
        transition: border 0.3s, box-shadow 0.3s;
    }

    .swal2-container.swal2-center > .swal2-popup {
        grid-column: 2;
        grid-row: 2;
        align-self: center;
        justify-self: center;
        border-radius: 16px;
    }

    .swal2-title {
        position: relative;
        max-width: 100%;
        margin: 0;
        padding: 0.8em 1em 0;
        color: inherit;
        font-size: 1.875em;
        font-weight: 600;
        text-align: center;
        text-transform: none;
        word-wrap: break-word;
        color: #334396;
        font-family: Noto Sans Thai;
    }

    .swal2-styled.swal2-confirm {
        border: 0;
        color: #fff;
        font-size: 1em;
        border-radius: 4px;
        background: #334396;
        width: 150px;
    }

    @@media only screen and (min-width: 1000px) {
        .pm-xl {
            position: fixed;
            width: 100%;
            z-index: 1000;
        }
    }

    @@media only screen and (max-width: 1000px) {
        .position-class {
            position: relative
        }
    }

    .custom-input-file {
        position: absolute;
        background: white;
        opacity: 0;
        width: 100%;
        height: 100%;
        cursor: pointer;
    }

    .div-file-upload {
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        border-radius: 10px;
        background: #c5cbe600;
        width: auto;
    }
</style>

    <NavbarLoginAdmin ShortToken=@shortToken PageCode="@PageCode"></NavbarLoginAdmin>



<MediaStyle></MediaStyle>
<div class="bg-color pt-5 pb-5">
    <div class="container">
        <div class="card-main">
            <div class="card-title">
                <div class="f-title px-4 py-2">เพิ่มข้อมูลแพทย์ Audit</div>
            </div>

            <div class="row pt-5 txth-from-reg px-5">
                <div class="col-md-12 col-lg-4 col-xl-4">
                    <div class="row justify-content-center align-items-center">
                        <div class="m-2 d-flex justify-content-center">
                            @if (!string.IsNullOrEmpty(FileName))
                            {
                                <img class="edit-img-user border-img-user" src="@ImageUri" />
                            }
                            else
                            {
                                <img class="edit-img-user" src="helper_shared/icon_sso/Edit_user.png" />
                            }

                        </div>
                        <div class="div-file-upload">
                            <div class="d-flex flex-column justify-content-center align-items-center">
                                <button class="btn btn-adduser">
                                    <i class="fa-regular fa-image fa-xl p-2"></i>เพิ่มรูปภาพ
                                </button>
                                <InputFile class="custom-input-file " type="file" OnChange="@LoadImage" />
                            </div>
                        </div>
                        <div class="mt-4">
                        </div>
                    </div>
                </div>
                <div class="col-md-12 col-lg-8 col-xl-8">
                    <form class="container" @onsubmit=@saveAudit>
                        <div class="row">
                            <div class="col-md-3 mb-4">
                                <label class="form-label">คำนำหน้า<div class="float-end" style="color:red;">*</div></label>
                                <div class="input-group">
                                    <select class="form-select form-select-lg custom-select" @bind="@prefixMcode" required
                                            oninvalid="this.setCustomValidity('โปรดเลือกข้อมูล !')" oninput="this.setCustomValidity('')">
                                        <option value="" selected disabled>เลือกคำนำหน้า</option>
                                        @if (PrefixMs != null)
                                        {
                                            @foreach (var item in PrefixMs)
                                            {
                                                <option value="@item.Code" @onclick="@(() => selectedPrefix( item.Name))">@item.Name</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-3 mb-4">
                                <label class="form-label">ชื่อ<div class="float-end" style="color:red;">*</div></label>
                                <input type="text" class="form-control form-control-lg" @bind="@FirstName"
                                       oninvalid="this.setCustomValidity('โปรดกรอกข้อมูล !')"
                                       oninput="this.setCustomValidity(''); this.value = this.value.replace(/[^ก-๙เa-zA-Z]/g, '');"
                                       required />

                            </div>
                            <div class="col-md-3 mb-4">
                                <label class="form-label">ชื่อ กลาง</label>
                                <input type="text" class="form-control form-control-lg" @bind="@Middlename" oninput="this.setCustomValidity(''); this.value = this.value.replace(/[^ก-๙เa-zA-Z]/g, '');" />
                            </div>
                            <div class="col-md-3 mb-4">
                                <label class="form-label">นามสกุล<div class="float-end" style="color:red;">*</div></label>
                                <input type="text" class="form-control form-control-lg" @bind="@LastName"
                                       oninvalid="this.setCustomValidity('โปรดกรอกข้อมูล !')"
                                       oninput="this.setCustomValidity(''); this.value = this.value.replace(/[^ก-๙เa-zA-Z]/g, '');"
                                       required />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-7 mb-4">
                                <label class="form-label">เลขประจำตัวประชาชน<div class="float-end" style="color:red;">*</div></label>
                                <input type="text" class="form-control form-control-lg" @bind="@IDcard"
                                       pattern="[0-9]{13,13}" maxlength="13" required
                                       oninvalid="this.setCustomValidity(this.value.length > 0 ? 'โปรดกรอกเลขบัตรประชาชนให้ครบ 13 หลัก !': 'โปรดกรอกข้อมูล !')"
                                       oninput="this.value = this.value.replace(/[^0-9]/g, '').slice(0, 13);
                                       if(this.value.length === 13){this.setCustomValidity('');}
                                       else{ this.setCustomValidity('โปรดกรอกเลขบัตรประชาชนให้ครบ 13 หลัก !');}
                                       " />

                            </div>
                            <div class="col-md-5 mb-4">
                                <label class="form-label">เลขใบอนุญาตแพทย์<div class="float-end" style="color:red;">*</div></label>
                                <input type="text" class="form-control form-control-lg" @bind="@CerNoId" placeholder="ก.XXXXX"
                                       pattern="[ก-ฮ][.][0-9]{5}" maxlength="7" required
                                       oninvalid="this.setCustomValidity(this.value.length > 0 ? 'โปรดกรอกเลขใบอนุญาตแพทย์ให้ถูกต้อง !': 'โปรดกรอกข้อมูล !')"
                                       oninput="this.value=this.value.replace(/[^ก-ฮ0-9.]/g, '' );
                                       if(this.value.length === 7){this.setCustomValidity('');}
                                       else{ this.setCustomValidity('โปรดกรอกเลขใบอนุญาตแพทย์ให้ถูกต้อง !');}
                                       if (this.value.length === 1 && ! /[ก-ฮ]/.test(this.value)) {
                                       this.value='' ;
                                       }
                                       else if (this.value.length === 1){

                                       }
                                       else if (this.value.length === 2){
                                       this.value = this.value.substring(0, this.value.length -1) + '.';
                                       }
                                       else{
                                            var tmp = this.value.split('.');
                                            if(/[ก-ฮ.]/.test(tmp[1])){
                                                this.value = this.value.substring(0, this.value.length - 1)
                                            }
                                       }
                                       " />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3 d-none">
                                <label class="form-label">ตำแหน่ง<div class="float-end" style="color:red;">*</div></label>
                                <select class="form-select" aria-label="Default select example" style="font-size: 1.25rem;padding: 0.5rem;" @bind="@Position" required>
                                    <option selected>ตำแหน่ง</option>
                                    <option value="1">1</option>
                                    <option value="2">2</option>
                                    <option value="3">3</option>
                                </select>

                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">วันที่เริ่มต้นสัญญา<div class="float-end" style="color:red;">*</div></label>
                                <AntDesign.DatePicker @bind-Value="@StartDate" Format="dd/MM/yyyy" Style="width: 100%; height: 3rem;" />
                                @*  <MatDatePicker value="@StartDate" Outlined=true Maximum="@EndDate" AllowInput="false" Format="dd/MM/yyyy"
                                ValueChanged=@(async (DateTime value) => await OnStartDateSelected(value)) Style="width: 100%; height: 3rem;" Required></MatDatePicker>*@
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">วันที่สิ้นสุดสัญญา<div class="float-end" style="color:red;">*</div></label>
                                <AntDesign.DatePicker @bind-Value="@EndDate" Format="dd/MM/yyyy" Style="width: 100%; height: 3rem;" />
                                @*  <MatDatePicker value="@EndDate" Outlined="true" Minimum="@StartDate" AllowInput="false" Format="dd/MM/yyyy"
                                ValueChanged=@(async (DateTime value) => await OnEndDateSelected(value)) Style="width: 100%; height: 3rem;" Required></MatDatePicker>*@
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-4">
                                <label class="form-label">วัน/เดือน/ปี เกิด<div class="float-end" style="color:red;">*</div></label>
                                <AntDesign.DatePicker DefaultPickerValue="@yearsAgo" @bind-Value="@BirthDate" Format="dd/MM/yyyy" Style="width: 100%; height: 3rem;" />
                                @*<MatDatePicker value="@BirthDate" Outlined="true" Maximum="@DateTime.Now" AllowInput="false" Format="dd/MM/yyyy"
                                ValueChanged=@(async (DateTime value) => await OnBirthDateSelected(value)) Style="width: 100%; height: 3rem" Required></MatDatePicker>*@
                            </div>
                            <div class="col-md-6 mb-4">
                                <label class="form-label">เบอร์โทรศัพท์<div class="float-end" style="color:red;">*</div></label>
                                <input type="text" class="form-control form-control-lg" @bind="@Mobile"
                                       maxlength="10" required
                                       pattern="[0-9]{9,10}"
                                       oninvalid="this.setCustomValidity(this.value.length > 0 ? 'โปรดกรอกเบอร์โทรศัพท์ให้ถูกต้อง !': 'โปรดกรอกข้อมูล !')"
                                       oninput="this.value = this.value.replace(/[^0-9]/g, '').slice(0, 10);
                                       if(this.value.length === 9 || this.value.length === 10){this.setCustomValidity('');}
                                       else{ this.setCustomValidity('โปรดกรอกเบอร์โทรศัพท์ให้ถูกต้อง !');}
                                       " />

                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12 mb-4">
                                <label class="form-label">E-mail<div class="float-end" style="color:red;">*</div></label>
                                <input type="email" class="form-control form-control-lg" @bind="@Email" required
                                       oninvalid="this.setCustomValidity('โปรดกรอกข้อมูล !')" oninput="if(/[@@]/.test(this.value)){this.setCustomValidity('')} else{this.setCustomValidity('โปรดกรอกอีเมลให้ถูกต้อง !')}" />

                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12 mb-4">
                                <label class="form-label">สิทธิ์การเข้าสู่ระบบ<div class="float-end" style="color:red;">*</div></label>
                                <div class="px-2">
                                    <div class="row">
                                        @if (LoginStatus == 1)
                                        {
                                            <div class="col-md-3 form-check">
                                                <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1" @onclick="@(()=>ChangeLoginStatus(1))" checked>
                                                <label class="form-check-label" for="flexRadioDefault1">
                                                    ใช่
                                                </label>
                                            </div>
                                            <div class="col-md-3 form-check">
                                                <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2" @onclick="@(()=>ChangeLoginStatus(0))">
                                                <label class="form-check-label" for="flexRadioDefault2">
                                                    ไม่ใช่
                                                </label>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="col-md-3 form-check">
                                                <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1" @onclick="@(()=>ChangeLoginStatus(1))">
                                                <label class="form-check-label" for="flexRadioDefault1">
                                                    ใช่
                                                </label>
                                            </div>
                                            <div class="col-md-3 form-check">
                                                <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2" @onclick="@(()=>ChangeLoginStatus(0))" checked>
                                                <label class="form-check-label" for="flexRadioDefault2">
                                                    ไม่ใช่
                                                </label>
                                            </div>
                                        }
                                        <div class="col-md-6 float-end mb-4" style="display:none;">
                                            <a class="float-end" style="color:red;"><i class="fa-solid fa-circle-exclamation p-2"></i>ยังไม่ยืนยันตัวตน</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="d-flex justify-content-end align-items-center mb-4">
                            @if (id != 0)
                            {
                                <button class="btn btn-auter btn-secondary" type="button" @onclick=SubmitChangePassword>
                                    <i class="fa-solid fa-arrow-rotate-left"></i>&nbsp;รีเซ็ตรหัสผ่าน
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-auter " type="button" style="display:none;">
                                    <i class="fa-solid fa-user-lock fa-xl"></i>&nbsp;ยืนยันตัวตน
                                </button>
                            }
                            &nbsp;
                            <button class="btn btn-secondary btn-backm" @onclick=GoAuditMain type="button">
                                <i class="fa-regular fa-circle-xmark"></i>&nbsp;ปิด
                            </button>&nbsp;
                            <button class="btn btn-primary btn-save" type="submit">
                                <i class="fa-regular fa-floppy-disk"></i>&nbsp;บันทึก
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="pt-5">
        <Footer></Footer>
    </div>
</div>

@if (isloading == true)
{
    <style>
        body {
            overflow: hidden;
        }</style>

    <LoadingPage></LoadingPage>
}


<!-- Modal -->
<div class="modal fade" id="modalchangpassword" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content" style="border-radius: 15px;background: #F5F3F7;">
            <div class="modal-header">
                <button class="btn" type="button" data-bs-dismiss="modal" aria-label="Close">
                    <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M12.227 19.7727L19.7737 12.226M19.7737 19.7727L12.227 12.226M16.0003 29.3327C23.3337 29.3327 29.3337 23.3327 29.3337 15.9993C29.3337 8.66602 23.3337 2.66602 16.0003 2.66602C8.66699 2.66602 2.66699 8.66602 2.66699 15.9993C2.66699 23.3327 8.66699 29.3327 16.0003 29.3327Z" stroke="#224183" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                    </svg>
                </button>
            </div>
            <div class="modal-body" align="center">
                <img src="helper_shared/icon_sso/key.png" style="height:96px;width:96px;" />
            </div>
            <form class="container p-5" @onsubmit="@SubmitChangePassword" action="">
                <div>
                    <p class="text-login-title m-1">เปลี่ยนรหัสผ่าน</p>
                </div>
                <div class="col-md-12 mb-4">
                    <label class="form-label modal-txt">รหัสผ่านปัจจุบัน</label>
                    <input type="password" id="password" class="form-control form-control-lg" placeholder="********" @bind=@oldpassword required />

                </div>
                <div class="col-md-12 mb-4">
                    <label class="form-label modal-txt">รหัสผ่านใหม่</label>
                    <input type="password" id="password" class="form-control form-control-lg" placeholder="********" @bind=@newpassword required />

                </div>
                <div class="col-md-12 mb-4">
                    <label class="form-label modal-txt">ยืนยันรหัสผ่านใหม่</label>
                    <input type="password" id="password" class="form-control form-control-lg" placeholder="********" @bind=@confirmpassword required />

                </div>
                <div class="container" align="center">
                    <button type="submit" class="btn btn-primary btn-login mb-4" style="width:325px;">
                        ยืนยันการเปลี่ยนรหัสผ่าน
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>


@code {
    public bool isloading = false;
    public string? oldpassword = "";
    public string? newpassword = "";
    public string? confirmpassword = "";
    public string? env = ConfigureCore.ConfigENV;
    private string url;
    public string? SecretKey = ConfigureCore.SecretKey;
    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? shortToken { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public int id { get; set; } = 0;

    [Parameter]
    public string? typeCodePage { get; set; }

    public IBrowserFile ImageFile;
    public string? FileName = "";
    public string? showPrefix = "";
    public string? ImageUri = "";
    public string? imgpreview = "";
    public string? prefixMcode;
    public string? FirstName;
    public string? Middlename;
    public string? LastName;
    public string? IDcard;
    public string? CerNoId;
    public string? Position;
    public DateTime? StartDate = null;
    public DateTime? BirthDate = null;
    public DateTime? EndDate = null;
    public string? Mobile;
    public string? Email;
    public int? LoginStatus = 1;
    public bool CheckStatus = true;
    public ResponseUpload responseUpload;
    public DateTime currentDate;
    public DateTime yearsAgo;
    private ResponseCreateTokenKeyCloak responseTokenKeyCloak { get; set; } = null!;
    private AuditorUserModel auditorUser { get; set; } = null!;
    private List<PrefixM> PrefixMs { get; set; }
    private string? PageCode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isloading = true;

        currentDate = DateTime.Now;
        yearsAgo = currentDate.AddYears(-30);
        if (env == "Development")
        {
            url = "";
        }
        else
        {
            url = "/admin";
        }
        PrefixMs = await userService.getPrefix();
        if (PrefixMs != null)
        {
            isloading = false;
        }
        if (id != 0)
        {
            auditorUser = await auditSevices.GetAuditById(id);

            if (auditorUser != null)
            {
                isloading = false;
                prefixMcode = auditorUser.PrefixMCode;
                FirstName = auditorUser.FirstName;
                Middlename = auditorUser.MiddleName;
                LastName = auditorUser.LastName;
                IDcard = auditorUser.IdenficationNumber;
                CerNoId = auditorUser.CertNo;
                StartDate = auditorUser.StartDate;
                EndDate = auditorUser.ExpireDate;
                BirthDate = auditorUser.Birthdate;
                Email = auditorUser.Email;
                Mobile = auditorUser.Mobile;
                LoginStatus = auditorUser.IsStatus;
                FileName = auditorUser.ImageName;
                ImageUri = auditorUser.ImagePath;

                var prefixfind = PrefixMs.Find(f => f.Code == prefixMcode);
                if (prefixfind != null)
                {
                    showPrefix = prefixfind.Name;
                }

            }
            this.PageCode = "DSR0302";

        }
        else
        {
            this.PageCode = "DSR0303";
        }
    }
    public void GoAuditMain()
    {
        NavigationManager.NavigateTo(url + "/auditmainpage" + "?token=" + shortToken);
    }
    public async Task LoadImage(InputFileChangeEventArgs inputFileChangeEventArgs)
    {

        FileName = inputFileChangeEventArgs.File.Name;
        ImageFile = inputFileChangeEventArgs.File;
        var image = await inputFileChangeEventArgs.File.RequestImageFileAsync("image/png", 600, 600);
        using Stream imageStream = image.OpenReadStream(1024 * 1024 * 10);
        using MemoryStream ms = new();
        await imageStream.CopyToAsync(ms);
        ImageUri = $"data:image/png;base64,{Convert.ToBase64String(ms.ToArray())}";
        StateHasChanged();
    }
    public async void saveAudit()
    {


        if (id == 0)
        {
            isloading = true;
            if (StartDate == null)
            {
                isloading = false;
                StateHasChanged();
                await Swal.FireAsync(
                      "กรุณาเลือกวันเริ่มต้นสัญญา",
                      null,
                      SweetAlertIcon.Warning
                      );
            }
            else if (EndDate == null)
            {
                isloading = false;
                StateHasChanged();
                await Swal.FireAsync(
                      "กรุณาเลือกวันสิ้นสุดสัญญา",
                      null,
                      SweetAlertIcon.Warning
                      );
            }
            else if (BirthDate == null)
            {
                isloading = false;
                StateHasChanged();
                await Swal.FireAsync(
                      "กรุณาเลือกวันเกิด",
                      null,
                      SweetAlertIcon.Warning
                      );
            }
            else if (StartDate > EndDate)
            {
                isloading = false;
                StateHasChanged();
                await Swal.FireAsync(
                      "ไม่สามารถเลือกวันเริ่มสัญญาได้มากกว่าวันสิ้นสุดสัญญา",
                      null,
                      SweetAlertIcon.Warning
                      );
            }
            else if (StartDate == EndDate && StartDate != null && EndDate != null)
            {
                isloading = false;
                StateHasChanged();
                await Swal.FireAsync(
                      "ไม่สามารถเลือกวันเริ่มต้นสัญญาได้เท่ากับวันสิ้นสุดสัญญา",
                      null,
                      SweetAlertIcon.Warning
                      );
            }
            else if(BirthDate > yearsAgo)
            {
                isloading = false;
                StateHasChanged();
                await Swal.FireAsync(
                      "ต้องมีอายุไม่น้อยกว่า 30 ปี",
                      null,
                      SweetAlertIcon.Warning
                      );
            }
            else
            {
                string data = IDcard + DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss");
                byte[] toBytes = Encoding.UTF8.GetBytes(data);
                byte[] hashBytes;
                using (MD5 md5 = MD5.Create())
                {
                    hashBytes = md5.ComputeHash(toBytes);
                }
                string toString = BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
                string firstpass = toString.Substring(0, 7);
                if (ImageFile != null)
                {
                    responseUpload = await auditSevices.UploadFile(ImageFile);
                }
                else
                {
                    responseUpload = new ResponseUpload();
                }

                AuditorUserM auditData = new AuditorUserM()
                    {
                        PrefixMCode = prefixMcode,
                        FirstName = FirstName,
                        MiddleName = Middlename,
                        LastName = LastName,
                        IdenficationNumber = IDcard,
                        CertNo = CerNoId,
                        Position = Position,
                        StartDate = StartDate,
                        ExpireDate = EndDate,
                        Birthdate = BirthDate,
                        Email = Email,
                        Mobile = Mobile,
                        IsStatus = LoginStatus,
                        IsActive = true,
                        UserName = IDcard,
                        Password = firstpass,
                        CreateBy = IDcard,
                        UpdateBy = IDcard,
                        ImageName = responseUpload.FileName,
                        ImagePath = responseUpload.Path_Url

                    };
                responseTokenKeyCloak = await keyCloakService.CreateTokenKeyCloak("sso-mms-auditor");
                var response = await keyCloakService.CreateUserKeyCloak(null, auditData, responseTokenKeyCloak.access_token, "sso-mms-auditor");

                if (response.issucessStatus != false)
                {
                    var senddata = new RequestEmail
                        {
                            ToEmail = auditData.Email,
                            SubjectEmail = "insert Success ",
                            Password = firstpass,
                            Username = auditData.UserName,
                        };
                    var mailresponse = await userService.SendMailAsync(senddata);
                    //await JSRuntime.InvokeVoidAsync("alert", "insert recode successfully");
                    if (mailresponse.issucessStatus == true)
                    {
                        isloading = false;
                        StateHasChanged();
                        await Swal.FireAsync(
                                            "บันทึกข้อมูลสำเร็จ ระบบได้ทำการส่งชื่อผู้ใช้ และรหัสผ่านไปยัง E-mail",
                                            null,
                                            SweetAlertIcon.Success
                                         );
                        NavigationManager.NavigateTo($"{url}/auditmainpage?token={shortToken}");

                    }


                }
                else
                {
                    isloading = false;
                    StateHasChanged();
                    await Swal.FireAsync(
                  "มีผู้ใช้ email หรือ username นี้อยู่แล้วกรุณากรอก email หรือ username อื่น",
                   null,
                   SweetAlertIcon.Error);
                    //await JSRuntime.InvokeVoidAsync("alert", "มีผู้ใช้ email หรือ username นี้อยู่แล้วกรุณากรอก email หรือ username อื่น");
                }
            }

        }
        else
        {
            isloading = true;
            if (StartDate > EndDate)
            {
                isloading = false;
                StateHasChanged();
                await Swal.FireAsync(
                      "ไม่สามารถเลือกวันเริ่มสัญญาได้มากกว่าวันสิ้นสุดสัญญา",
                      null,
                      SweetAlertIcon.Warning
                      );
            }
            else if (StartDate == EndDate && StartDate != null && EndDate != null)
            {
                isloading = false;
                StateHasChanged();
                await Swal.FireAsync(
                      "ไม่สามารถเลือกวันเริ่มต้นสัญญาได้เท่ากับวันสิ้นสุดสัญญา",
                      null,
                      SweetAlertIcon.Warning
                      );
            }
            else if (BirthDate > yearsAgo)
            {
                isloading = false;
                StateHasChanged();
                await Swal.FireAsync(
                      "ต้องมีอายุไม่น้อยกว่า 30 ปี",
                      null,
                      SweetAlertIcon.Warning
                      );
            }
            else
            {
                AuditorUserModel auditEditData = new AuditorUserModel();
                if (ImageFile != null)
                {
                    auditEditData = new AuditorUserModel()
                        {
                            PrefixMCode = prefixMcode,
                            FirstName = FirstName,
                            MiddleName = Middlename,
                            LastName = LastName,
                            IdenficationNumber = IDcard,
                            CertNo = CerNoId,
                            Position = Position,
                            StartDate = StartDate,
                            ExpireDate = EndDate,
                            Birthdate = BirthDate,
                            Email = Email,
                            Mobile = Mobile,
                            IsStatus = LoginStatus,
                            UpdateBy = IDcard,
                            File = ImageFile,
                        };

                }
                else
                {
                    auditEditData = new AuditorUserModel()
                        {
                            PrefixMCode = prefixMcode,
                            FirstName = FirstName,
                            MiddleName = Middlename,
                            LastName = LastName,
                            IdenficationNumber = IDcard,
                            CertNo = CerNoId,
                            Position = Position,
                            StartDate = StartDate,
                            ExpireDate = EndDate,
                            Birthdate = BirthDate,
                            Email = Email,
                            Mobile = Mobile,
                            IsStatus = LoginStatus,
                            UpdateBy = IDcard,
                            ImagePath = auditorUser.ImagePath,
                            ImageName = auditorUser.ImageName,
                        };
                }
                var response = await auditSevices.EditAuditById(auditEditData, id);
                if (response.issucessStatus != false)
                {
                    isloading = false;
                    StateHasChanged();
                    await Swal.FireAsync(
                        "บันทึกข้อมูลสำเร็จ",
                        null,
                        SweetAlertIcon.Success
                     );
                    NavigationManager.NavigateTo($"{url}/auditmainpage?token={shortToken}");
                }
                else
                {
                    //await JSRuntime.InvokeVoidAsync("alert", "ไม่สามารถบันทึกได้ ! " + response.statusMessage);
                    isloading = false;
                    StateHasChanged();
                    await Swal.FireAsync(
                    "บันทึกข้อมูลไม่สำเร็จ",
                   null,
                   SweetAlertIcon.Error
           );
                }
            }
            
        }

    }
    private async Task OnStartDateSelected(DateTime e)
    {
        StartDate = e.ToLocalTime();

    }

    private async Task OnEndDateSelected(DateTime e)
    {
        EndDate = e.ToLocalTime();

    }

    private async Task OnBirthDateSelected(DateTime e)
    {
        BirthDate = e.ToLocalTime();

    }

    public async void selectPrefixM(string name)
    {
        var prefixselect = PrefixMs.Find(f => f.Name == name);
        if (prefixselect != null)
        {
            prefixMcode = prefixselect.Code;
        }
    }

    public void ChangeLoginStatus(int status)
    {
        LoginStatus = status;
    }

    private async void SubmitChangePassword()
    {
        isloading = true;
        var decryptedOldPassword = AesOperation.DecryptString(SecretKey, auditorUser.Password);
        string data = IDcard + DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss");
        byte[] toBytes = Encoding.UTF8.GetBytes(data);
        byte[] hashBytes;
        using (MD5 md5 = MD5.Create())
        {
            hashBytes = md5.ComputeHash(toBytes);
        }
        string toString = BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
        string firstpass = toString.Substring(0, 7);

        ResponseChangePasswordModel response = await userService.ChangePassword(firstpass, auditorUser.UserName, decryptedOldPassword, auditorUser.Id, "sso-mms-auditor");
        if (response.isStatus)
        {

            //await JSRuntime.InvokeVoidAsync("alert", "เสร็จสิ้น !!");

            //  Navigation.NavigateTo($"{prefix}/portal?token={shortToken.Trim('\"')}");
            var senddata = new RequestEmail
                {
                    ToEmail = auditorUser.Email,
                    SubjectEmail = "Reset PassWord Success ",
                    Password = firstpass,
                    Username = auditorUser.UserName,
                };

            var mailresponse = await userService.SendMailAsync(senddata);
            isloading = false;
            StateHasChanged();
            await Swal.FireAsync(
                      "สำเร็จ!",
                      null,
                      SweetAlertIcon.Success
             );
            await JSRuntime.InvokeVoidAsync("CloseModal", "#modalchangpassword");

            NavigationManager.NavigateTo($"{url}/auditmainpage?token={shortToken}");

        }
    }

    public async void selectedPrefix(string pf)
    {
        showPrefix = pf;
    }
}