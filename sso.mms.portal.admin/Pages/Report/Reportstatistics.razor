@page "/reportstatistics"

@using MatBlazor
@using AntDesign
@using Microsoft.AspNetCore.Components
@using sso.mms.portal.admin.Pages.Navbar
@using sso.mms.helper.Utility
@using sso.mms.helper.Configs;
@using sso.mms.helper.Components.Footer
@using sso.mms.helper.Data;
@using sso.mms.portal.admin.Services;
@using sso.mms.login.Services;
@using sso.mms.helper.PortalModel;
@using Blazored.LocalStorage;
@using sso.mms.portal.admin.ViewModels
@using CsvHelper;
@using System.Collections.Generic;
@using System.Globalization;
@using System.IO;
@inject SweetAlertService Swal;
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject AdminService AdminService
@inject ILocalStorageService localStorage
@inject UserRoleService userRoleService

<style>
    .ant-picker {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
        color: rgba(0, 0, 0, 0.85);
        font-size: 14px;
        font-variant: tabular-nums;
        line-height: 1.5715;
        list-style: none;
        font-feature-settings: 'tnum';
        padding: 4px 11px 4px;
        position: relative;
        display: inline-flex;
        align-items: center;
        background: #fff;
        border: 1px solid #9e9e9e;
        border-radius: 4px;
        transition: border 0.3s, box-shadow 0.3s;
    }

    .form-control, .form-select {
        display: block;
        width: 100%;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: var(--bs-body-color);
        background-color: var(--bs-body-bg);
        background-clip: padding-box;
        border: var(--bs-border-width) solid #9e9e9e;
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        border-radius: var(--bs-border-radius-sm);
        transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
        height: 3rem;
    }

    @@media only screen and (min-width: 1000px) {
        .pm-xl {
            position: fixed;
            width: 100%;
            z-index: 1000;
        }
    }

    @@media only screen and (max-width: 1000px) {
        .position-class {
            position: relative
        }
    }

    @@media only screen and (max-width: 1248px) {
        .flex-media {
            display: flex;
            flex-direction: column;
        }
    }

    @@media only screen and (max-width: 772px) {
        .flex-media-2 {
            display: flex;
            flex-direction: column;
        }

        .input-group {
            width: 100%;
            padding-top: 30px;
            padding-bottom: 10px;
        }
    }

    .mdc-table th {
        font-size: 1.143rem;
        color: #334396;
        border: 2px solid rgb(255 255 255);
        padding: 12px 12px 12px 24px;
        background: #FFCC41;
        font-family: 'Noto Sans Thai';
        font-style: normal;
        font-weight: 700;
        font-size: 18px;
        line-height: 27px;
        letter-spacing: 0.2px;
        color: #334396;
    }

    .mdc-table, .mdc-table--striped {
        width: 100%;
        max-width: 100%;
        background-color: transparent;
        border-collapse: collapse;
        border-spacing: 0;
        display: inline-block;
        overflow-x: auto;
        margin: 8px 0 32px;
        border: 0px solid rgba(0,0,0,.1);
        font-family: 'Noto Sans Thai';
        font-style: normal;
        font-weight: 500;
        font-size: 16px;
        align-items: center;
        color: #1A141F;
        border-radius: 10px;
    }

    tr.mdc-table-footer-row, tr.mdc-table-row {
        height: 48px;
        background: #a8a2ad17;
    }

    .mdc-table--striped tr:nth-of-type(odd) {
        background: #00000012;
    }

    .mdc-table td {
        border: 2px solid white;
        padding: 12px 12px 12px 24px;
    }

    .mdc-select__dropdown-icon {
        margin-left: 1px;
        margin-right: 1px;
        display: inline-flex;
        position: relative;
        align-self: center;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
        pointer-events: none;
    }

    .mdc-select .mdc-select__anchor {
        height: 56px;
        display: flex;
        align-content: center;
        align-items: center;
    }

    .mat-paginator .mat-paginator-container .mat-paginator-page-size {
        display: flex;
        margin-right: 8px;
        align-items: center
    }

    .mat-paginator .mat-paginator-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        min-height: 56px;
        padding: 0 8px;
        flex-wrap: wrap-reverse;
    }

    .mdc-paginator-container {
        display: flex;
        justify-content: space-between;
        min-height: 56px;
        padding: 0 8px;
        flex-wrap: wrap-reverse;
        width: 100%;
        align-items: center;
    }

    .mdc-select:not(.mdc-select--disabled) .mdc-select__anchor {
        background-color: #ffffff;
        width: 80px;
        height: 30px;
        border-radius: 10px;
        border: 0px solid #D4D2D5;
    }

    .mdc-paginator-page-size {
        line-height: 0px;
        display: flex;
        align-items: center;
    }

    .mat-elevation-z5 {
        box-shadow: 0px 3px 0px -1px rgb(0 0 0 / 0%), 0px 5px 0px 0px rgb(0 0 0 / 0%), 0px 1px 0px 0px rgb(0 0 0 / 0%);
    }

</style>


    <NavbarLoginAdmin ShortToken=@shortToken></NavbarLoginAdmin>

<MediaStyle></MediaStyle>

<div class="container mt-4 pt-4">
    <div class="card-body-main">
        <div class="card-head d-flex justify-content-start p-1 py-2 px-3">
            <div class="header-txt">รายงานข้อมูลสถิติการใช้งานการยืนยันตัวตนผ่านระบบ</div>
        </div>
        <div class="container px-4 sub-txt p-4">
            <div class="d-flex justify-content-between align-items-center py-4 flex-media-2 pb-4">
                <div class="d-flex flex-media align-items-center w-50">
                    <div class="w-50">
                        <AntDesign.DatePicker @bind-Value="@startdate" Format="dd/MM/yyyy" Style="width: 100%; height: 3rem;" OnChange="search" />

                        @* <MatDatePicker value="@startdate" Outlined=true Maximum="@nowMaxDate" AllowInput="false" Format="dd/MM/yyyy"
                        ValueChanged=@(async (DateTime value) => await OnStartDateSelected(value)) Style="width: 100%; height: 3rem;" ></MatDatePicker>*@
                    </div>  
                    <div class="px-3">
                        ถึง
                    </div>
                    <div class="w-50">
                        <AntDesign.DatePicker @bind-Value="@enddate" Format="dd/MM/yyyy" Style="width: 100%; height: 3rem;" OnChange="search" />
                        @*                        <MatDatePicker value="@enddate" Outlined="true" Minimum="@startdate" Maximum="@DateTime.Now.ToLocalTime()" AllowInput="false" Format="dd/MM/yyyy"
                        ValueChanged=@(async (DateTime value) => await OnEndDateSelected(value)) Style="width: 100%;height: 3rem;" Required></MatDatePicker>*@
                    </div>
                </div>

                <div class="input-group" style="width:45%">
                    <input type="search" class="form-control" style="height: 48px;" placeholder="ข้อมูลที่ต้องการค้นหา" aria-label="Search" aria-describedby="search-addon" @bind-value=@text />
                    <button type="button" class="btn btn-outline-primary serch-bg" style="height: 48px;width:48px;" @onclick=@search><i class="fa-solid fa-magnifying-glass"></i></button>
                </div>
            </div>


            <div class="d-flex flex-row justify-content-start align-items-center sub-txt py-2">
                <div>รายงานข้อมูลสถิติการใช้งาน</div>
                <div>ประจำปี พ.ศ. 2566</div>
            </div>

           @* RequestApiOnlyOnce="true"*@
            <MatTable ShowPaging="false"
                      Items="@uselogListSearch"
                      PageSize=@pageSize
                      LoadInitialData="true"
                      Striped="true"
                      AllowSelection="true"
                      RowClass="tester"
                      @bind-CurrentPage="@currentPage"
                      DebounceMilliseconds="150"
                      class="mat-elevation-z5"
                      Descending="true">
                <MatTableHeader>
                    <th class="text-center" style="border-radius:10px 0 0 0;width:100px;">ลำดับ</th>
                    <th class="text-center" style="width:150px">Username</th>
                    <th class="text-center" style="width:300px">ชื่อ-นามสกุล</th>
                    <th class="text-center" style="width:300px">วันเวลาที่เข้าสู่ระบบ</th>
                    <th class="text-center" style="width:250px">สถานะ</th>
                    <th class="text-center" style="width:150px;border-radius:0 10px 0 0 ;">ช่องทาง</th>

                </MatTableHeader>
                <MatTableRow>
                    <td class="text-center" style="max-width:100px">@(uselogListSearch.IndexOf(context) + 1)</td>
                    <td class="text-center" style="width:150px">@context.CreateBy</td>
                    <td class="text-center" style="width:300px">

                        <div class="d-flex flex-row justify-content-center align-items-center">
                            <div class=""> @context.FirstName</div>
                            <div style="padding-left : 5px;">@context.LastName</div>
                        </div>

                    </td>
                    <td class="text-center" style="width:300px">@context.CreateDate.ToString("dd/MM/yyyy HH:mm:ss")</td>
                    <td class="text-center" style="width:250px">
                        @if (context.IsStatus == 1)
                        {
                            <div>สำเร็จ</div>
                        }
                        else
                        {
                            <div>ไม่สำเร็จ</div>
                        }
                    </td>
                    <td class="text-center" style="width:150px">@context.ChannelLogin</td>

                </MatTableRow>
            </MatTable>
            <div style="font-size:14px;font-weight:500;color:gray;">
                <AntDesign.Pagination ShowSizeChanger
                            OnShowSizeChange="OnShowSizeChange"
                            OnChange="OnPage"
                            DefaultCurrent="3"
                            PageSize=@pageSize
                            Total="@uselogListSearch.Count()" />
                @* <MatPaginator PageSize="@pageSize" Page="@OnPage" PageSizeOptions="@PageSizeOptions" Length="@lengthPage"></MatPaginator> *@
            </div>
            <div class="d-flex justify-content-end align-items-center pt-5">
                <button class="btn btn-secondary btn-bo-main px-4 p-2" @onclick="GoToMainmenu">
                    <i class="fa-solid fa-circle-chevron-left"></i>&nbsp; ย้อนกลับ
                </button>&nbsp;&nbsp;
                @if (permit.isRolePrint == true)
                {
                    <button class="btn btn-primary btn-save-main px-4 p-2" @onclick=@downloadCsv><i class="fa-solid fa-cloud-arrow-down"></i>&nbsp; ดาวน์โหลด</button>
                }
            </div>
        </div>
    </div>
</div>
<div class="pt-5">
    <sso.mms.helper.Components.Footer.Footer />
</div>
@if (isloadding == true)
{
    <style>body { overflow: hidden; }</style><LoadingPage></LoadingPage>
}
@code {

    public bool isloadding = false;
    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? shortToken { get; set; } = "";
    public string? text { get; set; } = "";
    public string? url;
    public string? prefix = "";
    public DateTime? startdate { get; set; } = null;
    public DateTime? enddate { get; set; } = null;
    public DateTime? nowDate { get; set; }
    public int currentPage = 1;

    List<ViewModelSessionUserT> uselogListSearch = new List<ViewModelSessionUserT>();

    public List<ViewModelSessionUserT> UseLog;

    public int lengthPage = 0;

    [Parameter]
    public EventCallback<int> Callback { get; set; }

    public UserRole userRole;
    public MenuPerMit permit = new MenuPerMit();

    public class Models
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string url { get; set; }
        public int status { get; set; }
    }

    private IReadOnlyList<MatPageSizeOption> PageSizeOptions => new List<MatPageSizeOption>
    {
        new MatPageSizeOption(5, "5"),
        new MatPageSizeOption(10, "10"),
        new MatPageSizeOption(20, "20"),
        new MatPageSizeOption(50, "50"),
        new MatPageSizeOption(100, "100"),
    };

    int pageSize = 5;
    int pageIndex = 1;


    void OnPage(PaginationEventArgs e)
    {

        Console.WriteLine(e);
        pageSize = e.PageSize;
        currentPage = e.Page;
        // uselogListSearch = UseLog.Skip((pageIndex) * pageSize).OrderByDescending(o => o.CreateDate).Take(pageSize).ToList();

        StateHasChanged();
    }


    private void OnShowSizeChange(PaginationEventArgs args)
    {
        var (current, pageSize) = args;
        Console.WriteLine($"{current}, {pageSize}");
    }


    List<Models> menulist = new List<Models>()
    {
        new Models() {
                Id = 1,
                Name = "รายงาน Log การ Download เอกสาร",
                url = "sso.mms.go.th",
                status  = 1
            },
             new Models() {
                Id = 2,
                Name = "รายงานข้อมูลสถิติการใช้งานการยืนยันตัวตนผ่านระบบ",
                url = "sso.mms.go.th",
                status  = 1
            },
             new Models() {
                Id = 3,
                Name = "รายงานประวัติการปรับปรุงข้อมูลที่ให้บริการ",
                url = "sso.mms.go.th",
                status  = 2
            },
             new Models() {
                Id = 4,
                Name = "รายงานประวัติการเรียกใช้ข้อมูล จำแนกตามประเภทข้อมูล ปี เดือน วัน",
                url = "sso.mms.go.th",
                status  = 1
            },
    };

    public string? env = ConfigureCore.ConfigENV;

    protected override async Task OnInitializedAsync()
    {
        isloadding = true;

        prefix = ConfigureCore.baseAddressPortalAdmin;

        UseLog = await AdminService.GetSessionUserT();
        uselogListSearch = UseLog;
        lengthPage = uselogListSearch.Count();

        StateHasChanged();
        if (UseLog != null)
        {
            userRole = await localStorage.GetItemAsync<UserRole>("userRole");
            if (userRole != null && userRole.role != null)
            {
                try
                {
                    permit = await userRoleService.GetUserAuth(userRole, "PSMSW012", "PORTAL-SSO");
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
            }
            isloadding = false;
        }

        nowDate = DateTime.Now.Date;


        StateHasChanged();

    }
    public void GoToMainmenu()
    {
        NavigationManager.NavigateTo(prefix + "reportmainpage" + $"?token={shortToken}");
    }


    public int convertText(string text)
    {
        if (text == "สำเร็จ" || text == "สำ" || text == "เร็จ")
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    public async void search()
    {   

        if (startdate > enddate)
        {
            await Swal.FireAsync(
                  "ไม่สามารถเลือกวันเริ่มต้นประกาศได้มากกว่าวันสิ้นสุดประกาศ",
                  null,
                  SweetAlertIcon.Warning
                  );
        }
        else if(startdate == enddate && startdate != null && enddate != null)
        {
            await Swal.FireAsync(
                 "ไม่สามารถเลือกวันเริ่มต้นประกาศได้เท่ากับวันสิ้นสุดประกาศ",
                 null,
                 SweetAlertIcon.Warning
                 );
        }
        else if(startdate > nowDate)
        {
            startdate = null;
            await Swal.FireAsync(
                 "ไม่สามารถเลือกวันเริ่มต้นประกาศได้มากกว่าวันปัจจุบัน",
                 null,
                 SweetAlertIcon.Warning
                 );
        }
        else if (enddate > nowDate)
        {
            enddate = null;
            await Swal.FireAsync(
                 "ไม่สามารถเลือกวันสิ้นสุดประกาศได้มากกว่าวันปัจจุบัน",
                 null,
                 SweetAlertIcon.Warning
                 );
        }
        else
        {
            isloadding = true;
            if (startdate != null && enddate != null && text != null)
            {
                uselogListSearch =
                UseLog.Where(x => x.CreateDate.Date >= startdate && x.CreateDate.Date <= enddate).ToList()
                .Where(x => (x.CreateBy.ToLower()).Contains(text.ToLower()) || (x.CreateDate.ToString("dd/MM/yyyy HH:mm:ss")
                .ToLower()).Contains(text.ToLower())
            || (x.ChannelLogin.ToLower()).Contains(text.ToLower()) || (x.FirstName.ToLower()).Contains(text.ToLower())
            || (x.LastName.ToLower()).Contains(text.ToLower())).ToList();
                lengthPage = uselogListSearch.Count();
                StateHasChanged();
            }
            else if (startdate != null && text != null)
            {
                uselogListSearch = UseLog.Where(x => (x.CreateDate.Date == startdate)).ToList().Where(x => (x.CreateBy.ToLower()).Contains(text.ToLower()) || (x.CreateDate.ToString("dd/MM/yyyy HH:mm:ss").ToLower()).Contains(text.ToLower())
            || (x.ChannelLogin.ToLower()).Contains(text.ToLower()) || (x.FirstName.ToLower()).Contains(text.ToLower())
            || (x.LastName.ToLower()).Contains(text.ToLower())).ToList();
                lengthPage = uselogListSearch.Count();
                StateHasChanged();
            }
            else if (enddate != null && text != null)
            {
                uselogListSearch = UseLog.Where(x => (x.CreateDate.Date == enddate)).ToList().Where(x => (x.CreateBy.ToLower()).Contains(text.ToLower()) || (x.CreateDate.ToString("dd/MM/yyyy HH:mm:ss").ToLower()).Contains(text.ToLower())
            || (x.ChannelLogin.ToLower()).Contains(text.ToLower()) || (x.FirstName.ToLower()).Contains(text.ToLower())
            || (x.LastName.ToLower()).Contains(text.ToLower())).ToList();
                lengthPage = uselogListSearch.Count();
                StateHasChanged();
            }
            else if (startdate == null && enddate == null)
            {
                var status = convertText(text);

                uselogListSearch = UseLog.Where(x => (x.CreateBy.ToLower()).Contains(text.ToLower()) || (x.CreateDate.ToString("dd/MM/yyyy HH:mm:ss").ToLower()).Contains(text.ToLower())
               || (x.ChannelLogin.ToLower()).Contains(text.ToLower()) || (x.FirstName.ToLower()).Contains(text.ToLower())
               || (x.LastName.ToLower()).Contains(text.ToLower()) || (x.IsStatus == status)
               ).ToList();
                lengthPage = uselogListSearch.Count();
                StateHasChanged();
            }
            else
            {
                uselogListSearch = UseLog;
            }
        }
       
        currentPage = 1;
        StateHasChanged();
        isloadding = false;

    }


    public async void downloadCsv()

    {
        isloadding = true;
        string timestamp = DateTime.Now.ToString("yyyyMMddHHmmssffff");
        string extension = "csv";
        string filename = $"{"Report"}_{timestamp}.{extension}";
        var csvFilePath = "wwwroot/Report/" + filename;
        var csvString = new StringBuilder();

        var thaiCulture = new CultureInfo("th-TH");
        using (var writer = new StreamWriter(csvFilePath, false, Encoding.UTF8))
        using (var csv = new CsvWriter(writer, thaiCulture))
        {
            var headerFields = new[] { "ลำดับ", "Username", "ชื่อ-นามสกุล", "วันเวลาที่เข้าสู่ระบบ", "สถานะ", "ช่องทาง" };
            foreach (var headerField in headerFields)
            {
                csv.WriteField(headerField);
            }
            csv.NextRecord();

            foreach (var item in uselogListSearch)
            {

                var cd = item.CreateDate.ToString("dd/MM/yyyy HH:mm:ss");
                csv.WriteField(uselogListSearch.IndexOf(item) + 1);
                csv.WriteField(item.CreateBy);
                csv.WriteField(item.FirstName + " " + item.LastName);
                csv.WriteField(cd);
                if (item.IsStatus == 0)
                {
                    csv.WriteField("ไม่สำเร็จ");
                }
                else if (item.IsStatus == 1)
                {
                    csv.WriteField("สำเร็จ");
                }
                csv.WriteField(item.ChannelLogin);
                csv.NextRecord();
            }
        }

        getCsv(filename);
        isloadding = false;
    }

    public async void getCsv(string filename)
    {
        try
        {
            await JsRuntime.InvokeAsync<object>("open", "Report/" + filename, "_blank");
        }
        catch (Exception ex)
        {
            return;
        }

    }


}

