@using Blazored.LocalStorage;
@using sso.mms.helper.Configs;
@using sso.mms.helper.Utility
@using sso.mms.notification.Services;
@using sso.mms.notification.ViewModel;
@using sso.mms.portal.admin.ViewModels;
@using sso.mms.login.Services;
@using sso.mms.login.ViewModels;
@using sso.mms.helper.PortalModel;
@using Blazored.LocalStorage;
@using sso.mms.login.Services;

@inject ReadTokenService readTokenService
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject NotificationService notificationService
@inject UserRoleService userRoleService
@inject ILocalStorageService _localstorage;
@inject SettingService SettingService

@using System.IdentityModel.Tokens.Jwt;
@using sso.mms.helper.ViewModels;

@*sticky-top*@

<nav class="navbar sticky-top navbar-expand-lg navbar-style c-style-content">
    <div class="row w-100 m-2">
        <div class="d-flex col-sm-6 col-md-6 col-lg-5 col-xl-4 pb-2 point-event align-items-center" @onclick="GoToMainPage">
            <img class="wid-banner" src="helper_shared/icon_sso/mms-logo.png" />
            <div style="color: #f0f2f9;font-size: 29px;padding-left: 1rem;">
                |
            </div>
            <div style="color: #909399bd;font-size:16px;">
                @PageCode
            </div>
        </div>
        <div class="col-sm-6 col-md-6 col-lg-7 col-xl-8">
            <form class="float-end">
                <div class="navbar-nav me-auto mb-2 mb-lg-0">
                    <div class="d-flex align-items-center">
                        <div class="nav-item px-2 point-event" @onclick="GoToMainPage">
                            <i class="fa-solid fa-house-chimney fa-2xl" data-bs-placement="bottom" title="กลับหน้าหลัก"></i>
                        </div>
                        @if (permitChat.isRoleRead == true)
                        {
                            @if (checkStatusChat.isactive == true)
                            {
                                <div class="nav-item px-2 point-event" @onclick="GoToChatPage">
                                    <i class="fa-solid fa-comments fa-2xl" data-bs-placement="bottom" title="ออนไลน์แชท"></i>
                                </div>
                            }

                        }
                        @if (isloading)
                        {
                            <div class="nav-item px-2 point-event">
                                <i class="fa-solid fa-comments fa-2xl"></i>
                            </div>
                        }
                        @{
                            var count = 0;
                            if (responseNotiM != null)
                            {
                                for (var i = 0; i < responseNotiM.Count(); i++)
                                {
                                    count += responseNotiM[i].NotificationTs.Count();
                                }
                            }
                            

                        }
                        @if (permitNoti.isRoleRead == true)
                        {
                            <div class="nav-item px-2 point-event" @onclick="GoToNotiPage" >
                                @if(responseNotiM != null)
                                {
                                    
                                    if(count > 0)
                                    {
                                        <div class="circleOrange">@count</div>
                                    }
                                    
                                }
                                else
                                {
                                    if (notiNo > 0)
                                    {
                                        <div class="circleOrange">@notiNo</div>
                                    }
                                }
                                
                                <i class="fa-solid fa-bell fa-2xl" data-bs-placement="bottom" title="การแจ้งเตือน"></i>
                            </div>
                        }
                        @if (isloading)
                        {
                            <div class="nav-item px-2 point-event">
                                <i class="fa-solid fa-bell fa-2xl"></i>
                            </div>
                        }


                        <div class="nav-item">
                            <hr class="hr-nav" style="margin-top:25px;Width:51px;border: 1px solid #C5CBE6;transform: rotate(90deg);" />
                        </div>
                        <div class="nav-item d-flex flex-column align-items-start" style="margin-right:10px">
                            @if (getUser != null)
                            {
                                <div class="nav-user-font">
                                    @getUser.FirstName @getUser.MiddleName @getUser.LastName
                                </div>
                            }
                            else
                            {
                                <div class="nav-user-font" style="line-height: 30px; width: 100px; height: 30px;"></div>
                            }
                            <div class="nav-user-font-role">@adminPosition</div>
                        </div>
                        <div class="nav-item">
                            <div class="dropdown">
                                <div class="dropbtn point-event">
                                    <i class="fa-solid fa-circle-user fa-2xl px-1"></i>
                                    <img src="helper_shared/icon_sso/arrwo-user.png" style="width:11.15px" />
                                </div>
                                <div class="dropdown-content py-2" style="width:300px;">
                                    <a class="nto_page link-primary point-event" @onclick="GoToEditProfile" target="_blank">
                                        <i class="fa-solid fa-user-pen"></i> &nbsp;
                                        ข้อมูลผู้ใช้งาน
                                    </a>
                                    <hr />
                                    <a class="nto_page link-primary point-event" @onclick="SignOut">
                                        <i class="fa-solid fa-arrow-right-from-bracket"></i>&nbsp;
                                        ออกจากระบบ
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</nav>
@*@if (isloading == true)
{
    <style>
        body {
            overflow: hidden;
        }</style>

    <LoadingPage></LoadingPage>
}*@
@code {
    [Parameter]
    public string ShortToken { get; set; }
    [Parameter]
    public string PageCode { get; set; }
    [Parameter]
    public List<NotiM>? responseNotiM { get; set; }
    private sso.mms.login.ViewModels.ResponseShortToken responseShortToken { get; set; } = null!;
    public bool isloading = false;
    public string? env = ConfigureCore.ConfigENV;
    private string url;

    public UserRole userRole;
    public ResponseLogin getUser;
    public MenuPerMit permitChat = new MenuPerMit();
    public MenuPerMit permitNoti = new MenuPerMit();

    public List<string>? roleCodeList = new List<string>();

    public string orgCode = "1001";
    public string username = "";
    public string userType = "";

    public string? adminPosition = "";
    public string? adminWorkingDept = "";

    public NotiTApiModel notiTapi = new NotiTApiModel();
    CheckSettingModel checkStatusChat = new CheckSettingModel();

    public void GoToNotiPage()
    {
        NavigationManager.NavigateTo(url + "/notification?token=" + responseShortToken.shortToken);
    }
    public void GoToChatPage()
    {
        NavigationManager.NavigateTo(url + "/chatadmin?token=" + responseShortToken.shortToken);
    }
    public void GoToMainPage()
    {
        NavigationManager.NavigateTo(url + "/mainmenu?token=" + responseShortToken.shortToken);
    }
    public void GoToEditProfile()
    {
        NavigationManager.NavigateTo(url + "/EditProfile?token=" + responseShortToken.shortToken);
    }
    private int notiNo;
    private List<NotiM>? responseNoti = new List<NotiM>();




    protected override async Task OnInitializedAsync()
    {


        isloading = true;
        responseShortToken = await readTokenService.ReadToken(ShortToken!);
        checkStatusChat = await SettingService.GetStatusMSetting("chat");

        if (responseShortToken != null)
        {
            JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();
            JwtSecurityToken jwt = tokenHandler.ReadJwtToken(responseShortToken.accessToken);
            var token = jwt.Payload.ToList();
            KeyValuePair<string, object> result = token.FirstOrDefault(pair => pair.Key == "preferred_username");
            KeyValuePair<string, object> resultRealm = token.FirstOrDefault(pair => pair.Key == "iss");



            userType = resultRealm.Value.ToString().Split('/').Last();
            username = result.Value.ToString();

            userRole = await userRoleService.GetRoleByUserName(username);
            if (ConfigureCore.SiteName == "SSO" && userType == "sso-mms-admin")
            {
                KeyValuePair<string, object> result_code = token.FirstOrDefault(pair => pair.Key == "SSObranchCode");
                KeyValuePair<string?, object?> result_position = token.FirstOrDefault(pair => pair.Key == "ssopersonfieldposition");
                KeyValuePair<string?, object?> result_workingdept = token.FirstOrDefault(pair => pair.Key == "workingdeptdescription");

                adminPosition = (result_position.Value is null) ? "-" : result_position.Value.ToString();
                adminWorkingDept = (result_workingdept.Value is null) ? "-" : result_workingdept.Value.ToString();
                orgCode = result_code.Value.ToString();
                await _localstorage.SetItemAsync("adminPos", adminPosition);
                await _localstorage.SetItemAsync("adminWork", adminWorkingDept);
                adminPosition = (adminPosition is null) ? "-" : adminPosition;
            }
            await _localstorage.SetItemAsync("userRole", userRole);
            await _localstorage.SetItemAsync("userType", userType);



            if (userRole != null)
            {
                roleCodeList = userRole.role.Select(roleObject => roleObject.roleCode).ToList();
            }
            await _localstorage.SetItemAsync("roleCodeList", roleCodeList);

            notiTapi = new NotiTApiModel
                {
                    userType = userType,
                    username = username,
                    orgCode = orgCode,
                    roleCodeList = roleCodeList
                };

        }


        responseNoti = await notificationService.GetNotiByUser(notiTapi);
        getUser = await _localstorage.GetItemAsync<ResponseLogin>("userdata");
        if (responseNoti != null)
        {
            foreach (var item in responseNoti)
            {
                notiNo = notiNo + item.NotificationTs.Count;
            }
        }

        StateHasChanged();

        if (env == "Development")
        {
            url = "";
        }
        else
        {
            url = "/admin";
        }

        //responseShortToken = await readTokenService.ReadToken(ShortToken!);
        if (responseShortToken != null)
        {
            //Console.WriteLine("ResponseShortToken", responseShortToken);
            userRole = await localStorage.GetItemAsync<UserRole>("userRole");
            if (userRole != null && userRole.role != null)
            {
                try
                {

                    List<MenuPerMit> listPermit = userRole.role.Select(i => i.menu.Where(m => m.menuCode == "PSMBO002" && m.appCode == "PORTAL-SSO").
                                                    Select(t => t).ToList()).ToList().SelectMany(list => list).ToList();
                    permitChat = new MenuPerMit
                        {
                            isRoleRead = listPermit.Sum(x => (bool?)x.isRoleRead == true ? 1 : 0) >= 1,
                            isRoleCreate = listPermit.Sum(x => (bool?)x.isRoleCreate == true ? 1 : 0) >= 1,
                            isRoleUpdate = listPermit.Sum(x => (bool?)x.isRoleUpdate == true ? 1 : 0) >= 1,
                            isRoleDelete = listPermit.Sum(x => (bool?)x.isRoleDelete == true ? 1 : 0) >= 1,
                            isRolePrint = listPermit.Sum(x => (bool?)x.isRolePrint == true ? 1 : 0) >= 1,
                            isRoleApprove = listPermit.Sum(x => (bool?)x.isRoleApprove == true ? 1 : 0) >= 1,
                            isRoleCancle = listPermit.Sum(x => (bool?)x.isRoleCancle == true ? 1 : 0) >= 1
                        };

                    List<MenuPerMit> listPermitNoti = userRole.role.Select(i => i.menu.Where(m => m.menuCode == "PSMBO003" && m.appCode == "PORTAL-SSO").
                                                    Select(t => t).ToList()).ToList().SelectMany(list => list).ToList();
                    permitNoti = new MenuPerMit
                        {
                            isRoleRead = listPermitNoti.Sum(x => (bool?)x.isRoleRead == true ? 1 : 0) >= 1,
                            isRoleCreate = listPermitNoti.Sum(x => (bool?)x.isRoleCreate == true ? 1 : 0) >= 1,
                            isRoleUpdate = listPermitNoti.Sum(x => (bool?)x.isRoleUpdate == true ? 1 : 0) >= 1,
                            isRoleDelete = listPermitNoti.Sum(x => (bool?)x.isRoleDelete == true ? 1 : 0) >= 1,
                            isRolePrint = listPermitNoti.Sum(x => (bool?)x.isRolePrint == true ? 1 : 0) >= 1,
                            isRoleApprove = listPermitNoti.Sum(x => (bool?)x.isRoleApprove == true ? 1 : 0) >= 1,
                            isRoleCancle = listPermitNoti.Sum(x => (bool?)x.isRoleCancle == true ? 1 : 0) >= 1
                        };


                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
            }

        }
        isloading = false;


    }
    public async void SignOut()
    {
        await localStorage.ClearAsync();
        NavigationManager.NavigateTo(url + "/");
    }
}