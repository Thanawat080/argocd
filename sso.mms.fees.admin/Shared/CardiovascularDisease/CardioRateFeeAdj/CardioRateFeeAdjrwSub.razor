
<div class="site-layout-background" style="padding: 24px;">
    <div class="mms-nav-title">
        <div class="mms-text-title px-4 py-3">ค่าบริการทางการแพทย์ กรณี Package โรคหัวใจและหลอดเลือด กับสถานพยาบาลในความตกลง</div>
    </div>
    <div class="container py-4">
        <div class="mms-txt-header py-2">รายการขอเบิก</div>
        <hr />
    </div>
    <div class="row py-2">
        <div class="col-sm-12 col-md-4">
            <div class="p-2 d-md-flex align-items-md-center">
                <div class="mms-txt-headdetail" style="margin-left:30px;">
                    ปีงบประมาณ
                </div>
                <div class="ps-md-2">
                    <Input Placeholder="Basic usage" @bind-Value="@txtValue" readonly disabled />
                </div>
            </div>
        </div>
        <div class="col-sm-12 col-md-4">
            <div class="p-2 d-md-flex align-items-md-center">
                <div class="mms-txt-headdetail">
                    วันที่แก้ไขล่าสุด
                </div>
                <div class="ps-md-2">
                    <Input Placeholder="Basic usage" @bind-Value="@txtValue" readonly disabled />
                </div>
            </div>
        </div>
        <div class="col-sm-12 col-md-4">
            <div class="p-2 d-md-flex align-items-md-center">
                <div class="mms-txt-headdetail">
                    แก้ไขล่าสุดโดย
                </div>
                <div class="ps-md-2">
                    <Input Placeholder="Basic usage" @bind-Value="@txtValue" readonly disabled />
                </div>
            </div>
        </div>
    </div>
    <div class="row py-4">
        <div class="col-sm-12 col-md-4 mms-media-center" style="margin-left:30px;">
            <Space Direction="@DirectionVHType.Vertical" Class="mms-btn-serch w-100">
                <SpaceItem>
                    <Search Placeholder="ข้อมูลที่ต้องการค้นหา.." EnterButton="true" />
                </SpaceItem>
            </Space>
        </div>
        <div class="d-flex justify-content-end" style="padding-right:30px;">
            <Button Class="me-2" Type="@ButtonType.Primary" @onclick="AddNewRow"><i class="fa-solid fa-circle-plus"></i>&nbsp;เพิ่ม</Button>
        </div>
    </div>

    <div class="mt-3" style= "padding: 24px;">
        <Table DataSource="listOfData" RowClassName="@(_ => "editable-row")" TItem="Data">
            <Column Title="ลำดับ" DataIndex="No" TData="int" Align="ColumnAlign.Center" Style="background: #EAE8EC;" />
            <Column Title="อัตราค่าบริการ" DataIndex="RateFee" TData="string" Align="ColumnAlign.Center" Style="background: #EAE8EC;">
                @if (editId == context.Id)
                {
                    <Input Type="text" Placeholder="Basic usage" @bind-Value="context.RateFee" OnBlur="stopEdit" style="background: #FFFFFF;" @onclick="()=>startEdit(context.Id)" />
                }
                else
                {
                    <div style="background: #EAE8EC; padding-right:24px">
                        @context.RateFee
                    </div>
                }
            </Column>
            <Column Title="วันที่เริ่มต้นการใช้งาน" DataIndex="StartDate" TData="string" Align="ColumnAlign.Center" Style="background: #EAE8EC;">
                @if (editId == context.Id)
                {
                    <Input Type="text" Placeholder="Basic usage" @bind-Value="context.StartDate" OnBlur="stopEdit" style="background: #FFFFFF;" @onclick="()=>startEdit(context.Id)" />
                }
                else
                {
                    <div style="background: #EAE8EC; padding-right:24px">
                        @context.StartDate
                    </div>
                }
            </Column>
            <Column Title="สาเหตุ" DataIndex="Cause" TData="string" Align="ColumnAlign.Center" Style="background: #EAE8EC;">
                @if (editId == context.Id)
                {
                    <Input Type="text" Placeholder="Basic usage" @bind-Value="context.Cause" OnBlur="stopEdit" style="background: #FFFFFF;" @onclick="()=>startEdit(context.Id)" />
                }
                else
                {
                    <div style="background: #EAE8EC; padding-right:24px">
                        @context.Cause
                    </div>
                }
            </Column>
            @if (showStatusColumn)
            {
                <Column Title="สถานะการใช้งาน" DataIndex="Status" TData="bool" Align="ColumnAlign.Center" Style="background: #EAE8EC;">
                    <Switch @bind-Value="@context.Status"></Switch>
                </Column>
            }
        </Table>
        <Pagination Class="py-3"
                            ShowSizeChanger
                     OnShowSizeChange="OnShowSizeChange"
                     DefaultCurrent="3"
                     Total="500" />
        <div class="d-flex justify-content-end" >
            <Button Class="me-2" Type="@ButtonType.Primary" @onclick="stopEdit"><i class="fa-solid fa-floppy-disk"></i>&nbsp;บันทึก</Button>
        </div>
    </div>
</div>

 @code {

    [Parameter]
    public EventCallback<int> IndexPage { get; set; }


    public bool showStatusColumn = false;

    public async Task Detail(int item)
    {
        await IndexPage.InvokeAsync(item);
    }

    string txtValue { get; set; }
    string editId;





    public class Data
    {
        public string Id { get; set; }
        public int No { get; set; }
        public string RateFee { get; set; }
        public string StartDate { get; set; }
        public string Cause { get; set; }
        public bool Status { get; set; }
    }

    List<Data> listOfData = new List<Data>
        {
            new Data
            {
            Id = "1",
            No = 1,
            RateFee = "11,000",
            StartDate = "01/01/2566",
            Cause = "ประกาศ",
            Status = true
            },
            new Data
            {
            Id = "2",
            No = 2,
            RateFee = "11,000",
            StartDate = "01/01/2566",
            Cause = "ตั้งต้น",
            Status = true
            },
        };


    void OnChange(QueryModel<Data> query)
    {
        Console.WriteLine(JsonSerializer.Serialize(query));
    }


    void AddNewRow() 
    {

        showStatusColumn = true;
        StateHasChanged(); 
        foreach (var item in listOfData)
        {
            item.No++;
        }

        var newItem = new Data
            {
                Id = (listOfData.Count + 1).ToString(),
                No = 1, // Set No to 1 for the new item
                RateFee = "",
                StartDate = "",
                Cause = "",
                Status = true
            };

        // Insert the new item at the beginning of the list
        listOfData.Insert(0, newItem);

        // Start editing the newly added row
        startEdit(newItem.Id);
    }

    void startEdit(string id)
    {
        editId = id;
    }

    void stopEdit()
    {
        var editedData = listOfData.FirstOrDefault(x => x.Id == editId);
        Console.WriteLine(JsonSerializer.Serialize(editedData));
        editId = null;
    }

    private void OnShowSizeChange(PaginationEventArgs args)
    {
        var (current, pageSize) = args;
        Console.WriteLine($"{current}, {pageSize}");
    }
}
}