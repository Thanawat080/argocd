@inject NavigationManager NavigationManager
<style>
    .anticon > .anticon {
        line-height: 0;
        vertical-align: 0;
        color: #ffffff !important;
    }

</style>
@{
    RenderFragment footer = @<Template>
    </Template>;
}

<Modal Title="รายละเอียดใบคำสั่งจ่าย โรงพยาบาล 1"
       Visible="@_visible"
       OnCancel="@HandleCancel"
       Footer="@footer"
       Width="1000">

    <div class="container">
        <div class="d-flex justify-content-start align-items-center">
            <span>ชื่อสถานพยาบาล :</span><span>โรงพยาบาล 1</span>
        </div>
        <div class="row">
            <div class="col-sm-12 col-md-4">
                <span>รหัสสถานพยาบาล :</span><span>5489621</span>
            </div>
            <div class="col-sm-12 col-md-4">
                <span>จำนวนรายการเบิก :</span><span>12 รายการ</span>
            </div>
            <div class="col-sm-12 col-md-4">
                <span>จำนวนเงินรวม :</span><span>3,400 บาท</span>
            </div>
        </div>
        <hr />
        <Table DataSource="listOfData" HidePagination>
            <PropertyColumn Property="c=>c.Id" Title=""></PropertyColumn>
            <PropertyColumn Property="c=>c.periodId" Title=""></PropertyColumn>
            <PropertyColumn Property="c=>c.number1" Title=""></PropertyColumn>
            <PropertyColumn Property="c=>c.fullname" Title=""></PropertyColumn>
            <PropertyColumn Property="c=>c.createDate" Title=""></PropertyColumn>
            <PropertyColumn Property="c=>c.type" Title=""></PropertyColumn>
            <PropertyColumn Property="c=>c.amount" Title=""></PropertyColumn>
            @{
                var totalBorrow = listOfData.Sum(x => x.amount);
                var totalRepayment = listOfData.Sum(x => x.amount);
            }
            <SummaryRow>
                <SummaryCell ColSpan="6" Align="ColumnAlign.Right">รวมทั้งหมด</SummaryCell>
                <SummaryCell>@totalRepayment บาท</SummaryCell>
            </SummaryRow>
        </Table>

    </div>
</Modal>

@code {
    [Parameter]
    public EventCallback<int> IndexPage { get; set; }

    [Parameter]
    public bool _visible { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    string txtValue { get; set; }

    public async Task Edit(int item)
    {
        await IndexPage.InvokeAsync(item);
    }
    /* modal */
    bool _loading = false;

    private void ShowModal()
    {
        _visible = true;
    }

    private void HandleOk(MouseEventArgs e)
    {
        _loading = false;
        OnClose.InvokeAsync(false);
    }

    private void HandleCancel(MouseEventArgs e)
    {
        _loading = false;
        OnClose.InvokeAsync(false);
    }
    List<ItemData> listOfData = new List<ItemData>();
    public class ItemData
    {
        public int Id { get; set; }
        public int? periodId { get; set; }
        public int? number1 { get; set; }
        public string? fullname { get; set; }
        public DateTime? createDate { get; set; }
        public string? type { get; set; }
        public int? amount { get; set; }

    };

    protected override void OnInitialized()
    {
        listOfData.Add(new ItemData
            {
                Id = 1,
                periodId = 1001,
                number1 = 21,
                fullname = "teest tewat",
                createDate = DateTime.Now,
                type = "type1",
                amount = 222
            });
        listOfData.Add(new ItemData
            {
                Id = 2,
                periodId = 1002,
                number1 = 2133,
                fullname = "teest tewat",
                createDate = DateTime.Now,
                type = "type1",
                amount = 222
            });
    }
    /*-- table --*/
    record Data(string key, string name, int borrow, int repayment);

    Data[] data = new Data[]
    {
        new("1","John Brown",10,33),
        new("2","Jim Green",100,0),
        new("3","Joe Black",10,10),
        new("4","Jim Red",75,45),
    };

    record FixedData(string name, string description);

    FixedData[] fixedData = Enumerable.Range(0, 6)
        .Select(i => new FixedData(
               name: (i % 2) > 0 ? "Light" : "Bamboo",
               description: "Everything that has a beginning, has an end.")
        ).ToArray();

}
