@{
    RenderFragment footer = @<Template>
        <Button OnClick="@HandleCancel" @key="@( "back" )">ยกเลิก</Button>
        <Button OnClick="@HandleOk" @key="@( "submit" )"
                Type="primary">
            ยืนยัน
        </Button>
    </Template>;
}

<Modal Title="@("Title")"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel"
       Footer="@footer"  >

    <div class="d-flex justify-content-center pt-2 pb-2">
        <p class="font-weight-normal">ICD10 โรคเรื้อรัง </p>
    </div>
    <Space Direction="@DirectionVHType.Horizontal" Class="d-flex justify-content-center pb-2">
        <SpaceItem>
            <Search Placeholder="ข้อมูลที่ต้องการค้นหา.." EnterButton="true" AllowClear />
        </SpaceItem>
    </Space>
    <Table @ref="table" DataSource="@data" @bind-SelectedRows="selectedRows">
        <Selection Key="@context.Id" Type="@selectionType" />
        <PropertyColumn Title="ICD10" Property="c=>c.Title" Align="ColumnAlign.Center">
            <a>@context.Title</a>
        </PropertyColumn>
    </Table>
</Modal>


@code {
    [Parameter]
    public EventCallback<int> IndexPage { get; set; }

    [Parameter]
    public bool _visible { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }


    public async Task Edit(int item)
    {
        await IndexPage.InvokeAsync(item);
    }

    /*Table*/

    ITable table;

    class Column
    {
        public string Id { get; set; }

        public string Title { get; set; }
    }


    Column[] data =
    {
        new Column()
        {
            Title = "E10",
        },
        new Column()
        {
            Title = "E11",
        },
        new Column()
        {
            Title = "E12",
        },
        new Column()
        {
            Title = "E13",
        }
    };

    IEnumerable<Column> selectedRows;
    string selectionType = "checkbox";

    public void RemoveSelection(string key)
    {
        var selected = selectedRows.Where(x => x.Title != key).ToList();
        table.SetSelection(selected.Select(x => x.Title).ToArray());
    }

    //

    bool _loading = false;

    private void ShowModal()
    {
        _visible = true;
    }


    private void HandleOk(MouseEventArgs e)
    {
        _loading = false;
        OnClose.InvokeAsync(false);
    }

    private void HandleCancel(MouseEventArgs e)
    {
        _loading = false;
        OnClose.InvokeAsync(false);
    }


}