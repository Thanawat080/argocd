@using MatBlazor
@using sso.mms.fees.admin.Shared.PromoteHealth
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime;
@using sso.mms.fees.admin.Providers.PromoteHealth.PaymentOrderList;
@using Blazored.LocalStorage;
@inject PaymentOrderListService PaymentOrderListService;
@inject ILocalStorageService _localstorage;
@inject SweetAlertService Swal;
@inject IJSRuntime JsRuntime
@using sso.mms.helper.Configs;

<style>

    .mdc-table td {
        padding: 20px !important;
    }

    .mdc-table th {
        padding: 20px !important;
    }

    .hosStyle {
        background-color: #ffcc41;
        height: auto;
        border-radius: 5px;
        border: 1px solid white;
        align-content: center;
        margin: 2px 2px 2px 0;
        padding: 2px;
    }
</style>

<div class="site-layout-background" style="padding: 24px;">
    <div class="mms-nav-title">
        <div class="mms-text-title px-4 py-3">ค่าบริการทางการแพทย์ส่งเสริมสุขภาพและป้องกันโรค</div>
    </div>
    <div class="container py-4">
        
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item " style="cursor: pointer;" aria-current="page" @onclick="()=> goBack(1)">
                    <span class="breadcum-sucress py-2">รายการขอเบิก</span>
                </li>
                <li class="breadcrumb-item" aria-current="page">
                    <span class="breadcum-process py-2">@InjectwdNo</span>
                </li>
            </ol>
        </nav>
        <hr />
        <div class="row pb-3">
            <div class="col-sm-12 col-md-6 col-xl-3 py-4">
                <div class="">
                    <div class="mms-txt-headdetail">งวดที่</div>
                    <Input Placeholder="Basic usage" @bind-Value="@InjectwdNo" ReadOnly />
                </div>
            </div>
            <div class="col-sm-12 col-md-6 col-xl-3 py-4">
                <div class="">
                    <div class="mms-txt-headdetail">จำนวนโรงพยาบาลทั้งหมด</div>
                    <Input Placeholder="Basic usage" @bind-Value="@countHos" ReadOnly />
                </div>
            </div>
            <div class="col-sm-12 col-md-6 col-xl-3 py-4">
                <div class="">
                    <div class="mms-txt-headdetail">จำนวนผู้ป่วยทั้งหมด</div>
                    <Input Placeholder="Basic usage" @bind-Value="@countPerson" ReadOnly />
                </div>
            </div>
            <div class="col-sm-12 col-md-6 col-xl-3 py-4">
                <div class="">
                    <div class="mms-txt-headdetail">ยอดเงินรวม</div>
                    <Input Style="text-align: end" @bind-Value="@sumPrice"  ReadOnly />
                </div>
            </div>
        </div>

        <div class="row align-items-center">
            <div class="col-sm-12 col-md-4">
                <div class="mms-media-start pe-2">
                    <Checkbox Style="border-block-color:#334396;" @bind-Value="checkallhos" CheckedChange="funcheckallhos"></Checkbox> &nbsp;
                    <span class="mms-txt-headdetail w-100 pt-2">เลือกโรงพยาบาลทั้งหมด</span>
                </div>
            </div>
            <div class="col-sm-12 col-md-8">
                <div class="row mms-media-between">
                    <div class="col-8">
                        <Button Style="width:100%;" Type="@ButtonType.Primary" @onclick=@(() => addItem())><i class="fa-solid fa-arrow-up"></i> &nbsp; ส่งรายการที่เลือกเพื่อออกใบสั่งจ่าย</Button>
                    </div>
                    <div class="col-4">
                        <Space Direction="@DirectionVHType.Vertical" Class="mms-btn-serch w-100">
                            <SpaceItem>
                                <Search Placeholder="ข้อมูลที่ต้องการค้นหา.." EnterButton="true" />
                            </SpaceItem>
                        </Space>
                    </div>
                </div>
            </div>
        </div>

        <br />
        @if(HospByWitdraw != null)
        {
            <Table DataSource="@HospByWitdraw" TItem="GetPaymentOrderList" RowClassName="@(_=>"editable-row")" Bordered ScrollX="1000">
            <ChildContent Context="data">
                <Column TData="string" Title="" Width="5%" Style="text-align:center;">
                    <div class="col-1"><span class="px-4"><Checkbox Style="border-block-color:#334396;" @bind-Value="@data.ischeck" Disabled="!data.isRequestForm" CheckedChange="() => funcheckhos(data.HospCode, data.ischeck)"></Checkbox></span></div>
                </Column>
                <Column TData="string" Title="ลำดับ" Width="5%" Style="text-align:center;">
                    @String.Format("{0:d}", @HospByWitdraw.IndexOf(data) + 1)
                </Column>
                <Column TData="string" Title="ประมวลผลด้วย Ai" Width="8%" Style="text-align:center;" Align="ColumnAlign.Center">
                    @if (@data.isShowAi)
                        {
                            <div style="cursor: pointer;" @onclick="() => gotoAiPage(data.HospCode, data.HospName, InjectwdNo)">
                                <svg xmlns="http://www.w3.org/2000/svg" width="34" height="34" viewBox="0 0 34 34" fill="none">
                                    <path d="M29.75 15.5833V12.75H26.9167V9.91667C26.9144 9.16591 26.6152 8.44654 26.0843 7.91567C25.5535 7.38481 24.8341 7.08558 24.0833 7.08333H21.25V4.25H18.4167V7.08333H15.5833V4.25H12.75V7.08333H9.91667C9.16591 7.08558 8.44654 7.38481 7.91567 7.91567C7.38481 8.44654 7.08558 9.16591 7.08333 9.91667V12.75H4.25V15.5833H7.08333V18.4167H4.25V21.25H7.08333V24.0833C7.08558 24.8341 7.38481 25.5535 7.91567 26.0843C8.44654 26.6152 9.16591 26.9144 9.91667 26.9167H12.75V29.75H15.5833V26.9167H18.4167V29.75H21.25V26.9167H24.0833C24.8341 26.9144 25.5535 26.6152 26.0843 26.0843C26.6152 25.5535 26.9144 24.8341 26.9167 24.0833V21.25H29.75V18.4167H26.9167V15.5833H29.75ZM24.0833 24.0833H9.91667V9.91667H24.0833V24.0833Z" fill="#334396" />
                                    <path d="M16.0947 11.3335H14.1893L11.3418 22.6668H12.7967L13.454 20.0106H16.735L17.3754 22.6668H18.8799L16.0947 11.3335ZM13.6453 18.8758L15.0875 12.6793H15.1526L16.5452 18.8758H13.6453ZM20.179 11.3335H21.5956V22.6668H20.179V11.3335Z" fill="#334396" />
                                </svg>
                            </div>

                        }
                </Column>
                <Column TData="string" Title="รหัสสถานพยาบาล" Width="7%" Style="text-align:center;">
                    @data.HospCode
                </Column>
                <Column TData="string" Title="สถานพยาบาล" Width="10%" Style="text-align:center;">
                    @data.HospDisplayName
                </Column>
                <Column TData="string" Title="จำนวนผู้ป่วยทั้งหมด" Width="10%" Style="text-align:center;">
                    @data.Displayperson
                </Column>
                <Column TData="string" Title="ยอดเงินรวม" Width="10%" Style="text-align:center;">
                    @data.Displayprice
                </Column>
                <Column TData="string" Title="ใบขอเบิก" Width="10%" Style="text-align:center;">
                        <Button Type="@ButtonType.Primary" @onclick="(() => DownloadPdf(data.WithdrawalDoc))"><i class="fa-solid fa-arrow-down"></i> &nbsp; ใบขอเบิก</Button>
                </Column>
                <Column TData="string" Title="" Width="5%" Style="text-align:center;">
                        <img class="mx-2" title="ดู" src="helper_shared/PortalAdminImage/eye.png" style="width:24px;height:24px; cursor:pointer;" @onclick=@(() => gotodetail(@data.HospCode)) />
                </Column>
                </ChildContent>
            </Table>
            @*@foreach (var item in HospByWitdraw)
            {
                <div class="row hosStyle align-items-center" >
                    <div class="col-1"><span class="px-4"><Checkbox Style="border-block-color:#334396;" @bind-Value="@item.ischeck" Disabled="!item.isRequestForm" CheckedChange="() => funcheckhos(item.HospCode, item.ischeck)"></Checkbox></span></div>
                    @if (item.isShowAi)
                    {
                        <div class="col-1" style="cursor: pointer;" @onclick="() => gotoAiPage()">
                            <svg xmlns="http://www.w3.org/2000/svg" width="34" height="34" viewBox="0 0 34 34" fill="none">
                                <path d="M29.75 15.5833V12.75H26.9167V9.91667C26.9144 9.16591 26.6152 8.44654 26.0843 7.91567C25.5535 7.38481 24.8341 7.08558 24.0833 7.08333H21.25V4.25H18.4167V7.08333H15.5833V4.25H12.75V7.08333H9.91667C9.16591 7.08558 8.44654 7.38481 7.91567 7.91567C7.38481 8.44654 7.08558 9.16591 7.08333 9.91667V12.75H4.25V15.5833H7.08333V18.4167H4.25V21.25H7.08333V24.0833C7.08558 24.8341 7.38481 25.5535 7.91567 26.0843C8.44654 26.6152 9.16591 26.9144 9.91667 26.9167H12.75V29.75H15.5833V26.9167H18.4167V29.75H21.25V26.9167H24.0833C24.8341 26.9144 25.5535 26.6152 26.0843 26.0843C26.6152 25.5535 26.9144 24.8341 26.9167 24.0833V21.25H29.75V18.4167H26.9167V15.5833H29.75ZM24.0833 24.0833H9.91667V9.91667H24.0833V24.0833Z" fill="#334396" />
                                <path d="M16.0947 11.3335H14.1893L11.3418 22.6668H12.7967L13.454 20.0106H16.735L17.3754 22.6668H18.8799L16.0947 11.3335ZM13.6453 18.8758L15.0875 12.6793H15.1526L16.5452 18.8758H13.6453ZM20.179 11.3335H21.5956V22.6668H20.179V11.3335Z" fill="#334396" />
                            </svg>
                        </div>
                        
                    }
                    @{
                        var with = "80%";
                        if (item.isShowAi)
                        {
                            with = "70%";

                        }
                    }
                    <div class="col-10" style="width:@with; cursor: pointer; padding-top:10px;" @onclick=@(() => gotodetail(@item.HospCode))>
                        <div class="row">
                            <div class="col-3 mms-txt-headdetail">
                                <span>@item.HospCode &nbsp; @item.HospDisplayName</span>
                            </div>
                            <div class="col align-items-center" style="display:flex;">
                                <div class="mms-txt-headdetail text-align-end">จำนวนผู้ป่วยทั้งหมด</div>&nbsp;
                                <Input Value="item.Displayperson" Disabled="true" Style="width:110px" />
                            </div>
                            <div class="col align-items-center" style="display:flex;">
                                <div class="mms-txt-headdetail text-align-end">ยอดเงินรวม</div>&nbsp;
                                <Input Placeholder="Basic usage" Value="item.Displayprice" Disabled="true" Style="width:150px" />
                            </div>
                        </div>
                    </div>
                    <div class="col-1">
                        <Button Type="@ButtonType.Primary"><i class="fa-solid fa-arrow-down"></i> &nbsp; ใบขอเบิก</Button>
                    </div>
                </div>
            }*@
        }

        <br />
@*        <Pagination DefaultCurrent="1"
                    Total="todosmodal.Count()"
                    PageSize="PageSize"
                    @OnShowSizeChange="(page, size) => ChangePageSize(size)"
                    OnChange="(page) => ChangePage(page)" />*@
        <div class="mms-media-end">
            <Button Class="ant-btn-distable" @onclick=@(() => goBack(1))><i class="fa-solid fa-circle-chevron-left"></i> &nbsp; ย้อนกลับ</Button>
        </div>
    </div>
</div>


<Modal Title="รายละเอียด"
       Visible="@_visible1"
       OnOk="@HandleOk1"
       OnCancel="@HandleCancel1"
       OkText="@_okText"
       CancelText="@_cancelText">
    <div>
        <div class="d-flex align-items-center">
            <div class="mms-txt-headdetail w-100">รายการตรวจ</div>&nbsp;
            <Input Placeholder="Basic usage" @bind-Value="@txtValue" />
        </div>
        <br />
        <div class="d-flex align-items-center">
            <div class="mms-txt-headdetail w-100">อัตราค่าบริการ</div>&nbsp;
            <Input Placeholder="Basic usage" @bind-Value="@txtValue" />
        </div>
        <br />
        <div class="d-flex align-items-center">
            <div class="mms-txt-headdetail w-100">สถานะการใช้งาน</div>&nbsp;
            <Switch @bind-Checked="@active" />
            &nbsp;&nbsp;<label>@(active == true ? "เปิด" : "ปิด")</label>
        </div>
    </div>
</Modal>

<Modal Title="@title"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel"
       Width="1300">
    @if (idpage != 0)
    {
        <WithdrawalRequesltListDetailSubYear Year='@InjectwdNo.Split("/")[0]' Month='@InjectwdNo.Split("/")[1]' Id="iditem" IdPagenew="@((args)=>backpage(args.Item1, args.Item2))"></WithdrawalRequesltListDetailSubYear>
    }
    else
    {
        <WithdrawalRequesltListDetailYearNewpage Id="idnewpage" InjectwdNo="@InjectwdNo" InjectHosCode="@idnewpage" Person="@GetPerson.Where(x => x.Hospitalcode == idnewpage).ToList()" IdPagenew="@((args)=>oncallindex(args.Item1, args.Item2))" HospByWitdraw="@HospByWitdraw.Where(x => x.HospCode == idnewpage).ToList()"></WithdrawalRequesltListDetailYearNewpage>
    }


</Modal>

@if (isloading == true)
{
    <style>
        body {
            overflow: hidden;
        }</style>

    <LoadingPage></LoadingPage>
}

@code {

    //[Parameter]
    //[SupplyParameterFromQuery(Name = "token")]
    //public string? shortToken { get; set; } = "";



    [Parameter]
    public EventCallback<int> IndexPage { get; set; }
    [Parameter]
    public string InjectwdNo { get; set; } 
    [Parameter]
    public string InjectHosCode { get; set; }

    [Parameter]
    public decimal? SumPrice { get; set; }

    GetPaymentOrderList HospitalList = new GetPaymentOrderList();
    List<GetPaymentOrderList> HospByWitdraw = new List<GetPaymentOrderList>();
    List<AaiHealthCheckupHViewModel> GetPerson = new List<AaiHealthCheckupHViewModel>();
    SaveOrderT data = new SaveOrderT();
    string title = "รายละเอียด";
    bool active = true;
    string _okText = "ยืนยัน";
    string _cancelText = "ยกเลิก";
    bool _visible1 = false;
    public bool checkallhos = false;
    bool _visible = false;
    string idnewpage;
    int idpage;
    decimal? iditem;
    public string? sumPrice;
    public string? countHos;
    public string? countPerson;
    public string username;
    private int PageSize = 5; // Items per page
    private int CurrentPage = 1; // Current page

    public async Task DownloadPdf(string withdrawalDoc)
    {
        // URL of the PDF file to download
        var pdfUrl = withdrawalDoc;

        // JavaScript code to trigger the download
        var fileName = withdrawalDoc;
        if (ConfigureCore.SiteName == "BT")
        {
            fileName = fileName.Split("https://mmsuat.demotoday.net/fees-api/Files/Module8/RequestForm/")[1];
        }
        else if (ConfigureCore.SiteName == "SSO")
        {
            fileName = fileName.Split("https://mmsuat.sso.go.th/fees-api/Files/Module8/RequestForm/")[1];
        }
        var jsCode = $@"var link = document.createElement('a');
                      link.href = '{pdfUrl}';
                      link.target = '_blank';
                      link.download = '{fileName}'; // You can specify the desired file name here
                      link.click();";

        await JsRuntime.InvokeVoidAsync("eval", jsCode);
    }

    private void UpdateDisplayedItems()
    {
        todos = todosmodal.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
    }

    private void ChangePageSize(int size)
    {
        PageSize = size;
        CurrentPage = 1; // Reset to the first page when changing page size
        UpdateDisplayedItems();
    }

    private void ChangePage(PaginationEventArgs page)
    {
        CurrentPage = page.Page;
        UpdateDisplayedItems();
    }

    public void oncallindex(int usepage, decimal? id)
    {
        this.idpage = usepage;
        this.iditem = id;

    }

    public async Task backpage(int usepage, int id)
    {
        this.idpage = usepage;
    }

    private void HandleOk1(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible1 = false;
    }


    private async Task funcheckhos(string hoscode, bool checkeds)
    {
        if (checkeds == true)
        {
            foreach (var item in GetPerson.Where(x => x.Hospitalcode == hoscode).ToList())
            {
                item.ischeck = true;
            }

        }
        else
        {
            checkallhos = false;
            foreach (var item in GetPerson.Where(x => x.Hospitalcode == hoscode).ToList())
            {
                item.ischeck = false;
            }
        }
    }


    private void funcheckallhos()
    {
        if (checkallhos == true)
        {
            foreach (var item in GetPerson)
            {
                item.ischeck = true;
            }
            if(HospByWitdraw != null)

            {
                foreach (var item2 in HospByWitdraw)
                {
                    item2.ischeck = true;
                }
            }


        }
        else
        {
            foreach (var item in GetPerson)
            {
                item.ischeck = false;
            }
            if (HospByWitdraw != null)

            {
                foreach (var item2 in HospByWitdraw)
                {
                    item2.ischeck = false;
                }
            }
        }
    }
    private async Task gotoAiPage(string hoscode, string hosname, string withdrawno)
    {
        navigationManager.NavigateTo($"{ConfigureCore.redirectFeesAdmin}/promoteHealth/reportsAI?Page=2&HoscodeH={hoscode}&HosnameH={hosname}&WithdrawnoH={withdrawno}");
    }
    
    private void HandleCancel1(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible1 = false;
    }
    public bool isloading = false;
    string txtValue { get; set; } = "dasdasdas";

    List<Todo> todos = new List<Todo>();
    List<Todo> todosmodal = new List<Todo>();
    public async Task goEdit(int item)
    {
        await IndexPage.InvokeAsync(item);
    }

    RenderFragment _audioIcon =@<Icon Type="audio" Theme="outline" Style="color: #1890ff" />;

    public async Task goView(int item)
    {
        await IndexPage.InvokeAsync(item);
    }

    public async Task goBack(int item)
    {
        await IndexPage.InvokeAsync(item);
    }
    public async Task gotodetail(string item)
    {
        idnewpage = item;
        List<AaiHealthCheckupHViewModel> GetPersonfirst = new List<AaiHealthCheckupHViewModel>();
        GetPersonfirst = await PaymentOrderListService.GetPerson(InjectwdNo, item);

        foreach (var item1 in GetPersonfirst)
        {
            if (GetPerson.FirstOrDefault(x => x.CheckupId == item1.CheckupId) == null)
            {
                if (checkallhos == true)
                {
                    item1.ischeck = true;    
                }
                if (HospByWitdraw.Where(x => x.HospCode == item).FirstOrDefault().ischeck == true)
                {
                    if (item1.Hospitalcode == item)
                    {
                        item1.ischeck = true;
                    }
                }
                GetPerson.Add(item1);
            }
        }
        this.idpage = 0;
        _visible = true;
        StateHasChanged();
    }
    private void HandleOk(MouseEventArgs e)
    {
        Console.WriteLine(e);
        this.idpage = 0;
        _visible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        this.idpage = 0;
        _visible = false;
    }

    protected override async Task OnInitializedAsync()
    {
        isloading = true;
        StateHasChanged();
        sumPrice = SumPrice?.ToString("N0");
        HospitalList = await PaymentOrderListService.GetByWithdrawalNo(InjectwdNo);
        countHos = HospitalList.HospitalCount?.ToString("N0");
        countPerson = HospitalList.PersonCount?.ToString("N0");
        HospByWitdraw = await PaymentOrderListService.GetHospByWitdraw(InjectwdNo);
        foreach(var item in HospByWitdraw)
        {
            item.Displayprice = $"{item.SumPrice?.ToString("N0")} / {item.SumPriceAll?.ToString("N0")}";
            item.Displayperson = $"{item.PersonCount?.ToString("N0")} / {item.PersonCountAll?.ToString("N0")}";
        }
        UpdateDisplayedItems();
        username = await _localstorage.GetItemAsync<string>("username");
        //username = "system";
        isloading = false;
        StateHasChanged();


    }

    public async void callback(string key)
    {
        Console.WriteLine(key);
    }
    public async Task addItem()
    {
        isloading = true;
        if (HospByWitdraw != null)
        {
            if (checkallhos == true)
            {
                foreach (var item in HospByWitdraw)
                {
                    item.ischeck = true;
                    if (GetPerson.FirstOrDefault(x => x.Hospitalcode == item.HospCode) == null)
                    {
                        List<AaiHealthCheckupHViewModel> GetPersonfirst = new List<AaiHealthCheckupHViewModel>();
                        GetPersonfirst = await PaymentOrderListService.GetPerson(InjectwdNo, item.HospCode);
                        foreach (var item1 in GetPersonfirst)
                        {
                            if (GetPerson.FirstOrDefault(x => x.CheckupId == item1.CheckupId) == null)
                            {
                                if (checkallhos == true)
                                {
                                    item1.ischeck = true;
                                }
                                if (HospByWitdraw.Where(x => x.HospCode == item.HospCode).FirstOrDefault().ischeck == true)
                                {
                                    if (item1.Hospitalcode == item.HospCode)
                                    {
                                        item1.ischeck = true;
                                    }
                                }
                                GetPerson.Add(item1);
                            }
                        }
                    }
                }
            }
            else
            {
                foreach (var item in HospByWitdraw)
                {
                    if (item.ischeck == true)
                    {
                        if (GetPerson.FirstOrDefault(x => x.Hospitalcode == item.HospCode) == null)
                        {
                            List<AaiHealthCheckupHViewModel> GetPersonfirst = new List<AaiHealthCheckupHViewModel>();
                            GetPersonfirst = await PaymentOrderListService.GetPerson(InjectwdNo, item.HospCode);
                            foreach (var item1 in GetPersonfirst)
                            {
                                if (GetPerson.FirstOrDefault(x => x.CheckupId == item1.CheckupId) == null)
                                {
                                    if (checkallhos == true)
                                    {
                                        item1.ischeck = true;
                                    }
                                    if (HospByWitdraw.Where(x => x.HospCode == item.HospCode).FirstOrDefault().ischeck == true)
                                    {
                                        if (item1.Hospitalcode == item.HospCode)
                                        {
                                            item1.ischeck = true;
                                        }
                                    }
                                    GetPerson.Add(item1);
                                }
                            }
                        }
                    }
                }
            }
            data.HospByWitdraw = HospByWitdraw;
            data.HospitalList = HospitalList;
            data.usernameupdate = username;
            data.InjectwdNo = InjectwdNo;
            data.person = GetPerson.Where(x => x.ischeck == true).ToList();
            var res = await PaymentOrderListService.Save(data);

            if (res == "success")
            {
                isloading = false;
                StateHasChanged();
                await Swal.FireAsync(
                      "บันทึกข้อมูลสำเร็จ",
                      null,
                      SweetAlertIcon.Success
                      );

            }
            else
            {
                isloading = false;
                StateHasChanged();
                await Swal.FireAsync(
                      "บันทึกข้อมูลไม่สำเร็จ",
                      null,
                      SweetAlertIcon.Error
                      );

            }
        }
        else
        {
            isloading = false;
            StateHasChanged();
            await Swal.FireAsync(
                  "ไม่มีโรงบาลให้ดำเนินการส่ง",
                  null,
                  SweetAlertIcon.Warning
                  );

        }

    }
    public class Todo
    {
        public int patientall { get; set; }
        public int Id { get; set; }
        public string title { get; set; }
        public int code { get; set; }
        public int priceall { get; set; }
        public List<model> table = new List<model>();

    }
    public class model
    {
        public int Id { get; set; }
        public string identification_number { get; set; }
        public string fullname { get; set; }
        public int numberofchecklists { get; set; }
        public int toppick { get; set; }

    }
}

