@page "/promoteHealth/index"
@using System.IdentityModel.Tokens.Jwt;
@using Blazored.LocalStorage;
@using sso.mms.helper.PortalModel;
@using sso.mms.login.Services;
@using sso.mms.login.ViewModels;
@using sso.mms.portal.admin.Pages.Navbar

@inject NavigationManager NavigationManager
@inject ReadTokenService readTokenService
@inject UserRoleService userRoleService
@inject ILocalStorageService _localstorage;
@inject IconService iconService


<LayoutIndex ShortToken="@ShortToken" Page="promoteHealth">

    @if (usepageAssignHealthChecklist == 1)
    {
        <AssignHealthChecklistIndex IndexPage="@((args)=>oncallindex(args.Item1, args.Item2, args.Item3))" />
    }
    else if (usepageAssignHealthChecklist == 2)
    {
        <AssignHealthChecklistDetail IndexPage="@((args)=>oncall(args.Item1, args.Item2, args.Item3, args.Item4))" Edit=@edit Year=@yearindex />
    }
    else if (usepageAssignHealthChecklist == 3)
    {
        <AssignHealthChecklistEditView IndexPage="@((args)=>oncall2(args.Item1, args.Item2))" Type=@type Year=@year Checklistid=@checklistid />
    }
</LayoutIndex>



@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? ShortToken { get; set; } = "";

    public int usepageAssignHealthChecklist = 1;
    public bool edit;
    public string type;
    public string? year;
    public string yearindex;
    public decimal? checklistid;


    public void oncall2(int usepage, string type)
    {
        this.usepageAssignHealthChecklist = usepage;
        this.type = type;

    }

    public void oncallindex(int usepage, bool edit, string year)
    {
        this.usepageAssignHealthChecklist = usepage;
        this.edit = edit;
        this.yearindex = year;

    }
    public void oncall(int usepage, string type, string? year, decimal? checklistid)
    {
        this.usepageAssignHealthChecklist = usepage;
        this.type = type;
        this.year = year;
        this.checklistid = checklistid;

    }
    public async Task Indexpage(int usepage)
    {
        this.usepageAssignHealthChecklist = usepage;
    }
    private ResponseShortToken responseShortToken { get; set; } = null!;

    public UserRole userRole;

    protected override async Task OnInitializedAsync()
    {
        responseShortToken = await readTokenService.ReadToken(ShortToken!);

        Console.WriteLine("responseShortToken", responseShortToken);

        if (responseShortToken != null)
        {
            JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();
            JwtSecurityToken jwt = tokenHandler.ReadJwtToken(responseShortToken.accessToken);
            var t = jwt.Payload.ToList();
            KeyValuePair<string, object>
    result = t.FirstOrDefault(pair => pair.Key == "preferred_username");
            var username = result.Value.ToString();

            userRole = await userRoleService.GetRoleByUserName(username);
            await _localstorage.SetItemAsync("userRole", userRole);

        }
    }
}
