@page "/promoteHealth/reportsAI"
@using System.IdentityModel.Tokens.Jwt;
@using Blazored.LocalStorage;
@using sso.mms.helper.PortalModel;
@using sso.mms.login.Services;
@using sso.mms.login.ViewModels;
@using sso.mms.portal.admin.Pages.Navbar

@inject NavigationManager NavigationManager
@inject ReadTokenService readTokenService
@inject UserRoleService userRoleService
@inject ILocalStorageService _localstorage;
@inject IconService iconService


<LayoutIndex ShortToken="@ShortToken" Page="promoteHealth">

    @if (usepagePaymentOrdersList == 1)
    {
        <ReportsPromoteAIListIndex IndexPage="@((args)=>oncall2(args.Item1, args.Item2))" />
    }
    else if (usepagePaymentOrdersList == 2)
    {
        <ReportsPromoteAIListDetail IndexPage="@Indexpage" WithdrawNo="@withdrawNo" WithdrawnoH="@WithdrawnoH" HoscodeH="@HoscodeH" HosnameH="@HosnameH" />
    }

</LayoutIndex>



@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? ShortToken { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery(Name = "Page")]
    public int PageHeader { get; set; } = 0;

    [Parameter]
    [SupplyParameterFromQuery(Name = "HosnameH")]
    public string HosnameH { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery(Name = "HoscodeH")]
    public string HoscodeH { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery(Name = "WithdrawnoH")]
    public string WithdrawnoH { get; set; } = "";

    public int usepagePaymentOrdersList = 1;

    public async Task Indexpage(int usepage)
    {
        this.usepagePaymentOrdersList = usepage;
    }
    private ResponseShortToken responseShortToken { get; set; } = null!;

    public UserRole userRole;

    public string withdrawNo = "";

    protected override async Task OnInitializedAsync()
    {
        responseShortToken = await readTokenService.ReadToken(ShortToken!);

        Console.WriteLine("responseShortToken", responseShortToken);

        if (responseShortToken != null)
        {
            JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();
            JwtSecurityToken jwt = tokenHandler.ReadJwtToken(responseShortToken.accessToken);
            var t = jwt.Payload.ToList();
            KeyValuePair<string, object> result = t.FirstOrDefault(pair => pair.Key == "preferred_username");
            var username = result.Value.ToString();

            userRole = await userRoleService.GetRoleByUserName(username);
            await _localstorage.SetItemAsync("userRole", userRole);

        }
        if (PageHeader != 0)
        {
            this.usepagePaymentOrdersList = PageHeader;
        }
    }

    public void oncall2(int usepage, string withdrawNo)
    {
        this.usepagePaymentOrdersList = usepage;
        this.withdrawNo = withdrawNo;

    }

}
