@page "/Hemodialysis/RequestingWithdrawal"
@using System.IdentityModel.Tokens.Jwt;
@using Blazored.LocalStorage;
@using sso.mms.helper.PortalModel;
@using sso.mms.login.Services;
@using sso.mms.login.ViewModels;
@using sso.mms.portal.admin.Pages.Navbar
@using sso.mms.fees.admin.Shared.Hemodialysis.RequestingWithdrawal
@inject NavigationManager NavigationManager
@inject ReadTokenService readTokenService
@inject UserRoleService userRoleService
@inject ILocalStorageService _localstorage; 
@inject IconService iconService


<LayoutIndex ShortToken="@ShortToken" Page="Hemodialysis">
    @if (usepage == 1)
    {
        <RequestingWithdrawalIndex IndexPage="Indexpage" Page="usepage" GetbyId="GetById" />
    }
    @if(usepage == 2)
    {
        <RequestingWithdrawalIndex_1 IndexPage="Indexpage" Page="usepage" Id="Id"/>
    }
    @if (usepage == 3)
    {
        <RequestingWithdrawalIndex_2 IndexPage="Indexpage" Page="usepage" Id="Id" />
    }
    @if(usepage == 4)
    {
        <RequestingWithdrawalIndex_3 IndexPage="Indexpage" Page="usepage"></RequestingWithdrawalIndex_3>
    }


</LayoutIndex>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? ShortToken { get; set; } = "";
    
    public int usepage = 1;
    public int page;
    public int Id;
    public decimal reserveId = 0;
    
    public async Task Indexpage(int usepage)
    {
        this.usepage = usepage;

    }
    public async Task GetById(int id)
    {
        this.Id = id;
    }
    private ResponseShortToken responseShortToken { get; set; } = null!;

    public UserRole userRole;


    protected override async Task OnInitializedAsync()
    {
        responseShortToken = await readTokenService.ReadToken(ShortToken!);

        Console.WriteLine("responseShortToken", responseShortToken);

        if (responseShortToken != null)
        {

            JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();
            JwtSecurityToken jwt = tokenHandler.ReadJwtToken(responseShortToken.accessToken);
            var t = jwt.Payload.ToList();
            KeyValuePair<string, object> result = t.FirstOrDefault(pair => pair.Key == "preferred_username");
            var username = result.Value.ToString();
            //userRole = await userRoleService.GetRoleByUserName(username);
            //await _localstorage.SetItemAsync("userRole", userRole);

        }
    }

}
