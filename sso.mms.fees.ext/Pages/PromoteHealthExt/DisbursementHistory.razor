@page "/promoteHealthExt/disbursementHistory"
@using System.IdentityModel.Tokens.Jwt;
@using Blazored.LocalStorage;
@using sso.mms.helper.PortalModel;
@using sso.mms.login.Services;
@using sso.mms.login.ViewModels;
@using sso.mms.portal.admin.Pages.Navbar


@inject NavigationManager NavigationManager
@inject ReadTokenService readTokenService
@inject UserRoleService userRoleService
@inject ILocalStorageService _localstorage;
@inject IconService iconService


<LayoutIndex ShortToken="@ShortToken" Page="promoteHealthExt">
    @if (usepageDisbursementHistory == 1)
    {
        <DisbursementHistoryIndex IndexPage="@((args)=>oncall(args.Item1, args.Item2, args.Item3))" />
    }
    else if (usepageDisbursementHistory == 2 || usepageDisbursementHistory == 3)
    {
        <DisbursementHistoryDetail IndexPage="@Indexpage" Checktype="@usepageDisbursementHistory" WithdrawalNo="@withdrawalNo" WithdrawalDoc="@withdrawalDoc"/>
    }

</LayoutIndex>



@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? ShortToken { get; set; } = "";

    public string withdrawalNo;
    public int usepageDisbursementHistory = 1;
    public string? withdrawalDoc;
    public async Task Indexpage(int usepage)
    {
        this.usepageDisbursementHistory = usepage;
    }
    private ResponseShortToken responseShortToken { get; set; } = null!;

    public UserRole userRole;

    public void oncall(int usepage, string withdrawalNo, string? withdrawalDoc)
    {
        this.usepageDisbursementHistory = usepage;
        this.withdrawalNo = withdrawalNo;
        this.withdrawalDoc = withdrawalDoc;
    }

    protected override async Task OnInitializedAsync()
    {
        responseShortToken = await readTokenService.ReadToken(ShortToken!);

        Console.WriteLine("responseShortToken", responseShortToken);

        if (responseShortToken != null)
        {
            JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();
            JwtSecurityToken jwt = tokenHandler.ReadJwtToken(responseShortToken.accessToken);
            var t = jwt.Payload.ToList();
            KeyValuePair<string, object> result = t.FirstOrDefault(pair => pair.Key == "preferred_username");
            var username = result.Value.ToString();

            //userRole = await userRoleService.GetRoleByUserName(username);
            //await _localstorage.SetItemAsync("userRole", userRole);

        }
    }

}