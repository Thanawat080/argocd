@page "/promoteHealthExt/determinedoctor"
@using System.IdentityModel.Tokens.Jwt;
@using Blazored.LocalStorage;
@*@using sso.mms.fees.ext.Providers.PromoteHealth.DetermineReferenceValue;*@
@using sso.mms.helper.PortalModel;
@using sso.mms.login.Services;
@using sso.mms.login.ViewModels;
@using sso.mms.portal.admin.Pages.Navbar

@*@inject DetermineReferenceServices determineReferenceServices*@


@inject NavigationManager NavigationManager
@inject ReadTokenService readTokenService
@inject UserRoleService userRoleService
@inject ILocalStorageService _localstorage;
@inject IconService iconService


<LayoutIndex ShortToken="@ShortToken" Page="promoteHealthExt">
    @if (usepageDetermineReferenceValue == 1)
    {
        <DetermineDoctorIndex IndexPage="@((args)=>oncall(args.Item1, args.Item2))" />
    }
    else if (usepageDetermineReferenceValue == 2)
    {
        <DetermineDoctorValue IndexPage="@Indexpage" CheckListMID="id"/>
    }
</LayoutIndex>



@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? ShortToken { get; set; } = "";
    public string? getDetermineService { get; set; } = "";


    public int usepageDetermineReferenceValue = 1;
    public decimal id;
    public string maintitle;

    public async Task Indexpage(int usepage)
    {
        this.usepageDetermineReferenceValue = usepage;
    }
    private ResponseShortToken responseShortToken { get; set; } = null!;

    public UserRole userRole;

    public void oncall(int usepage, decimal id)
    {
        this.usepageDetermineReferenceValue = usepage;
        this.id = id;

    }
    protected override async Task OnInitializedAsync()
    {
        responseShortToken = await readTokenService.ReadToken(ShortToken!);
        //var result1 = await determineReferenceServices.GetCheckListM();


        Console.WriteLine("responseShortToken", responseShortToken);

        if (responseShortToken != null)
        {
            var HospitalMCode = responseShortToken.HospitalMCode;
            var HospitalMId = responseShortToken.HospitalMId;
            await _localstorage.SetItemAsync("hospitalMId", HospitalMId);
            await _localstorage.SetItemAsync("hospitalMCode", HospitalMCode);
            JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();
            JwtSecurityToken jwt = tokenHandler.ReadJwtToken(responseShortToken.accessToken);
            var t = jwt.Payload.ToList();
            KeyValuePair<string, object> result = t.FirstOrDefault(pair => pair.Key == "preferred_username");
            var username = result.Value.ToString();

            userRole = await userRoleService.GetRoleByUserName(username);
            await _localstorage.SetItemAsync("userRole", userRole);

        }
    }

}