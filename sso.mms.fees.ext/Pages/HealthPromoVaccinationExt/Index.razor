@page "/HealthPromoVaccinationExt/index"
@using System.IdentityModel.Tokens.Jwt;
@using Blazored.LocalStorage;
@using sso.mms.helper.PortalModel;
@using sso.mms.login.Services;
@using sso.mms.login.ViewModels;
@using sso.mms.portal.admin.Pages.Navbar


@inject NavigationManager NavigationManager
@inject ReadTokenService readTokenService
@inject UserRoleService userRoleService
@inject ILocalStorageService _localstorage;
@inject IconService iconService


<LayoutIndex ShortToken="@ShortToken" Page="HealthPromoVaccinationExt">
    @if (usepageHealthPromoVaccinationExt == 1)
    {
        <RecordChecklistIndex IndexPage="@Indexpage" />
    }
    @if (usepageHealthPromoVaccinationExt == 2)
    {
        <RecordChecklistDetail IndexPage="@Indexpage" />
    }
    @if (usepageHealthPromoVaccinationExt == 3)
    {
        <RecordChecklistDetail2 IndexPage="@Indexpage" />
    }
    @if (usepageHealthPromoVaccinationExt == 4)
    {
        <RecordChecklistDetail3 IndexPage="@Indexpage" />
    }
</LayoutIndex>



@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? ShortToken { get; set; } = "";


    public int usepageHealthPromoVaccinationExt = 1;

    public async Task Indexpage(int usepage)
    {
        this.usepageHealthPromoVaccinationExt = usepage;
    }
    private ResponseShortToken responseShortToken { get; set; } = null!;

    public UserRole userRole;


    protected override async Task OnInitializedAsync()
    {
        responseShortToken = await readTokenService.ReadToken(ShortToken!);

        Console.WriteLine("responseShortToken", responseShortToken);

        if (responseShortToken != null)
        {
            JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();
            JwtSecurityToken jwt = tokenHandler.ReadJwtToken(responseShortToken.accessToken);
            var t = jwt.Payload.ToList();
            KeyValuePair<string, object> result = t.FirstOrDefault(pair => pair.Key == "preferred_username");
            var username = result.Value.ToString();

            //userRole = await userRoleService.GetRoleByUserName(username);
            //await _localstorage.SetItemAsync("userRole", userRole);

        }
    }

}
