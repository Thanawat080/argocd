@page "/HealthPromoVaccinationExt/ProactiveVaccinationList"
@using System.IdentityModel.Tokens.Jwt;
@using Blazored.LocalStorage;
@using sso.mms.helper.PortalModel;
@using sso.mms.login.Services;
@using sso.mms.login.ViewModels;
@using sso.mms.portal.admin.Pages.Navbar


@inject NavigationManager NavigationManager
@inject ReadTokenService readTokenService
@inject UserRoleService userRoleService
@inject ILocalStorageService _localstorage;
@inject IconService iconService

@using sso.mms.fees.ext.Shared.HealthPromoVaccinationExt.ProactiveVaccinationList.Step

<LayoutIndex ShortToken="@ShortToken" Page="HealthPromoVaccinationExt">
    @if (usepage == 1)
    {
        <PVLIndex IndexPage="@Indexpage" />
    }
    else if (usepage == 2)
    {
        <PVLUploadList IndexPage="@Indexpage" />
    }
    else if (usepage == 3)
    {
        <PVLEditView IndexPage="@Indexpage" />
    }
    else if (usepage == 4)
    {
        <PVLUploadList_Detail1 IndexPage="@Indexpage" />
    }
    else if (usepage == 5)
    {
        <PVL_STEP2 IndexPage="@Indexpage" />
    }
    else if (usepage == 6)
    {
        <PVL_STEP3 IndexPage="@Indexpage" isOpen="@IsOpen" />
    }

</LayoutIndex>



@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? ShortToken { get; set; } = "";


    public int usepage = 1;
    public bool gotopen = false;

    public async Task Indexpage(int usepage)
    {
        this.usepage = usepage;
    }

    public async Task IsOpen(bool open)
    {
        if (open)
        {
            NavigationManager.NavigateTo("/HealthPromoVaccinationExt/RecordChecklistSubInfo?token=" + ShortToken);
        }
    }
    private ResponseShortToken responseShortToken { get; set; } = null!;

    public UserRole userRole;


    protected override async Task OnInitializedAsync()
    {
        responseShortToken = await readTokenService.ReadToken(ShortToken!);

        Console.WriteLine("responseShortToken", responseShortToken);

        if (responseShortToken != null)
        {
            JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();
            JwtSecurityToken jwt = tokenHandler.ReadJwtToken(responseShortToken.accessToken);
            var t = jwt.Payload.ToList();
            KeyValuePair<string, object> result = t.FirstOrDefault(pair => pair.Key == "preferred_username");
            var username = result.Value.ToString();

            //userRole = await userRoleService.GetRoleByUserName(username);
            //await _localstorage.SetItemAsync("userRole", userRole);

        }
    }

}
