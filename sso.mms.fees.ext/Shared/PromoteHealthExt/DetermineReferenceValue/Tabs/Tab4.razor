@using Blazored.LocalStorage;
@using sso.mms.helper.Utility;
@inject ILocalStorageService _localstorage;
@inject SweetAlertService Swal;

<div class="mms-media-between py-3">
    <div class="mms-txt-headdetail ">รายชื่อผู้วินิจฉัย/อ้างอิง</div>
    <div>
        <Button Type="@ButtonType.Primary" style="padding: 4px 30px" @onclick=@(() => addItem())><i class="fa-solid fa-circle-plus"></i> &nbsp; เพิ่ม</Button>
    </div>
</div>

<Table DataSource='ListOfDoctor.Where(x =>x.DeleteStatus != "D")' TItem="AaiHealthSetRefDoctorMView" RowClassName="@(_=>"editable-row")" Bordered ScrollX="1000">
    <ChildContent Context="data">
        @{
            var setStyle = "";
            if (data.Delete == false)
            {
                setStyle = "text-align: center;";
            }
            else
            {
                setStyle = "text-align: center; background-color: #DCDCDC;";
            }
        }
        <Column TData="string" Title="ลำดับ" Width="8%" Style="@setStyle">
            <div class="d-flex justify-content-center">
            @if (data.Delete == true)
            {
                <img class="mx-2" src="helper_shared/icon_sso/x-mark.png" width="20px" height="20px" />
            }
            @String.Format("{0:d}", ListOfDoctor.Where(x =>x.DeleteStatus != "D").ToList().IndexOf(data) + 1)
            </div>
        </Column>

        <Column TData="string" Title="ชื่อ - นามสกุล" Style="@setStyle" Width="43%">
            @if (data.Edit)
            {
                <Input Type="text" @bind-Value="data.DoctorName" AutoFocus />
            }
            else if (data.SetRefDoctorId == 0)
            {
                <Input Type="text" @bind-Value="data.DoctorName" AutoFocus />
            }
            else
            {
                    <div class="editable-cell-value-wrap" style="padding-right:24px">
                        @data.DoctorName
                    </div>
            }
        </Column>
        <Column TData="string" Style="@setStyle" Width="6%">
            <div class="mms-media-center">

                @if(data.Delete == true)
                {
                    <img class="mx-2" src="helper_shared/PortalAdminImage/edit.png" style="width:24px;height:24px; "  />
                    <img class="mx-2" src="helper_shared/icon_sso/delete.png" style="width:24px;height:24px;" />
                }
                else
                {
                    <img class="mx-2" title="แก้ไข" src="helper_shared/PortalAdminImage/edit.png" style="width:24px;height:24px; cursor:pointer;" @onclick="(() => data.Edit = true)" />
                    <img class="mx-2" title="ลบ" src="helper_shared/icon_sso/delete.png" style="width:24px;height:24px; cursor:pointer;" @onclick=@(() => deleteItem(data.SetRefDoctorId, @String.Format("{0:d}", ListOfDoctor.ToList().IndexOf(data)))) />
                }

            </div>
        </Column>

    </ChildContent>
</Table>
@if (DialogIsOpen)
{
    <ModalDelete OnClose="@OnDialogClose" title="ต้องการลบ" description="ต้องการลบรายชื่อผู้วินิจฉัย/อ้างอิงหรือไม่">
    </ModalDelete>
}
@if (isloading == true)
{
    <style>
        body {
            overflow: hidden;
        }</style>

    <LoadingPage></LoadingPage>
}
@code {

    int? editIdname;
    int? editId;
    List<ItemDataName> listOfDataName = new List<ItemDataName>();
    [Parameter]
    public List<AaiHealthSetRefDoctorMView> ListOfDoctor { get; set; }

    [Parameter]
    public decimal ChecklistId { get; set; }


    public string hosmCode { get; set; }
    public string username { get; set; }
    private bool DialogIsOpen = false;
    public bool isloading = false;
    public decimal doctorId { get; set; }



    protected override async Task OnInitializedAsync()
    {
        hosmCode = await _localstorage.GetItemAsync<String>("hospitalMCode");
        username = await _localstorage.GetItemAsync<String>("username");



    }

    void startEditName(decimal id)
    {
        editIdname = Decimal.ToInt32(id);
    }

    public async void addItem()
    {
        ListOfDoctor.Add(new AaiHealthSetRefDoctorMView()
            {
                SetRefDoctorId = 0,
                DoctorName = null,
                DeleteStatus = "A",
                CreateDate = DateTime.Now,
                CreateBy = username,
                UpdateDate = DateTime.Now,
                UpdateBy = username,
                HospitalCode = hosmCode,
                ChecklistId = ChecklistId,
                Edit = false,
                Delete = false,

            });

    }

    public async void deleteItem(decimal Id, string index)
    {
        if (Id == 0)
        {
            int index1 = Int32.Parse(index);
            var itemToRemove = ListOfDoctor[index1];
            ListOfDoctor.Remove(itemToRemove);
        }
        else
        {
            doctorId = Id;
            DialogIsOpen = true;
            StateHasChanged();
            //ListOfDoctor.FirstOrDefault(f => f.SetRefDoctorId == Id).DeleteStatus = "D";
        }
    }

    private async Task OnDialogClose(bool isOk)
    {
        if (isOk)
        {
            isloading = true;
            ListOfDoctor.FirstOrDefault(f => f.SetRefDoctorId == doctorId).Delete = true;

            isloading = false;

        }
        DialogIsOpen = false;
        StateHasChanged();
    }
    public class ItemDataName
    {
        public int Id { get; set; }
        public string name { get; set; }

    };
}
