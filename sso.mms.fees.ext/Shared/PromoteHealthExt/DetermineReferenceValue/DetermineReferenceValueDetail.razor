@using System.Text.Json;
@using sso.mms.fees.ext.Shared.PromoteHealthExt.DetermineReferenceValue.Tabs;
@using sso.mms.fees.ext.Providers.PromoteHealth.DetermineReferenceValue;
@inject DetermineReferenceServices determineReferenceServices
@inject ModalService _modalService
@inject SweetAlertService Swal;

@using Blazored.LocalStorage;
@inject ILocalStorageService _localstorage;

<style>
    html, body {
        overflow-x: visible;
    }
    .ant-select:not(.ant-select-customize-input) .ant-select-selector {
        border-radius: 6px;
        height: 40px
    }

    .ant-tabs-tab {
        position: relative;
        display: inline-flex;
        align-items: center;
        padding: 0;
        font-size: 14px;
        background: transparent;
        border: 0;
        outline: none;
        cursor: pointer;
    }
</style>

<div class="site-layout-background" style="padding: 24px;">
    <div class="mms-nav-title">
        <div class="mms-text-title px-4 py-3">ค่าบริการทางการแพทย์ส่งเสริมสุขภาพและป้องกันโรค</div>
    </div>
    <div class="container py-4">
       
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item " style="cursor: pointer;" aria-current="page" @onclick="()=> goBack(1)">
                    <span class="breadcum-sucress py-2">กำหนดค่าอ้างอิงผลการตรวจ</span>
                </li>
                <li class="breadcrumb-item" aria-current="page">
                    <span class="breadcum-process py-2">@MainTitle</span>
                </li>
            </ol>
        </nav>
        <hr style="width:100%" />

        @*  <div class="mms-media-end">

        <Space Direction="@DirectionVHType.Vertical" Class="mms-btn-serch">
        <SpaceItem>
        <Search Placeholder="ข้อมูลที่ต้องการค้นหา.." EnterButton="true" />
        </SpaceItem>
        </Space>


        </div>*@

        <div class="mms-txt-headdetail pb-3 pt-3">@MainTitle</div>
        <Tabs @bind-ActiveKey="@activeKey" Animated>

            <TabPane Tab="รายการที่กำหนด" Key="1">
                <Tab1 ListDataCheckListDAndCheckListCfg="listDataCheckListDAndCheckListCfg"></Tab1>
            </TabPane>
            @if (MainTitle != "ตรวจน้ำตาลในเลือด")
            {
                <TabPane Tab="รายการที่สามารถเพิ่มเติมได้" Key="2">
                    <Tab2 ListDataCheckListDAndCheckListCfg="listDataCheckListDAndCheckListCfg"></Tab2>
                </TabPane>
            }
            <TabPane Tab="ตั้งค่าชื่อรายการตรวจ" Key="3">
                <Tab3 ChecklistDAndSetRefNickName="ChecklistDAndSetRefNickName"></Tab3>
            </TabPane>
            @*<TabPane Tab="ตั้งค่าชื่อผู้วินิจฉัย/อ้างอิง" Key="4">
                <Tab4 ListOfDoctor="listDataDoctor" ChecklistId="ChecklistMId"></Tab4>
            </TabPane>*@

        </Tabs>
        <br />
        <div class="mms-media-end">
            <Button Class="ant-btn-distable" Style="margin-right: 1%" @onclick=@(() => goBack(1))><i class="fa-solid fa-circle-chevron-left"></i> &nbsp; ย้อนกลับ</Button>
            <Button Type="@ButtonType.Primary" Style="padding: 4px 30px" @onclick=@(() => save())><i class="fa-regular fa-floppy-disk"></i> &nbsp; บันทึก</Button>
        </div>
    </div>
</div>

@if (isloading == true)
{
    <style>
        body {
            overflow: hidden;
        }</style>

    <LoadingPage></LoadingPage>
}


@if (DialogIsOpen)
{
    <ModalSaveChange OnClose="@OnDialogClose" title="ยืนยันการบันทึกข้อมูลใช่หรือไม่" description="">
    </ModalSaveChange>
}
@code {

    [Parameter]
    public EventCallback<int> IndexPage { get; set; }

    [Parameter]
    public decimal ChecklistMId { get; set; }

    [Parameter]
    public string MainTitle { get; set; }
    public bool isloading = false;
    string activeKey { get; set; } = "1";
    List<menu> todos = new List<menu>();
    List<AaiHealthSetRefChecklistCfgView> setRefList = new List<AaiHealthSetRefChecklistCfgView>();
    AaiHealthSetRefChecklistCfgView setRef = new AaiHealthSetRefChecklistCfgView();
    ManageSetRefNicknameCfgView data = new ManageSetRefNicknameCfgView();
    List<CheckListDAndManageChecklistCfg> listDataCheckListDAndCheckListCfg = new List<CheckListDAndManageChecklistCfg>();
    List<AaiHealthChecklistD> AllDataCheckListD = new List<AaiHealthChecklistD>();
    List<AaiHealthCheckListDView> CheckListDView = new List<AaiHealthCheckListDView>();
    public List<AaiHealthSetRefNicknameCfg> listDataSetRefNickName { get; set; }
    List<ChecklistDAndSetRefNickNameView> ChecklistDAndSetRefNickName = new List<ChecklistDAndSetRefNickNameView>();
    SaveDetermineReferenceValue savemodel = new SaveDetermineReferenceValue();
    public List<AaiHealthSetRefDoctorMView> listDataDoctor { get; set; }
    public bool checkSave { get; set; } = true;

    public string hosmCode { get; set; } = "0";
    public string username { get; set; }
    private bool DialogIsOpen = false;

    public async Task goBack(int item)
    {
        await IndexPage.InvokeAsync(item);
    }


    public async Task goEdit(int item)
    {
        await IndexPage.InvokeAsync(item);
    }

    private async Task OnDialogClose(bool isOk)
    {
        if (isOk)
        {
            isloading = true;

            foreach (var item in savemodel.saveconfig)
            {
                item.CheckListCfgView = item.CheckListCfgView.OrderBy(w => w.StartAge).ToList();
                for (var i = 0; i < item.CheckListCfgView.Count(); i++)
                {
                    if (i == 0)
                    {
                        continue;
                    }
                    else
                    {
                        if (item.CheckListCfgView[i - 1].EndAge < item.CheckListCfgView[i].StartAge)
                        {
                            if(item.CheckListCfgView[i].StartAge < item.CheckListCfgView[i].EndAge)
                            {
                                checkSave = true;
                                continue;
                            }

                            else
                            {

                                isloading = false;
                                checkSave = false;
                                StateHasChanged();
                                await Swal.FireAsync(
                                $"การกำหนดช่วงอายุในหัวข้อ {item.ChecklistDtName} ไม่ถูกต้อง",
                                null,
                                SweetAlertIcon.Error
                                );

                                break;
                            }

                        }

                        else if (item.CheckListCfgView[i - 1].EndAge >= item.CheckListCfgView[i].StartAge)
                        {
                            if (item.CheckListCfgView[i - 1].Delete == true)
                            {
                                continue;
                            }

                            else
                            {
                                if(item.CheckListCfgView[i - 1].Sex != item.CheckListCfgView[i].Sex)
                                {
                                    if (item.CheckListCfgView[i].StartAge < item.CheckListCfgView[i].EndAge)
                                    {
                                        checkSave = true;
                                        continue;
                                    }
                                    else
                                    {
                                        isloading = false;
                                        checkSave = false;
                                        StateHasChanged();
                                        await Swal.FireAsync(
                                        $"การกำหนดช่วงอายุในหัวข้อ {item.ChecklistDtName} ไม่ถูกต้อง",
                                        null,
                                        SweetAlertIcon.Error
                                        );

                                        break;
                                    }
                                }
                                else
                                {
                                    isloading = false;
                                    checkSave = false;
                                    StateHasChanged();
                                    await Swal.FireAsync(
                                    $"การกำหนดช่วงอายุในหัวข้อ {item.ChecklistDtName} ไม่ถูกต้อง",
                                    null,
                                    SweetAlertIcon.Error
                                    );

                                    break;
                                }
                                
                            }
                        }
                       
                    }
                }
                if(checkSave == false)
                {
                    break;
                }
            }

            if (checkSave == true)
            {
                var res = await determineReferenceServices.SaveAndUpdate(savemodel);
                if (res == "success")
                {
                    isloading = false;
                    StateHasChanged();
                    await Swal.FireAsync(
                          "บันทึกข้อมูลสำเร็จ",
                          null,
                          SweetAlertIcon.Success
                          );
                    await IndexPage.InvokeAsync((1));
                }
                else
                {
                    isloading = false;
                    StateHasChanged();
                    await Swal.FireAsync(
                          "บันทึกข้อมูลไม่สำเร็จ",
                          null,
                          SweetAlertIcon.Error
                          );

                }
            }

        }
        DialogIsOpen = false;
    }

    public async Task save()
    {

        isloading = true;
        DialogIsOpen = true;
        // make model for save

        //savemodel.savedoctor = listDataDoctor;
        savemodel.saveconfig = listDataCheckListDAndCheckListCfg;
        savemodel.savenickname = ChecklistDAndSetRefNickName;
        savemodel.username = username;


        //var res = await determineReferenceServices.SaveAndUpdate(savemodel);


        isloading = false;

        StateHasChanged();

    }


    protected override async Task OnInitializedAsync()
    {

        isloading = true;
        StateHasChanged();
        hosmCode = await _localstorage.GetItemAsync<String>("hospitalMCode");
        username = await _localstorage.GetItemAsync<String>("username");
        //change hospitalMId to hospitalMcode
        listDataDoctor = await determineReferenceServices.GetRefDoctor(ChecklistMId, hosmCode);

        AllDataCheckListD = await determineReferenceServices.GetCheckListD(ChecklistMId);

        data.HospitalCode = hosmCode;
        //
        foreach (var item in AllDataCheckListD)
        {
            AaiHealthCheckListDView dataToAdd = new AaiHealthCheckListDView
                {
                    ChecklistDtId = item.ChecklistDtId,
                    ChecklistDtName = item.ChecklistDtName,
                    ChecklistId = item.ChecklistId,
                    IsOption = item.IsOption,
                    ChecklistDtStatus = (item.ChecklistDtStatus == "A" ? true : false),
                    CreateBy = username,
                    CreateDate = DateTime.Now,
                    UpdateDate = item.UpdateDate,
                    UpdateBy = username
                };
            CheckListDView.Add(dataToAdd);
        }
        data.ChecklistD = CheckListDView;
        listDataSetRefNickName = await determineReferenceServices.GetSetRefNickName(data);

        listDataCheckListDAndCheckListCfg = await determineReferenceServices.GetOptionTabs(ChecklistMId, hosmCode);
        foreach (var data in listDataCheckListDAndCheckListCfg)
        {
            data.CheckListCfgView = data.CheckListCfgView.OrderBy(w => w.StartAge).ToList();
        }


        if (listDataSetRefNickName.Count() > 0)
        {
            foreach (var itemd in AllDataCheckListD)
            {
                var res = listDataSetRefNickName.Where(x => x.ChecklistDId == itemd.ChecklistDtId).FirstOrDefault();

                // map model
                ChecklistDAndSetRefNickNameView value = new ChecklistDAndSetRefNickNameView();
                modelnickname nick = new modelnickname();
                nick.SetRefNnId = res.SetRefNnId;
                nick.HospitalCode = res.HospitalCode;
                nick.ChecklistDId = res.ChecklistDId;
                nick.SetRefName = res.SetRefName;
                nick.UpdateDate = DateTime.Now;
                nick.UpdateBy = username;

                // send model
                value.nickname = nick;
                value.ChecklistDtId = itemd.ChecklistDtId;
                value.ChecklistDtName = itemd.ChecklistDtName;
                value.IsOption = itemd.IsOption;
                value.ChecklistDtStatus = itemd.ChecklistDtStatus;

                ChecklistDAndSetRefNickName.Add(value);
            }
        }

        isloading = false;
        StateHasChanged();


    }

}
