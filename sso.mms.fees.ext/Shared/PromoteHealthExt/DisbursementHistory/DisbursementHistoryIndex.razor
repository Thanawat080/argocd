@using Blazored.LocalStorage;
@using sso.mms.fees.ext.Providers.PromoteHealth.DisbursementHistory;
@inject ModalService _modalService
@inject DisbursementHistoryServices disbursementHistoryServices
@inject ILocalStorageService _localstorage;


<div class="site-layout-background" style="padding: 24px;">
    <div class="mms-nav-title">
        <div class="mms-text-title px-4 py-3">ค่าบริการทางการแพทย์ส่งเสริมสุขภาพและป้องกันโรค</div>
    </div>
    <div class="container py-4">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item" aria-current="page">
                    <span class="breadcum-process py-2">ประวัติการเบิกจ่าย</span>
                </li>
            </ol>
        </nav>
        <hr style="width:100%" />
        
       
        <div class="mms-media-end">

            <Space Direction="@DirectionVHType.Vertical" Class="mms-btn-serch">
                <SpaceItem>
                    <Search Placeholder="ข้อมูลที่ต้องการค้นหา.." EnterButton="true" />
                </SpaceItem>
            </Space>

            
        </div>


        <Table DataSource="listWithdrawal" TItem="WithdrawalView" RowClassName="@(_=>"editable-row")" Bordered ScrollX="1000">
            <ChildContent Context="data">
                <Column TData="string" Title="ลำดับ" Width="10%" Style="text-align:center;">
                    @String.Format("{0:d}", listWithdrawal.IndexOf(data) + 1)
                </Column>
                <Column TData="string" Title="งวดการจ่าย" Width="40%" Style="text-align:center;">
                    @data.WithdrawalNo
                </Column>
                <Column TData="string" Title="ยอดเงินรวม(บาท)" Width="20%" Style="text-align:center;">
                    @data.SumChecklistPrice?.ToString("N0")
                </Column>

                <Column TData="string" Title="สถานะ" Width="20%" Style="text-align:center;">
                    @if(data.WithdrawalDoc == null )
                    {
                        <div>รอใบขอเบิก</div>
                    }
                    else
                    {
                        <div>อัปโหลดใบขอเบิกแล้ว</div>
                    }
                   
                </Column>
                <Column TData="string" Width="10%" Style="text-align:center;">
                    @if (@data.WithdrawalDoc == null)
                    {
                        <img class="mx-2" title="แก้ไข" src="helper_shared/PortalAdminImage/edit.png" style="width:24px;height:24px; cursor:pointer;" @onclick=@(() => goEdit(2, data.WithdrawalNo, data.WithdrawalDoc)) />
                    }
                    else
                    {
                        <img class="mx-2" title="เรียกดู" src="helper_shared/PortalAdminImage/eye.png" style="width:24px;height:24px; cursor:pointer;" @onclick=@(() => goEdit(3, data.WithdrawalNo, data.WithdrawalDoc)) />
                    }

                </Column>
            </ChildContent>
        </Table>
    </div>
</div>

<Modal Title="@title"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <p>Some contents...</p>
    <p>Some contents...</p>
    <p>Some contents...</p>
</Modal>
@if (isloading == true)
{
    <style>
        body {
            overflow: hidden;
        }</style>

    <LoadingPage></LoadingPage>
}
@code {
    [Parameter]
    public EventCallback<(int, string, string)> IndexPage { get; set; }
    List<ItemData> listOfData = new List<ItemData>();
    public string hosmCode { get; set; } = "0";
    public string username { get; set; }
    List<WithdrawalView> listWithdrawal = new List<WithdrawalView>();
    public bool isloading = false;
    public async Task goEdit(int item, string withdrawalNo, string withdrawalDoc)
    {
        await IndexPage.InvokeAsync((item, withdrawalNo, withdrawalDoc));
    }

    RenderFragment _audioIcon =@<Icon Type="audio" Theme="outline" Style="color: #1890ff" />;

    
    protected override async Task OnInitializedAsync()
    {
        isloading = true;
        hosmCode = await _localstorage.GetItemAsync<String>("hospitalMCode");
        username = await _localstorage.GetItemAsync<String>("username");
        listWithdrawal = await disbursementHistoryServices.GetWithdrawalByHoscode(hosmCode);
        
        isloading = false;


    }


    private void OnBlur()
    {
        Console.WriteLine("blur");
    }

    private void OnFocus()
    {
        Console.WriteLine("focus");
    }

    private void OnSearch(string value)
    {
        Console.WriteLine($"search: {value}");
    }


    public class ItemData
    {
        public int Id { get; set; }
        public string payCycle { get; set; }
        public int totalAmount { get; set; }
        public string status { get; set; }
    };



    string title = "BasicModal";
    bool _visible = false;

    private void HandleOk(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }

}
