@page "/portal"
@using Blazored.LocalStorage;
@using sso.mms.chat.Services
@using sso.mms.helper.PortalModel;
@using sso.mms.helper.ViewModels;
@using sso.mms.login.ViewModels;
@using sso.mms.notification.ViewModel
@using sso.mms.portal.admin.Services;
@using sso.mms.portal.ext.ViewModels;
@using sso.mms.helper.Configs;
@using sso.mms.notification.Services;
@using sso.mms.login.Services;
@using sso.mms.news.Services;
@using sso.mms.helper.Utility;
@using System.IdentityModel.Tokens.Jwt;
@using System.Text.Json;

@inject NewsService newsService
@inject ReadTokenService readTokenService
@inject NavigationManager NavigationManager
@inject NotificationService notificationService
@inject BannerService bannerService
@inject ILocalStorageService _localstorage;
@inject IJSRuntime JSRuntime
@inject SettingOpendataService SettingOpenDataService
@inject UserRoleService userRoleService
@inject AnnounceService AnnounceService
@inject SettingService SettingService
@inject NavigationManager navigaTion
@inject UserService UserService
@inject ChatService chatService
<PageTitle>Index</PageTitle>

<style>
    /*   @@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Thai:wght@400;500;600&display=swap');*/

    @@font-face {
        font-family: 'Noto Sans Thai';
        src: url('../fonts/NotoSansThai-VariableFont_wdth,wght.ttf') format('truetype');
    }

    * {
        font-family: 'Noto Sans Thai', sans-serif;
    }

    body {
        background: #F5F3F7;
    }

    .button-box {
        border-radius: 24px;
        height: 148px;
        width: 148px;
        text-align: center;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .card-custom-body {
        background: #FFF8E3;
    }

    .card-custom-header {
        background: #FFCC41;
        box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.1);
        border-radius: 10px 10px 0px 0px;
    }

    .border-custom {
        border: 3px solid #334396;
    }

    .text-color-custom {
        color: #334396;
    }

    .main-content {
        padding-left: 1%;
        padding-right: 1%;
    }

    @@media only screen and (min-width: 1000px) {
        .pm-xl {
            position: fixed;
            width: 100%;
            z-index: 1000;
        }
    }

    @@media only screen and (max-width: 1000px) {
        .position-class {
            position: relative
        }
    }

    .bar-shardow {
        box-shadow: 0px 2px 2px 0px rgba(0, 0, 0, 0.2);
    }

    .carousel-indicators [data-bs-target] {
        box-sizing: content-box;
        flex: 0 1 auto;
        width: 25px;
        height: 25px;
        padding: 0;
        margin-right: 3px;
        margin-left: 3px;
        text-indent: -999px;
        cursor: pointer;
        background-color: #ffffff;
        background-clip: padding-box;
        border: 0;
        border-top: 10px solid transparent;
        border-bottom: 10px solid transparent;
        /*        opacity: .5;*/
        transition: opacity .6s ease;
        border-radius: 50%;
    }

    .text-header-m {
        font-style: normal;
        font-weight: 600;
        font-size: 24px;
        line-height: 150%;
        letter-spacing: -0.019em;
        color: #334396;
        margin: 14px;
    }
</style>
@if (isLoading == true)
{
    <style>
        body {
            overflow: hidden;
        }</style>

    <LoadingPage></LoadingPage>
}
@*@if (ModalActive == true)
{
    @if (SendAnnounc != null)
    {
        <NotiMaintenance IsActive="@isActive" SendAnnounce="@SendAnnounc"></NotiMaintenance>
    }

}*@

<NavbarLoginSSO PageCode="HOP0102" Fname="@getUser?.FirstName" Lname="@getUser?.LastName" NotiNo="@notiNo" ChatNoti="@chatNotiNo" />

<MediaStyle></MediaStyle>

@*<div>
    <div>short token @shortToken</div>
    <div>access token @responseShortToken?.accessToken</div>
    <div>refresh token @responseShortToken?.refreshToken</div>
    <div>realm group  @responseShortToken?.realmGroup</div>
</div>*@
<div>
    <div id="carouselExampleControls" class="carousel slide" data-bs-ride="carousel">
        <div id="carouselExampleCaptions" class="carousel slide" data-bs-ride="carousel">
            <div class="carousel-indicators">
                @for (var i = 0; i < bannerTs.Count; i++)
                {
                    <button type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")" aria-current="true" aria-label="Slide 1"></button>
                }
            </div>
            <div class="carousel-inner" style="width:100%;height:30%;">

                @for (var i = 0; i < bannerTs.Count; i++)
                {
                    <div class="carousel-item @(i == 0 ? "active" : "")">
                        @if (String.IsNullOrEmpty(bannerTs[i].Url))
                        {
                            <img style="height:450px;" src="@bannerTs[i].UploadImagePath" class="d-block w-100" alt="...">
                        }
                        else
                        {
                            <a href="@bannerTs[i].Url" target="_blank">
                                <img style="height:450px;" src="@bannerTs[i].UploadImagePath" class="d-block w-100" alt="...">
                            </a>
                        }
                    </div>
                }
                @* <div class="carousel-item active">
                <img src="Data/Assets/Images/image-1.png" class="d-block w-100" alt="...">

                </div>
                <div class="carousel-item">
                <img src="Data/Assets/Images/image-1.png" class="d-block w-100" alt="...">

                </div>
                <div class="carousel-item">
                <img src="Data/Assets/Images/image-1.png" class="d-block w-100" alt="...">
                </div>*@
            </div>
            <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Next</span>
            </button>
        </div>
    </div>
</div>

<div class="main-content">


    <div class="row mt-5">
        <div class="col-sm-12 col-md-12 p-12 pd-class">
            <div style="display: flex;flex-wrap: wrap;justify-content: center;">
                @for (var i = 0; i < ImageListDetail.Count; i++)
                {
                    @if (menuList.Contains(ImageListDetail[i].MenuCode))
                    {
                        @if (ImageListDetail[i].MenuCode == "PHM004" && checkStatusChat.isactive == false)
                        {
                            continue;
                        }
                        else
                        {
                            <MenuList OnClickToChat=@GotoChat
                                      OnClickMenuList="@GotoNotification"
                                      OnClickCerReg=@GotoCerReg
                                      OnClickAddNewUser=@GotoAddNewUser
                                      OnClickHospitalData="@GotoHospitalData"
                                      OnClickHospitalUser="@GotoHospitalUser"
                                      OnClickDigital="@GotoDigital"
                                      OnClickPdpaDsar="@GotoPdpaDsar"
                                      OnClickElectronicSignature="@GotoElectronicSignature"
                                      OnClickPayStatus="((arge) => GotoPayStatus(arge.Item1,arge.Item2))"
                                      ImagePath="@ImageListDetail[i].ImagePath"
                                      DetailImagePath="@ImageListDetail[i].DetailImagePath"
                                      Height="@ImageListDetail[i].Height"
                                      Width="@ImageListDetail[i].Width"
                                      Path="@ImageListDetail[i].Path"
                                      NotiNo="@notiNo"
                                      ChatNotiNo="@chatNotiNo" />
                        }

                    }

                }
            </div>
        </div>
    </div>
    @if (menuList.Count != 0)
    {
        <div class="main-menu">
            <div class="card card-custom-body mb-3 my-5 w-100" style="border-radius: 10px 10px 10px 10px;box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.05);">
                <div class="card-header-m">
                    <h3 class="text-header-m">ค่าบริการทางการแพทย์</h3>
                </div>
                <div>
                    <div class="row my-2" align="center">
                        <div class="col-sm-12 col-md-12" style="display: flex;align-items: center;flex-wrap: wrap;justify-content: center;">
                            @for (var i = 0; i < ImageAssetMainDetailList.Count; i++)
                            {
                                @if (menuList.Contains(ImageAssetMainDetailList[i].MenuCode))
                                {
                                    <MenuListPhysician OnClickPromoteHealt="@GotoPromoteHealt"
                                                       ImagePath="@ImageAssetMainDetailList[i].ImagePath"
                                                       DetailImagePath="@ImageAssetMainDetailList[i].DetailImagePath"
                                                       Height="@ImageAssetMainDetailList[i].Height"
                                                       Width="@ImageAssetMainDetailList[i].Width"
                                                       MenuCode="@ImageAssetMainDetailList[i].MenuCode"
                                                       shortToken="@shortToken" />
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    <div class="main-menu">
        <div class="row" style="padding-top:2%;">
            <CardNews ResponseNews="@responseNews" OnClickToNews=@GotoNews GetNewsMid=@GetNewsMid shortToken="@shortToken" />
        </div>
    </div>

</div>

<div style="padding-top:48px">
    <OpenData SettingOpendata="@SystemSetting" />
</div>

<div class="container">
    <ManualPortal />
</div>

<footer class="mt-5" style="background:#224183;Height:auto;width:auto;padding-top:10px;padding-bottom:20px;">
    <FooterPortal />
</footer>


@code {
    public bool ModalActive;
    public bool isActive;
    public List<AnnounceT> Announce;
    private int getNewsMid;
    private int notiNo;
    private int chatNotiNo = 0;
    private bool isLoading = false;
    public List<SettingOpendataT> SystemSetting;
    List<ImageAssetDetailList> ImageListDetail = new List<ImageAssetDetailList>()
        {

            new ImageAssetDetailList() {
                ImagePath = "fa-solid fa-hospital",
                DetailImagePath = "ข้อมูลสถานพยาบาล",
                MenuCode = "PHM001",

            },
            new ImageAssetDetailList() {
                ImagePath = "fa-solid fa-file-invoice",
                DetailImagePath = "สถานะการเบิกจ่าย",
                MenuCode = "PHM002",

            },
            new ImageAssetDetailList() {
                ImagePath = "fa-solid fa-address-book",
                DetailImagePath = "บัตรรับรองการขึ้นทะเบียน",
                MenuCode = "PHM003",

            },
            new ImageAssetDetailList() {
                ImagePath = "fa-solid fa-comments",
                DetailImagePath = "Online Chat",
                MenuCode = "PHM004",

            },
            new ImageAssetDetailList() {
                ImagePath = "fa-solid fa-bell",
                DetailImagePath = "การแจ้งเตือน",
                MenuCode = "PHM005",

            },
            new ImageAssetDetailList() {
                ImagePath = "fa-solid fa-user-gear",
                DetailImagePath = "การจัดการผู้ใช้งาน",
                MenuCode = "PHM006",
            },
            new ImageAssetDetailList() {
                ImagePath = "fa-solid fa-clipboard-list",
                DetailImagePath = "จำนวนผู้ประกันตนที่เลือกสถานพยาบาล",
                MenuCode = "PHM007",

            },
            new ImageAssetDetailList() {
                ImagePath = "fa-solid fa-scale-balanced",
                DetailImagePath = "ขอใช้สิทธิ์เข้าถึงข้อมูลความยินยอม",
                MenuCode = "PHM010",
            },
            new ImageAssetDetailList() {
                ImagePath = "fa-solid fa-file-contract",
                DetailImagePath = "จัดการเอกสารอิเล็กทรอนิกส์",
                MenuCode = "PHM008"

            }, new ImageAssetDetailList() {
                ImagePath = "fa-solid fa-pen-clip",
                DetailImagePath = "จัดการลายมือ ชื่อดิจิตอล",
                MenuCode = "PHM009"

            },

        };

    List<ImageAssetMainDetailList> ImageAssetMainDetailList = new List<ImageAssetMainDetailList>()
        {

            new ImageAssetMainDetailList() {
                ImagePath = "Data/Assets/Images/imagemainmenu/1.png",
                DetailImagePath = "ตามภาระเสี่ยง",
                Height = "75px",
                Width = "75px",
                Path = "http://192.2.200.183:10000/MmsWeb/Login/hosHospital",
                MenuCode = "PHMS001"

            },
            new ImageAssetMainDetailList() {
                ImagePath = "Data/Assets/Images/imagemainmenu/2.png",
                DetailImagePath = "AdJRW >= 2",
                Height = "75px",
                Width = "75px",
                Path = "http://192.2.200.183:10000/MmsWeb/Login/hosHospital",
                MenuCode = "PHMS002"

            },
            new ImageAssetMainDetailList() {
                ImagePath = "Data/Assets/Images/imagemainmenu/3.png",
                DetailImagePath = "ODS",
                Height = "70px",
                Width = "70px",
                Path = "http://192.2.200.183:10000/MmsWeb/Login/hosHospital",
                MenuCode = "PHMS003"

            },
            new ImageAssetMainDetailList() {
                ImagePath = "Data/Assets/Images/imagemainmenu/4.png",
                DetailImagePath = "ORS",
                Height = "75px",
                Width = "75px",
                Path = "http://192.2.200.183:10000/MmsWeb/Login/hosHospital",
                MenuCode = "PHMS004"

            },
            new ImageAssetMainDetailList() {
                ImagePath = "Data/Assets/Images/imagemainmenu/5.png",
                DetailImagePath = "Packageโรคหัวใจและหลอดเลือด",
                Height = "75px",
                Width = "75px",
                Path = "http://192.2.200.183:10000/MmsWeb/Login/hosHospital",
                MenuCode = "PHMS005"

            },
            new ImageAssetMainDetailList() {
                ImagePath = "Data/Assets/Images/imagemainmenu/6.png",
                DetailImagePath = "ปลูกถ่ายอวัยวะ",
                Height = "75px",
                Width = "75px",
                Path = "http://192.2.200.183:10000/MmsWeb/Login/hosHospital",
                MenuCode = "PHMS006"

            },
            new ImageAssetMainDetailList() {
                ImagePath = "Data/Assets/Images/imagemainmenu/7.png",
                DetailImagePath = "ฮีโมฟีเลีย",
                Height = "75px",
                Width = "75px",
                Path = "http://192.2.200.183:10000/MmsWeb/Login/hosHospital",
                MenuCode = "PHMS007"

            },
            new ImageAssetMainDetailList() {
                ImagePath = "Data/Assets/Images/imagemainmenu/8.png",
                DetailImagePath = "ส่งเสริมสุขภาพป้องกันโรค",
                Height = "75px",
                Width = "75px",
                Path = "promoteHealthExt/index",
                MenuCode = "PHMS008"

            },
            new ImageAssetMainDetailList() {
                ImagePath = "Data/Assets/Images/imagemainmenu/9.png",
                DetailImagePath = "Lab HIV",
                Height = "75px",
                Width = "75px",
                Path = "http://192.2.200.183:10000/MmsWeb/Login/hosHospital",
                MenuCode = "PHMS009"

            },
            new ImageAssetMainDetailList() {
                ImagePath = "Data/Assets/Images/imagemainmenu/10.png",
                DetailImagePath = "วัคซีน",
                Height = "75px",
                Width = "75px",
                Path = "http://192.2.200.183:10000/MmsWeb/Login/hosHospital",
                MenuCode = "PHMS010"

            },
            new ImageAssetMainDetailList() {
                ImagePath = "Data/Assets/Images/imagemainmenu/11.png",
                DetailImagePath = "สารเมทาโดน",
                Height = "75px",
                Width = "75px",
                Path = "http://192.2.200.183:10000/MmsWeb/Login/hosHospital",
                MenuCode = "PHMS011"

            },
            new ImageAssetMainDetailList() {
                ImagePath = "Data/Assets/Images/imagemainmenu/12.png",
                DetailImagePath = "แพทย์ผู้เชี่ยวชาญฯ",
                Height = "75px",
                Width = "75px",
                Path = "http://192.2.200.183:10000/MmsWeb/Login/hosHospital",
                MenuCode = "PHMS012"

            },
            new ImageAssetMainDetailList() {
                ImagePath = "Data/Assets/Images/imagemainmenu/13.png",
                DetailImagePath = "ทุพพลภาพ",
                Height = "75px",
                Width = "75px",
                Path = "http://192.2.200.183:10000/MmsWeb/Login/hosHospital",
                MenuCode = "PHMS013"

            },
            new ImageAssetMainDetailList() {
                ImagePath = "Data/Assets/Images/imagemainmenu/14.png",
                DetailImagePath = "ฟอกเลือดด้วยเครื่องไตเทียม",
                Height = "75px",
                Width = "75px",
                Path = "http://192.2.200.183:10000/MmsWeb/Login/hosHospital",
                MenuCode = "PHMS014"

            },
            new ImageAssetMainDetailList() {
                ImagePath = "helper_shared/icon_sso/Frame15190ucepicon.png",
                DetailImagePath = "เจ็บป่วยฉุกเฉิน \n วิกฤต UCEP",
                Height = "75px",
                Width = "75px",
                Path = "http://192.2.200.183:10000/MmsWeb/Login/hosHospital",
                MenuCode = "PHMS015"

            },
            new ImageAssetMainDetailList() {
                ImagePath = "helper_shared/icon_sso/Frame15191alert.png",
                DetailImagePath = "เจ็บป่วยฉุกเฉิน \n 72 ชม.",
                Height = "75px",
                Width = "75px",
                Path = "http://192.2.200.183:10000/MmsWeb/Login/hosHospital",
                MenuCode = "PHMS016"

            },
            new ImageAssetMainDetailList() {
                ImagePath = "Data/Assets/Images/imagemainmenu/17.png",
                DetailImagePath = "บำรุงรักษาอวัยวะสภากาชาดไทย",
                Height = "75px",
                Width = "75px",
                Path = "http://192.2.200.183:10000/MmsWeb/Login/hosHospital",
                MenuCode = "PHMS017"

            },
            new ImageAssetMainDetailList() {
                ImagePath = "Data/Assets/Images/imagemainmenu/18.png",
                DetailImagePath = "COVID-19",
                Height = "75px",
                Width = "75px",
                Path = "http://192.2.200.183:10000/MmsWeb/Login/hosHospital",
                MenuCode = "PHMS018"

            },
            new ImageAssetMainDetailList() {
                ImagePath = "Data/Assets/Images/imagemainmenu/19.png",
                DetailImagePath = "ทันตกรรม",
                Height = "75px",
                Width = "75px",
                Path = "http://192.2.200.183:10000/MmsWeb/Login/hosHospital",
                MenuCode = "PHMS019"

            },
            new ImageAssetMainDetailList() {
                ImagePath = "Data/Assets/Images/imagemainmenu/20.png",
                DetailImagePath = "การฟื้นฟูด้านอาชีพ และการแพทย์",
                Height = "75px",
                Width = "75px",
                Path = "http://192.2.200.183:10000/MmsWeb/Login/hosHospital",
                MenuCode = "PHMS020"

            },
        };

    private ResponseShortToken responseShortToken { get; set; } = null!;
    private ResponseLogin getUser { get; set; } = null!;
    List<BannerT> bannerTs = new List<BannerT>();

    public string? env = ConfigureCore.ConfigENV;
    public string? urlLogin = ConfigureCore.redirectLogin;
    public string? urlNews;
    public string? urlChat;
    public string? urlCerReg;
    public string? urlAddNeruser;
    public string? urlNotification;
    public string? urlPortal;
    public List<string> menuList = new List<string>();
    public UserRole userRole;

    private AnnounceT SendAnnounc;

    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? shortToken { get; set; } = "";

    private List<NewsM>? responseNews = new List<NewsM>();
    private List<NotiM>? responseNoti = new List<NotiM>();
    private List<ChatRoom> responseChatNoti = new List<ChatRoom>();
    public List<string>? roleCodeList = new List<string>();
    public string orgCode = "";
    public string username = "";
    public string userType = "";
    public NotiTApiModel notiTapi = new NotiTApiModel();

    CheckSettingModel checkStatusChat = new CheckSettingModel();

    private CancellationTokenSource cancellationTokenSource;
    private bool isContinuousWorkRunning;

    private async Task StartContinuousWork()
    {
        if (!isContinuousWorkRunning)
        {
            isContinuousWorkRunning = true;
            cancellationTokenSource = new CancellationTokenSource();

            await Task.Run(async () =>
            {
                while (!cancellationTokenSource.Token.IsCancellationRequested)
                {
                    await InvokeAsync(CheckSessionUserStorage);
                    await InvokeAsync(UpdateShortToken);
                    await Task.Delay(TimeSpan.FromSeconds(int.Parse(ConfigureCore.SetTimeSecoundRefreshToken)));
                    // await Task.Delay(TimeSpan.FromSeconds(30));
                }
            });
        }
    }

    //flow 1 session login refreshToken
    private async Task CheckSessionUserStorage()
    {
        await UserService.CheckSessionUserStorage();
        StateHasChanged();
    }

    //flow 2 session login redirect
    // private async Task CheckSessionRedirectLogin()
    // {
    //     var result = await UserService.CheckSessionRedirectLogin();

    //     Console.WriteLine("StatusRedirect", result);
    //     if(result == false)
    //     {
    //         NavigationManager.NavigateTo(urlLogin);
    //     }
    //     StateHasChanged();
    // }

    private async Task UpdateShortToken()
    {
        if (responseShortToken != null)
        {
            if (env == "Development")
            {
                responseShortToken = await readTokenService.ReadToken(shortToken);
            }
            else
            {
                var newToken = await _localstorage.GetItemAsync<string>("shortToken");
                responseShortToken = await readTokenService.ReadToken(newToken);
                responseShortToken.shortToken = newToken;
                Console.WriteLine(newToken);
            }
            StateHasChanged();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        // await _localstorage.SetItemAsync<string>("shortToken", shortToken!);



        ModalActive = false;
        isLoading = true;
        Announce = await AnnounceService.GetAnnounceT();
        SystemSetting = await SettingOpenDataService.GetSettingOpendataT();
        responseNews = await newsService.GetGroupNewT();
        bannerTs = await bannerService.GetPortalBannersT();

        StateHasChanged();




        if (responseNoti != null)
        {
            foreach (var item in responseNoti)
            {
                notiNo = notiNo + item.NotificationTs.Count;
            }
        }
        urlNews = ConfigureCore.redirectsNews;
        urlChat = ConfigureCore.redirectChat;
        urlNotification = ConfigureCore.redirectNotification;
        urlCerReg = ConfigureCore.redirectPortalExt;
        urlAddNeruser = ConfigureCore.redirectPortalExt;
        urlPortal = ConfigureCore.redirectPortalExt;

        checkStatusChat = await SettingService.GetStatusMSetting("chat");

        var newToken = await _localstorage.GetItemAsync<string>("shortToken");
        // responseShortToken = await readTokenService.ReadToken(newToken);
        if (env == "Development")
        {
            responseShortToken = await readTokenService.ReadToken(shortToken);

        }
        else
        {
            responseShortToken = await readTokenService.ReadToken(newToken);

        }


        if (responseShortToken != null)
        {
            Console.WriteLine("ResponseShortToken", responseShortToken);

            await _localstorage.SetItemAsync("hospitalMCode", responseShortToken.HospitalMCode);
            if (env == "Development")
            {
                JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();
                JwtSecurityToken jwt = tokenHandler.ReadJwtToken(responseShortToken.accessToken);
                var t = jwt.Payload.ToList();
                KeyValuePair<string, object> result = t.FirstOrDefault(pair => pair.Key == "preferred_username");
                var username = result.Value.ToString();
                userRole = await userRoleService.GetRoleByUserName(username);
                await _localstorage.SetItemAsync("userRole", userRole);
            }
            else
            {
                userRole = await userRoleService.GetRoleByUserName(await _localstorage.GetItemAsync<String>("username"));
                await _localstorage.SetItemAsync("userRole", userRole);
            }
            if (userRole != null && userRole.role != null)
            {
                try
                {
                    menuList = userRole.role.Select(i => i.menu.Where(m => m.isRoleRead == true && m.appCode == "PORTAL-HOS").Select(t => t.menuCode).ToList()).ToList().SelectMany(list => list).ToList();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
            }


            JwtSecurityTokenHandler tokenHandler2 = new JwtSecurityTokenHandler();
            JwtSecurityToken jwt1 = tokenHandler2.ReadJwtToken(responseShortToken.accessToken);
            var token = jwt1.Payload.ToList();
            KeyValuePair<string, object> result_username = token.FirstOrDefault(pair => pair.Key == "preferred_username");
            KeyValuePair<string, object> resultRealm = token.FirstOrDefault(pair => pair.Key == "iss");
            userType = resultRealm.Value.ToString().Split('/').Last();
            username = result_username.Value.ToString();
            orgCode = await userRoleService.GetHospitalCode(username);

            await _localstorage.SetItemAsync("userRole", userRole);
            await _localstorage.SetItemAsync("userType", userType);
            await _localstorage.SetItemAsync("orgCode", orgCode);

            if (userRole != null)
            {
                roleCodeList = userRole.role.Select(roleObject => roleObject.roleCode).ToList();
            }

            await _localstorage.SetItemAsync("roleCodeList", roleCodeList);
            notiTapi = new NotiTApiModel
                {
                    userType = userType,
                    username = username,
                    orgCode = orgCode,
                    roleCodeList = roleCodeList
                };

            isLoading = false;
            StateHasChanged();
        }
        responseNoti = await notificationService.GetNotiByUser(notiTapi);
        if (responseNoti != null)
        {
            foreach (var item in responseNoti)
            {
                notiNo = notiNo + item.NotificationTs.Count;
            }
        }

        ModalActive = true;
        if (Announce != null)
        {
            SendAnnounc = Announce.FirstOrDefault(w => w.ActiveStatus == true);
        }

        try
        {
            responseChatNoti = await chatService.GetChatNotiFromLog(responseShortToken.HospitalMId);

            if (responseChatNoti != null)
            {
                foreach (var item in responseChatNoti)
                {
                    foreach (var item2 in item.ChatTs)
                    {
                        chatNotiNo = chatNotiNo + item2.ChatLogs.Count();
                    }

                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        StateHasChanged();


    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await StartContinuousWork();
    }

    public void GetNewsMid(int newsMid)
    {
        getNewsMid = newsMid;
    }


    public void GotoNews(bool click)
    {
        if (click)
        {
            NavigationManager.NavigateTo(urlNews + $"news?token={responseShortToken.shortToken}&newsmid={getNewsMid}");

        }
    }
    public void GotoChat(bool click)
    {
        if (click)
        {
            NavigationManager.NavigateTo(urlChat + $"chat?token={responseShortToken.shortToken}");

        }
    }
    public void GotoCerReg(bool click)
    {
        if (click)
        {
            NavigationManager.NavigateTo(urlCerReg + $"certificatereg?token={responseShortToken.shortToken}");
            //NavigationManager.NavigateTo(urlCerReg + $"certificatereg?token={responseShortToken.shortToken}");

        }
    }
    public void GotoAddNewUser(bool click)
    {
        if (click)
        {
            NavigationManager.NavigateTo(urlAddNeruser + $"addnewuser?token={responseShortToken.shortToken}");
            //NavigationManager.NavigateTo(urlCerReg + $"certificatereg?token={responseShortToken.shortToken}");

        }
    }

    public async void GotoPromoteHealt(bool click)
    {
        if (click)
        {
            //navigaTion.NavigateTo("https:mmsuat.demotoday.net/fees-ext/promoteHealthExt/index" + $"?token={shortToken}");
            navigaTion.NavigateTo($"{ConfigureCore.redirectFeesExt}promoteHealthExt/index?token={shortToken}");
        }
    }
    public async void GotoPdpaDsar(bool click)
    {
        if (click)
        {
            await JSRuntime.InvokeVoidAsync("open", $"{ConfigureCore.redirectOtherService}onpre-dsar-ui/landing?token={responseShortToken.shortToken}", "_blank");

        }
    }

    public void GotoNotification(bool click)
    {
        if (click)
        {
            NavigationManager.NavigateTo(urlNotification + $"notification?token={responseShortToken.shortToken}");

        }
    }
    public async void GotoDigital(bool click)
    {
        if (click)
        {
            await JSRuntime.InvokeVoidAsync("open", $"https://mmsuat.demotoday.net/edoc/edoc/create-doc?token={responseShortToken.shortToken}", "_blank");
        }
    }
    public async void GotoElectronicSignature(bool click)
    {
        if (click)
        {
            await JSRuntime.InvokeVoidAsync("open", $"https://mmsuat.demotoday.net/edoc/sign/doc-inbox?token={responseShortToken.shortToken}", "_blank");
        }
    }
    public async void GotoHospitalData(bool click)
    {
        if (click)
        {
            await JSRuntime.InvokeVoidAsync("open", $"{ConfigureCore.redirectOtherService}HOS/?token={responseShortToken.shortToken}", "_blank");
        }
    }
    public async void GotoHospitalUser(bool click)
    {
        if (click)
        {
            await JSRuntime.InvokeVoidAsync("open", $"http://192.2.200.146/HOS/?token={responseShortToken.shortToken}", "_blank");
        }
    }
    public async void GotoPayStatus(bool click, string pagename)
    {
        if (click)
        {
            NavigationManager.NavigateTo(urlPortal + $"phase2?pagename={pagename}");
        }
    }


}