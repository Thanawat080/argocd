@page "/Register"
@using System.Text;
@using System.Net.Http.Headers;
@using Microsoft.AspNetCore.Mvc;
@using sso.mms.helper.Configs;
@using sso.mms.helper.Data;
@using sso.mms.helper.ViewModels;
@using sso.mms.login.Services;
@using sso.mms.login.ViewModels;
@inject NavigationManager NavigationManager
@inject KeyCloakService keyCloakService
@inject IJSRuntime JSRuntime;
@using Newtonsoft.Json;
@using sso.mms.login.ViewModels.Email;
@using sso.mms.login.ViewModels.KeyCloak;
@inject UserService userService;
@inject SweetAlertService Swal
<style>

    @@media only screen and (min-width: 1000px) {
        .pm-xl {
            position: fixed;
            width: 100%;
            z-index: 1000;
        }
    }

    @@media only screen and (max-width: 1000px) {
        .position-class {
            position: relative
        }
    }

    .swal2-container.swal2-center > .swal2-popup {
        grid-column: 2;
        grid-row: 2;
        align-self: center;
        justify-self: center;
        border-radius: 16px;
    }

    .swal2-title {
        position: relative;
        max-width: 100%;
        margin: 0;
        padding: 0.8em 1em 0;
        color: inherit;
        font-size: 1.875em;
        font-weight: 600;
        text-align: center;
        text-transform: none;
        word-wrap: break-word;
        color: #334396;
        font-family: Noto Sans Thai;
    }

    .swal2-styled.swal2-confirm {
        border: 0;
        color: #fff;
        font-size: 1em;
        border-radius: 4px;
        background: #334396;
        width: 150px;
    }
</style>


<NavMenu PageCode="@codeName" />



@if (page == 0)
{
    <RegisterFrom OnNextButton="NextButton" OnBackButton="BackButton" OnRegis="@((args)=>OnRegister(args.Item1,args.Item2))" RegisData="RegisData" page="page"></RegisterFrom>
}
else if (page == 1)
{
    <RegisterConfirm_1 OnNextButton="NextButton" OnBackButton="BackButton" OnRegis="@((args)=>OnRegister(args.Item1,args.Item2))" RegisData="RegisData" page="page"></RegisterConfirm_1>

}
else if (page == 2)
{
    <RegisterConfirm_2 OnNextButton="NextButton" OnBackButton="BackButton" OnRegis="@((args)=>OnRegister(args.Item1,args.Item2))" RegisData="RegisData" page="page"></RegisterConfirm_2>

}
else
{
    <RegisterConfirm_3 OnNextButton="NextButton" OnBackButton="BackButton" OnRegis="@((args)=>OnRegister(args.Item1,args.Item2))" RegisData="RegisData" page="page"></RegisterConfirm_3>
}

@if (isloading == true)
{
    <style>
        body {
            overflow: hidden;
        }</style>

    <LoadingPage></LoadingPage>
}

@code {
    private int page = 0;
    public HospitalUserM? RegisData;
    private ResponseCreateTokenKeyCloak responseTokenKeyCloak { get; set; } = null!;
    private ResponseModel responseHospital { get; set; } = null!;
    public bool isloading = false;
    public string? env = ConfigureCore.ConfigENV;
    public string? url;
    public string? urlLogin;
    public string? resiveotp;
    public string? codeName = "DSR0101";

    protected override void OnInitialized()
    {
        url = ConfigureCore.redirectPortalExt;
        urlLogin = ConfigureCore.redirectLogin;
    }

    public string geCodePage(int page)
    {
        string CoName = "";

        switch (page)
        {
            case 1:
                CoName = "DSR0102";
                break;
            case 2:
                CoName = "DSR0103";
                break;
            case 3:
                CoName = "DSR0104";
                break;
        }
        return CoName;
    }

    public void NextButton(int page)
    {
        this.codeName = this.geCodePage(page);
        this.page = page;

        StateHasChanged();
    }

    public void BackButton(int page)
    {
        this.codeName = this.geCodePage(page);
        this.page = page;

        StateHasChanged();
    }

    public async void OnRegister(HospitalUserM hospitalUser, int page)
    {
        this.page = page;
        RegisData = hospitalUser;
        this.codeName = this.geCodePage(page);

        if (this.page == 3)
        {
            isloading = true;
            StateHasChanged();
            await RegisterKeyCloak();
        }
        if (this.page == 4)
        {
            NavigationManager.NavigateTo(urlLogin);
        }
        StateHasChanged(); 
    }



    public async Task RegisterKeyCloak()
    {

        HospitalUserM hospitalUser = new HospitalUserM()
            {
                PrefixMCode = RegisData.PrefixMCode,
                FirstName = RegisData.FirstName,
                MiddleName = RegisData.MiddleName,
                LastName = RegisData.LastName,
                PositionName = RegisData.PositionName,
                IdenficationNumber = RegisData.IdenficationNumber,
                SsoBranchCode = "",
                MedicalName = RegisData.MedicalName,
                MedicalCode = RegisData.MedicalCode,
                Email = RegisData.Email,
                Mobile = RegisData.Mobile,
                HospitalMId = RegisData.HospitalMId,
                ImagePath = "",
                ImageName = "",
                GroupId = 1,
                Address = RegisData.Address,
                Moo = 1,
                DistrictCode = RegisData.DistrictCode,
                SubdistrictCode = RegisData.SubdistrictCode,
                ProvinceCode = RegisData.ProvinceCode,
                ZipCode = RegisData.ZipCode,
                LazerCode = "",
                IsStatus = 1,
                CreateDate = DateTime.Now,
                CreateBy = RegisData.FirstName,
                UpdateDate = DateTime.Now,
                UpdateBy = RegisData.FirstName,
                UserName = RegisData.UserName,
                Password = RegisData.Password,
                IsActive = true,
                IsCheckDopa = RegisData.IsCheckDopa
            };

        responseTokenKeyCloak = await keyCloakService.CreateTokenKeyCloak("sso-mms-hospital");

        responseHospital = await keyCloakService.CreateUserKeyCloak(hospitalUser, null, responseTokenKeyCloak.access_token, "sso-mms-hospital");

        if (responseHospital.issucessStatus != false)
        {

            var data = new RequestEmail
                {
                    ToEmail = RegisData.Email,
                    SubjectEmail = "Register Success",
                    Password = RegisData.Password,
                    Username = RegisData.UserName,
                };
            ResponseModel response = await userService.SendMailAsync(data);
            if (response.issucessStatus == true)
            {

                isloading = false;
                StateHasChanged();
                var result = await Swal.FireAsync(
                           "ลงทะเบียนสำเร็จ !",
                           null,
                           SweetAlertIcon.Success
                           );
                if (result.IsConfirmed)
                {
                    this.page = 4;
                    //NavigationManager.NavigateTo(urlLogin);
                }

            }
        }
        else
        {
            StateHasChanged();
            //await JSRuntime.InvokeVoidAsync("alert", "มีผู้ใช้ email หรือ username นี้อยู่แล้วกรุณากรอก email หรือ username อื่น");
            await Swal.FireAsync(
                    "มีผู้ใช้ email หรือ username นี้อยู่แล้วกรุณากรอก email หรือ username อื่น",
                    null,
                    SweetAlertIcon.Warning
                    );

        }
    }
}
