@page "/listnews"
@using AntDesign
@using MatBlazor
@inject NavigationManager Navigation;
@inject IJSRuntime JSRuntime;
@using System.Globalization;
@using sso.mms.helper.Configs;
@using sso.mms.helper.PortalModel;
@using sso.mms.news.ViewModels;
@using sso.mms.news.Services;
@inject NewsService newsService
@inject IHttpClientFactory ClientFactory

<style>
    body {
        background: #F5F3F7;
    }

    .text-title {
        font-family: 'Noto Sans Thai';
        font-style: normal;
        font-weight: 600;
        font-size: 32px;
        line-height: 150%;
        letter-spacing: -0.019em;
        color: #334396;
    }

    .text-detail {
        font-family: 'Noto Sans Thai';
        font-style: normal;
        font-weight: 600;
        font-size: 32px;
        line-height: 150%;
        letter-spacing: -0.019em;
        color: #334396;
    }

    .serch-bg {
        background: #334396;
        flex: none;
        order: 1;
        align-self: stretch;
        flex-grow: 0;
        height: 36px;
        color: white;
    }

    .mdc-table th {
        font-size: 1.143rem;
        color: #334396;
        border: 2px solid rgb(255 255 255);
        padding: 12px 12px 12px 24px;
        background: #FFCC41;
        font-family: 'Noto Sans Thai';
        font-style: normal;
        font-weight: 700;
        font-size: 18px;
        line-height: 27px;
        letter-spacing: 0.2px;
        color: #334396;
    }

    .mdc-table,
    .mdc-table--striped {
        width: 100%;
        max-width: 100%;
        background-color: transparent;
        border-collapse: collapse;
        border-spacing: 0;
        display: inline-block;
        overflow-x: auto;
        margin: 8px 0 32px;
        border: 0px solid rgba(0, 0, 0, .1);
        font-family: 'Noto Sans Thai';
        font-style: normal;
        font-weight: 500;
        font-size: 16px;
        align-items: center;
        color: #1A141F;
    }

        .mdc-table td {
            border: 2px solid white;
            padding: 12px 12px 12px 24px;
        }

        .mdc-table--striped tr:nth-of-type(odd) {
            background: #EAE8EC;
        }

    .from-style {
        background: #FFFFFF;
        border-radius: 8px;
    }

    .mdc-select__dropdown-icon {
        margin-left: 1px;
        margin-right: 1px;
        display: inline-flex;
        position: relative;
        align-self: center;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
        pointer-events: none;
    }

    .mdc-select .mdc-select__anchor {
        height: 56px;
        display: flex;
        align-content: center;
        align-items: center;
    }

    .mat-paginator .mat-paginator-container .mat-paginator-page-size {
        display: flex;
        margin-right: 8px;
        align-items: center
    }

    .mat-paginator .mat-paginator-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        min-height: 56px;
        padding: 0 8px;
        flex-wrap: wrap-reverse;
    }

    .margin-tb {
        margin-bottom: 10%;
        margin-top: 2%;
    }

    .text-truncate {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        max-width: 150px;
    }

    .btn-bo-main {
        border-radius: 4px;
        border: 2px solid #334396;
        background: #FFF;
        color: #334396;
        font-size: 18px;
        font-family: Noto Sans Thai;
        font-style: normal;
        font-weight: 600;
    }

    .mdc-select:not(.mdc-select--disabled) .mdc-select__anchor {
        background-color: #ffffff;
        width: 80px;
        height: 30px;
        border-radius: 10px;
        border: 0px solid #ffffff;
    }

    .card-news {
        border-radius: 10px;
        background: #FFF;
        min-height: 550px;
        box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;
    }

</style>
<MediaStyle></MediaStyle>


<div class="container margin-tb">

    <div class="card-news">
        <div style="margin:34px;">
            @if (responseNewsT != null)
            {
                <div class="text-title p-4 pb-4">@Title</div>


                <div class="d-flex justify-content-end mb-3">
                    <div class="input-group w-25">
                        <input type="search" class="form-control" style="height: 48px;" placeholder="ข้อมูลที่ต้องการค้นหา"
                               aria-label="Search" aria-describedby="search-addon" @bind-value="@seachTerm"
                        @onkeypress="@SeachNewsDatakeypass" />
                        <button @onclick="@SeachNewsData" type="button" class="btn btn-outline-primary serch-bg"
                                style="height: 48px;width:48px;">
                            <i class="fa-solid fa-magnifying-glass"></i>
                        </button>
                    </div>
                </div>
                <MatTable 
                    Items="@responseNewsT" 
                    ShowPaging="false" 
                    LoadInitialData="true" 
                    Striped="true"
                    RequestApiOnlyOnce="true" 
                    AllowSelection="true" 
                    RowClass="tester" 
                    PageSize="@pageSize"
                    CurrentPage="@pageIndex">
                    <MatTableHeader>
                        <th class="text-center" style="border-radius:10px 0 0 0;width:76px">ลำดับ</th>
                        <th class="text-center" style="width:320px">หัวข้อ</th>
                        <th class="text-center" style="width:320px">แท็ก</th>
                        <th class="text-center" style="width:250px">วันที่สร้าง</th>
                        <th class="text-center" style="width:250px">วันที่แก้ไข</th>
                        <th class="text-center" style="border-radius:0 10px 0 0 ; width:176px;"></th>

                    </MatTableHeader>
                    <MatTableRow>

                        <td style="width:76px">@(responseNewsT.IndexOf(context) + 1)</td>
                        <td class="text-truncate" style="max-width:320px; text-overflow: ellipsis;">@context?.Title</td>
                        <td class="text-truncate" style="max-width:320px; text-overflow: ellipsis;">@(context.NewsTagLists.FirstOrDefault() != null ? context.NewsTagLists.FirstOrDefault().TagName : "") </td>
                        <td style="width:183px">@ThaiDateFormat.FormattedDate(context?.CreateDate)</td>
                        <td style="width:183px">@ThaiDateFormat.FormattedDate(context?.UpdateDate)</td>
                        <td style="width:176px">
                            @if (Title != null && context.NewsMId == 2)
                            {
                                <div class="d-flex justify-content-center">
                                    <img src="helper_shared/PortalAdminImage/eye.png" title="แสดงรายละเอียด" @onclick="()=>nextpage(context.Id)" />
                                </div>
                            }
                            else
                            {
                                <div class="d-flex justify-content-center">
                                    <img class="p-1" src="helper_shared/PortalAdminImage/eye.png" title="แสดงรายละเอียด" @onclick="() => toPDFPreview(context.UploadPath)" />
                                    <div class="px-2">
                                    </div>
                                    <a class="p-1" href="@fetchPDFDownload(context.UploadPath)" download title="ดาวน์โหลด"><img src="helper_shared/PortalAdminImage/download.png" /></a>
                                </div>
                                @*<td style="width:83px"><img src="/download.png" /></td>*@
                            }
                        </td>
                    </MatTableRow>
                </MatTable>
                <div>
                    <Pagination
                        ShowSizeChanger
                                 OnShowSizeChange="OnShowSizeChange"
                                 OnChange="OnPage"
                                 DefaultCurrent="3"
                                 PageSize=@pageSize
                                 Total="@responseNewsT.Count()" />
                     @* <MatPaginator Length="@responseNewsT.Count" PageSize="@pageSize"
                Page="@OnPage"></MatPaginator> *@
                 </div>
            }

        </div>
        <div class="d-flex justify-content-end align-content-center">
            <button class="btn btn-secondary btn-bo-main px-4 p-2 mx-5 mb-5" @onclick="GoToHomePage">
                <i class="fa-solid fa-circle-chevron-left"></i>&nbsp; ย้อนกลับ
            </button>

        </div>
    </div>

</div>

<sso.mms.helper.Components.Footer.Footer />

@code {
    private string formattedDate;
    public string? env = ConfigureCore.ConfigENV;
    private string prefix = "";
    private string urlNews = ConfigureCore.redirectsNews;
    private string urlPortal = ConfigureCore.redirectPortalExt;
    private string? seachTerm;
    int pageSize = 5;
    int pageIndex = 0;
    int rowNo = 0;
    string Title;

    [Parameter]
    public string NewsMid { get; set; }

    [Parameter]
    public string shortToken { get; set; }


    public List<string> linkString = new List<string>();

    void OnPage(PaginationEventArgs e)
    {

        Console.WriteLine(e);
        pageSize = e.PageSize;
        pageIndex = e.Page;
    }


    private void OnShowSizeChange(PaginationEventArgs args)
    {
        var (current, pageSize) = args;
        Console.WriteLine($"{current}, {pageSize}");
    }

    

    private async void nextpage(int id)
    {

        string urlDetail = "detail?param=" + id.ToString();

        //await JSRuntime.InvokeVoidAsync("open", url + urlDetail, "_blank");
        if (shortToken != null)
        {

            Navigation.NavigateTo(urlNews + "detail?token=" + shortToken + "&param=" + id + "&newsmid=" + NewsMid);

        }
        else
        {
            Navigation.NavigateTo(urlNews + "detail?param=" + id.ToString() + "&newsmid=" + NewsMid);
        }

    }


   
    private List<NewsMView>? responseNews = new List<NewsMView>();
    private List<NewsTView>? responseNewsT = new List<NewsTView>();
    private List<NewsTView>? responseNewsTForSearch = new List<NewsTView>();

    private List<NewsTView>? responseNewsTagAndTitle = new List<NewsTView>();


    protected override async Task OnInitializedAsync()
    {

        responseNews = await newsService.GetNewsM(Int32.Parse(NewsMid));
        @foreach (var item in responseNews!.Select((value, i) => (value, i)))
        {
            Title = item.value.Name;
            if (shortToken != null)
            {
                foreach (var newsT in responseNews![item.i].NewsTs.Select((value, i) => (value, i)).OrderByDescending(o => o.value.UpdateDate))
                {
                    responseNewsT.Add(newsT.value);


                }
            }
            else
            {
                foreach (var newsT in responseNews![item.i].NewsTs.Where(w => w.PrivilegePublic == true).Select((value, i) => (value, i)).OrderByDescending(o => o.value.UpdateDate)
                                                                  )
                {
                    responseNewsT.Add(newsT.value);


                }
            }
            responseNewsTForSearch = responseNewsT;
        }

        StateHasChanged();
    }

    public void GoToHomePage()
    {
        if (shortToken != null)
        {
            Navigation.NavigateTo(urlPortal + "portal?token=" + shortToken);
        }
        else
        {
            Navigation.NavigateTo(urlPortal);
        }
    }

    public async Task toPDFPreview(string filePath)
    {

        await JSRuntime.InvokeVoidAsync("open", $"{filePath}", "_blank");

    }

    public string fetchPDFDownload(string filePath)
    {
        return $"{filePath}";

    }
    public async void SeachNewsData()
    {
        responseNews = new List<NewsMView>();
        responseNewsT = new List<NewsTView>();

        var data = new SearchModel
            {
                newsMid = Int32.Parse(NewsMid),
                searchTerm = this.seachTerm.ToLower()
            };
        responseNews = await newsService.SearchDataService(data);

        // responseNewsT = responseNewsTForSearch.Where(w => w.Title.Contains(data.searchTerm) || w.NewsTagLists.Any(tag => tag.NewsTId == w.Id && tag.TagName.Contains(data.searchTerm))).ToList();


        @foreach (var item in responseNews!.Select((value, i) => (value, i)))
        {
            Title = item.value.Name;
            foreach (var newsT in responseNews![item.i].NewsTs.Select((value, i) => (value, i)).OrderByDescending(o => o.value.UpdateDate))
            {
                responseNewsT.Add(newsT.value);
            }
        }
        int pageIndex = 0;
        StateHasChanged();
    }

    public async void SeachNewsDatakeypass(KeyboardEventArgs e)
    {
        await Task.Delay(1000);
        if (e.Key == "Enter")
        {
            SeachNewsData();
            StateHasChanged();
        }
    }


}