@page "/news"
@using Blazored.LocalStorage;
@using System.IdentityModel.Tokens.Jwt;
@using sso.mms.helper.Configs;
@using sso.mms.helper.PortalModel;
@using sso.mms.helper.ViewModels;
@using sso.mms.login.ViewModels.KeyCloak;
@using sso.mms.login.Services;
@using sso.mms.login.ViewModels;
@using sso.mms.notification.Services;

@inject ReadTokenService readTokenService
@inject ILocalStorageService _localstorage
@inject UserRoleService userRoleService
@inject NotificationService notificationService
<style>
    @@media only screen and (min-width: 1000px) {
        .pm-xl {
            position: fixed;
            width: 100%;
            z-index: 1000;
        }
    }

    @@media only screen and (max-width: 1000px) {
        .position-class {
            position: relative
        }
    }

</style>



@if (shortToken != null)
{
    @if (isLoading == true)
    {
        <style>
            body {
                overflow: hidden;
            }</style>

        <LoadingPage></LoadingPage>
    }

    <NavbarLoginSSO PageCode="@getPageCode" Fname="@getUser?.FirstName" Lname="@getUser?.LastName" NotiNo="@notiNo"></NavbarLoginSSO>

    <div style="display:none">
        <div>short token @shortToken</div>
        <div>access token @responseShortToken?.accessToken</div>
        <div>refresh token @responseShortToken?.refreshToken</div>
    </div>
    <MediaStyle></MediaStyle>
}
else
{

    <BeforeNavMenu PageCode="@getPageCode"></BeforeNavMenu>

    <MediaStyle></MediaStyle>
}

<DataTableListNews NewsMid="@newsMid" shortToken="@shortToken"></DataTableListNews>


@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? shortToken { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery(Name = "newsmid")]
    public string newsMid { get; set; } = "";

    private ResponseLogin getUser { get; set; } = null!;
    private ResponseShortToken responseShortToken { get; set; } = null!;

    public string? env = ConfigureCore.ConfigENV;
    public string? url;
    private bool isLoading = false;
    private int notiNo;
    public string orgCode = "";
    public string username = "";
    public string userType = "";
    public UserRole userRole;
    public List<string>? roleCodeList = new List<string>();
    public List<string> menuList = new List<string>();
    private List<NotiM>? responseNoti = new List<NotiM>();
    public NotiTApiModel notiTapi = new NotiTApiModel();
    string getPageCode;
    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        if (newsMid == "1")
        {
            getPageCode = "HOP0301";
        }
        else if(newsMid == "2")
        {
            getPageCode = "HOP0201";
        }
        if (firstrender)
        {
            isLoading = true;

            url = ConfigureCore.redirectsNews;

            if (shortToken != null)
            {
                responseShortToken = await readTokenService.ReadToken(shortToken!);

                if (responseShortToken != null)
                {
                    Console.WriteLine("ResponseShortToken", responseShortToken);

                    if (env == "Development")
                    {
                        JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();
                        JwtSecurityToken jwt = tokenHandler.ReadJwtToken(responseShortToken.accessToken);
                        var t = jwt.Payload.ToList();
                        KeyValuePair<string, object> result = t.FirstOrDefault(pair => pair.Key == "preferred_username");
                        var username = result.Value.ToString();
                        userRole = await userRoleService.GetRoleByUserName(username);
                        await _localstorage.SetItemAsync("userRole", userRole);
                    }
                    else
                    {
                        userRole = await userRoleService.GetRoleByUserName(await _localstorage.GetItemAsync<String>("username"));
                        await _localstorage.SetItemAsync("userRole", userRole);
                    }
                    if (userRole != null && userRole.role != null)
                    {
                        try
                        {
                            menuList = userRole.role.Select(i => i.menu.Where(m => m.isRoleRead == true && m.appCode == "PORTAL-HOS").Select(t => t.menuCode).ToList()).ToList().SelectMany(list => list).ToList();
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine(ex);
                        }
                    }


                    JwtSecurityTokenHandler tokenHandler2 = new JwtSecurityTokenHandler();
                    JwtSecurityToken jwt1 = tokenHandler2.ReadJwtToken(responseShortToken.accessToken);
                    var token = jwt1.Payload.ToList();
                    KeyValuePair<string, object> result_username = token.FirstOrDefault(pair => pair.Key == "preferred_username");
                    KeyValuePair<string, object> resultRealm = token.FirstOrDefault(pair => pair.Key == "iss");
                    userType = resultRealm.Value.ToString().Split('/').Last();
                    username = result_username.Value.ToString();
                    orgCode = await userRoleService.GetHospitalCode(username);

                    await _localstorage.SetItemAsync("userRole", userRole);
                    await _localstorage.SetItemAsync("userType", userType);
                    await _localstorage.SetItemAsync("orgCode", orgCode);

                    if (userRole != null)
                    {
                        roleCodeList = userRole.role.Select(roleObject => roleObject.roleCode).ToList();
                    }

                    await _localstorage.SetItemAsync("roleCodeList", roleCodeList);
                    notiTapi = new NotiTApiModel
                        {
                            userType = userType,
                            username = username,
                            orgCode = orgCode,
                            roleCodeList = roleCodeList
                        };

                    responseNoti = await notificationService.GetNotiByUser(notiTapi);
                    if (responseNoti != null)
                    {
                        foreach (var item in responseNoti)
                        {
                            notiNo = notiNo + item.NotificationTs.Count;
                        }
                    }
                    isLoading = false;
                    StateHasChanged();
                }

            }
            getUser = await _localstorage.GetItemAsync<ResponseLogin>("userdata");
            StateHasChanged();
        }
    }


}